if (!document.createElement("canvas").getContext) { (function () { var z = Math; var K = z.round; var J = z.sin; var U = z.cos; var b = z.abs; var k = z.sqrt; var D = 10; var F = D / 2; function T() { return this.context_ || (this.context_ = new W(this)) } var O = Array.prototype.slice; function G(i, j, m) { var Z = O.call(arguments, 2); return function () { return i.apply(j, Z.concat(O.call(arguments))) } } function AD(Z) { return String(Z).replace(/&/g, "&amp;").replace(/"/g, "&quot;") } function r(i) { if (!i.namespaces.g_vml_) { i.namespaces.add("g_vml_", "urn:schemas-microsoft-com:vml", "#default#VML") } if (!i.namespaces.g_o_) { i.namespaces.add("g_o_", "urn:schemas-microsoft-com:office:office", "#default#VML") } if (!i.styleSheets.ex_canvas_) { var Z = i.createStyleSheet(); Z.owningElement.id = "ex_canvas_"; Z.cssText = "canvas{display:inline-block;overflow:hidden;text-align:left;width:300px;height:150px}" } } r(document); var E = { init: function (Z) { if (/MSIE/.test(navigator.userAgent) && !window.opera) { var i = Z || document; i.createElement("canvas"); i.attachEvent("onreadystatechange", G(this.init_, this, i)) } }, init_: function (m) { var j = m.getElementsByTagName("canvas"); for (var Z = 0; Z < j.length; Z++) { this.initElement(j[Z]) } }, initElement: function (i) { if (!i.getContext) { i.getContext = T; r(i.ownerDocument); i.innerHTML = ""; i.attachEvent("onpropertychange", S); i.attachEvent("onresize", w); var Z = i.attributes; if (Z.width && Z.width.specified) { i.style.width = Z.width.nodeValue + "px" } else { i.width = i.clientWidth } if (Z.height && Z.height.specified) { i.style.height = Z.height.nodeValue + "px" } else { i.height = i.clientHeight } } return i } }; function S(i) { var Z = i.srcElement; switch (i.propertyName) { case "width": Z.getContext().clearRect(); Z.style.width = Z.attributes.width.nodeValue + "px"; Z.firstChild.style.width = Z.clientWidth + "px"; break; case "height": Z.getContext().clearRect(); Z.style.height = Z.attributes.height.nodeValue + "px"; Z.firstChild.style.height = Z.clientHeight + "px"; break } } function w(i) { var Z = i.srcElement; if (Z.firstChild) { Z.firstChild.style.width = Z.clientWidth + "px"; Z.firstChild.style.height = Z.clientHeight + "px" } } E.init(); var I = []; for (var AC = 0; AC < 16; AC++) { for (var AB = 0; AB < 16; AB++) { I[AC * 16 + AB] = AC.toString(16) + AB.toString(16) } } function V() { return [[1, 0, 0], [0, 1, 0], [0, 0, 1]] } function d(m, j) { var i = V(); for (var Z = 0; Z < 3; Z++) { for (var AF = 0; AF < 3; AF++) { var p = 0; for (var AE = 0; AE < 3; AE++) { p += m[Z][AE] * j[AE][AF] } i[Z][AF] = p } } return i } function Q(i, Z) { Z.fillStyle = i.fillStyle; Z.lineCap = i.lineCap; Z.lineJoin = i.lineJoin; Z.lineWidth = i.lineWidth; Z.miterLimit = i.miterLimit; Z.shadowBlur = i.shadowBlur; Z.shadowColor = i.shadowColor; Z.shadowOffsetX = i.shadowOffsetX; Z.shadowOffsetY = i.shadowOffsetY; Z.strokeStyle = i.strokeStyle; Z.globalAlpha = i.globalAlpha; Z.font = i.font; Z.textAlign = i.textAlign; Z.textBaseline = i.textBaseline; Z.arcScaleX_ = i.arcScaleX_; Z.arcScaleY_ = i.arcScaleY_; Z.lineScale_ = i.lineScale_ } var B = { aliceblue: "#F0F8FF", antiquewhite: "#FAEBD7", aquamarine: "#7FFFD4", azure: "#F0FFFF", beige: "#F5F5DC", bisque: "#FFE4C4", black: "#000000", blanchedalmond: "#FFEBCD", blueviolet: "#8A2BE2", brown: "#A52A2A", burlywood: "#DEB887", cadetblue: "#5F9EA0", chartreuse: "#7FFF00", chocolate: "#D2691E", coral: "#FF7F50", cornflowerblue: "#6495ED", cornsilk: "#FFF8DC", crimson: "#DC143C", cyan: "#00FFFF", darkblue: "#00008B", darkcyan: "#008B8B", darkgoldenrod: "#B8860B", darkgray: "#A9A9A9", darkgreen: "#006400", darkgrey: "#A9A9A9", darkkhaki: "#BDB76B", darkmagenta: "#8B008B", darkolivegreen: "#556B2F", darkorange: "#FF8C00", darkorchid: "#9932CC", darkred: "#8B0000", darksalmon: "#E9967A", darkseagreen: "#8FBC8F", darkslateblue: "#483D8B", darkslategray: "#2F4F4F", darkslategrey: "#2F4F4F", darkturquoise: "#00CED1", darkviolet: "#9400D3", deeppink: "#FF1493", deepskyblue: "#00BFFF", dimgray: "#696969", dimgrey: "#696969", dodgerblue: "#1E90FF", firebrick: "#B22222", floralwhite: "#FFFAF0", forestgreen: "#228B22", gainsboro: "#DCDCDC", ghostwhite: "#F8F8FF", gold: "#FFD700", goldenrod: "#DAA520", grey: "#808080", greenyellow: "#ADFF2F", honeydew: "#F0FFF0", hotpink: "#FF69B4", indianred: "#CD5C5C", indigo: "#4B0082", ivory: "#FFFFF0", khaki: "#F0E68C", lavender: "#E6E6FA", lavenderblush: "#FFF0F5", lawngreen: "#7CFC00", lemonchiffon: "#FFFACD", lightblue: "#ADD8E6", lightcoral: "#F08080", lightcyan: "#E0FFFF", lightgoldenrodyellow: "#FAFAD2", lightgreen: "#90EE90", lightgrey: "#D3D3D3", lightpink: "#FFB6C1", lightsalmon: "#FFA07A", lightseagreen: "#20B2AA", lightskyblue: "#87CEFA", lightslategray: "#778899", lightslategrey: "#778899", lightsteelblue: "#B0C4DE", lightyellow: "#FFFFE0", limegreen: "#32CD32", linen: "#FAF0E6", magenta: "#FF00FF", mediumaquamarine: "#66CDAA", mediumblue: "#0000CD", mediumorchid: "#BA55D3", mediumpurple: "#9370DB", mediumseagreen: "#3CB371", mediumslateblue: "#7B68EE", mediumspringgreen: "#00FA9A", mediumturquoise: "#48D1CC", mediumvioletred: "#C71585", midnightblue: "#191970", mintcream: "#F5FFFA", mistyrose: "#FFE4E1", moccasin: "#FFE4B5", navajowhite: "#FFDEAD", oldlace: "#FDF5E6", olivedrab: "#6B8E23", orange: "#FFA500", orangered: "#FF4500", orchid: "#DA70D6", palegoldenrod: "#EEE8AA", palegreen: "#98FB98", paleturquoise: "#AFEEEE", palevioletred: "#DB7093", papayawhip: "#FFEFD5", peachpuff: "#FFDAB9", peru: "#CD853F", pink: "#FFC0CB", plum: "#DDA0DD", powderblue: "#B0E0E6", rosybrown: "#BC8F8F", royalblue: "#4169E1", saddlebrown: "#8B4513", salmon: "#FA8072", sandybrown: "#F4A460", seagreen: "#2E8B57", seashell: "#FFF5EE", sienna: "#A0522D", skyblue: "#87CEEB", slateblue: "#6A5ACD", slategray: "#708090", slategrey: "#708090", snow: "#FFFAFA", springgreen: "#00FF7F", steelblue: "#4682B4", tan: "#D2B48C", thistle: "#D8BFD8", tomato: "#FF6347", turquoise: "#40E0D0", violet: "#EE82EE", wheat: "#F5DEB3", whitesmoke: "#F5F5F5", yellowgreen: "#9ACD32" }; function g(i) { var m = i.indexOf("(", 3); var Z = i.indexOf(")", m + 1); var j = i.substring(m + 1, Z).split(","); if (j.length == 4 && i.substr(3, 1) == "a") { alpha = Number(j[3]) } else { j[3] = 1 } return j } function C(Z) { return parseFloat(Z) / 100 } function N(i, j, Z) { return Math.min(Z, Math.max(j, i)) } function c(AF) { var j, i, Z; h = parseFloat(AF[0]) / 360 % 360; if (h < 0) { h++ } s = N(C(AF[1]), 0, 1); l = N(C(AF[2]), 0, 1); if (s == 0) { j = i = Z = l } else { var m = l < 0.5 ? l * (1 + s) : l + s - l * s; var AE = 2 * l - m; j = A(AE, m, h + 1 / 3); i = A(AE, m, h); Z = A(AE, m, h - 1 / 3) } return "#" + I[Math.floor(j * 255)] + I[Math.floor(i * 255)] + I[Math.floor(Z * 255)] } function A(i, Z, j) { if (j < 0) { j++ } if (j > 1) { j-- } if (6 * j < 1) { return i + (Z - i) * 6 * j } else { if (2 * j < 1) { return Z } else { if (3 * j < 2) { return i + (Z - i) * (2 / 3 - j) * 6 } else { return i } } } } function Y(Z) { var AE, p = 1; Z = String(Z); if (Z.charAt(0) == "#") { AE = Z } else { if (/^rgb/.test(Z)) { var m = g(Z); var AE = "#", AF; for (var j = 0; j < 3; j++) { if (m[j].indexOf("%") != -1) { AF = Math.floor(C(m[j]) * 255) } else { AF = Number(m[j]) } AE += I[N(AF, 0, 255)] } p = m[3] } else { if (/^hsl/.test(Z)) { var m = g(Z); AE = c(m); p = m[3] } else { AE = B[Z] || Z } } } return { color: AE, alpha: p } } var L = { style: "normal", variant: "normal", weight: "normal", size: 10, family: "sans-serif" }; var f = {}; function X(Z) { if (f[Z]) { return f[Z] } var m = document.createElement("div"); var j = m.style; try { j.font = Z } catch (i) { } return f[Z] = { style: j.fontStyle || L.style, variant: j.fontVariant || L.variant, weight: j.fontWeight || L.weight, size: j.fontSize || L.size, family: j.fontFamily || L.family } } function P(j, i) { var Z = {}; for (var AF in j) { Z[AF] = j[AF] } var AE = parseFloat(i.currentStyle.fontSize), m = parseFloat(j.size); if (typeof j.size == "number") { Z.size = j.size } else { if (j.size.indexOf("px") != -1) { Z.size = m } else { if (j.size.indexOf("em") != -1) { Z.size = AE * m } else { if (j.size.indexOf("%") != -1) { Z.size = (AE / 100) * m } else { if (j.size.indexOf("pt") != -1) { Z.size = m / 0.75 } else { Z.size = AE } } } } } Z.size *= 0.981; return Z } function AA(Z) { return Z.style + " " + Z.variant + " " + Z.weight + " " + Z.size + "px " + Z.family } function t(Z) { switch (Z) { case "butt": return "flat"; case "round": return "round"; case "square": default: return "square" } } function W(i) { this.m_ = V(); this.mStack_ = []; this.aStack_ = []; this.currentPath_ = []; this.strokeStyle = "#000"; this.fillStyle = "#000"; this.lineWidth = 1; this.lineJoin = "miter"; this.lineCap = "butt"; this.miterLimit = D * 1; this.globalAlpha = 1; this.font = "10px sans-serif"; this.textAlign = "left"; this.textBaseline = "alphabetic"; this.canvas = i; var Z = i.ownerDocument.createElement("div"); Z.style.width = i.clientWidth + "px"; Z.style.height = i.clientHeight + "px"; Z.style.overflow = "hidden"; Z.style.position = "absolute"; i.appendChild(Z); this.element_ = Z; this.arcScaleX_ = 1; this.arcScaleY_ = 1; this.lineScale_ = 1 } var M = W.prototype; M.clearRect = function () { if (this.textMeasureEl_) { this.textMeasureEl_.removeNode(true); this.textMeasureEl_ = null } this.element_.innerHTML = "" }; M.beginPath = function () { this.currentPath_ = [] }; M.moveTo = function (i, Z) { var j = this.getCoords_(i, Z); this.currentPath_.push({ type: "moveTo", x: j.x, y: j.y }); this.currentX_ = j.x; this.currentY_ = j.y }; M.lineTo = function (i, Z) { var j = this.getCoords_(i, Z); this.currentPath_.push({ type: "lineTo", x: j.x, y: j.y }); this.currentX_ = j.x; this.currentY_ = j.y }; M.bezierCurveTo = function (j, i, AI, AH, AG, AE) { var Z = this.getCoords_(AG, AE); var AF = this.getCoords_(j, i); var m = this.getCoords_(AI, AH); e(this, AF, m, Z) }; function e(Z, m, j, i) { Z.currentPath_.push({ type: "bezierCurveTo", cp1x: m.x, cp1y: m.y, cp2x: j.x, cp2y: j.y, x: i.x, y: i.y }); Z.currentX_ = i.x; Z.currentY_ = i.y } M.quadraticCurveTo = function (AG, j, i, Z) { var AF = this.getCoords_(AG, j); var AE = this.getCoords_(i, Z); var AH = { x: this.currentX_ + 2 / 3 * (AF.x - this.currentX_), y: this.currentY_ + 2 / 3 * (AF.y - this.currentY_) }; var m = { x: AH.x + (AE.x - this.currentX_) / 3, y: AH.y + (AE.y - this.currentY_) / 3 }; e(this, AH, m, AE) }; M.arc = function (AJ, AH, AI, AE, i, j) { AI *= D; var AN = j ? "at" : "wa"; var AK = AJ + U(AE) * AI - F; var AM = AH + J(AE) * AI - F; var Z = AJ + U(i) * AI - F; var AL = AH + J(i) * AI - F; if (AK == Z && !j) { AK += 0.125 } var m = this.getCoords_(AJ, AH); var AG = this.getCoords_(AK, AM); var AF = this.getCoords_(Z, AL); this.currentPath_.push({ type: AN, x: m.x, y: m.y, radius: AI, xStart: AG.x, yStart: AG.y, xEnd: AF.x, yEnd: AF.y }) }; M.rect = function (j, i, Z, m) { this.moveTo(j, i); this.lineTo(j + Z, i); this.lineTo(j + Z, i + m); this.lineTo(j, i + m); this.closePath() }; M.strokeRect = function (j, i, Z, m) { var p = this.currentPath_; this.beginPath(); this.moveTo(j, i); this.lineTo(j + Z, i); this.lineTo(j + Z, i + m); this.lineTo(j, i + m); this.closePath(); this.stroke(); this.currentPath_ = p }; M.fillRect = function (j, i, Z, m) { var p = this.currentPath_; this.beginPath(); this.moveTo(j, i); this.lineTo(j + Z, i); this.lineTo(j + Z, i + m); this.lineTo(j, i + m); this.closePath(); this.fill(); this.currentPath_ = p }; M.createLinearGradient = function (i, m, Z, j) { var p = new v("gradient"); p.x0_ = i; p.y0_ = m; p.x1_ = Z; p.y1_ = j; return p }; M.createRadialGradient = function (m, AE, j, i, p, Z) { var AF = new v("gradientradial"); AF.x0_ = m; AF.y0_ = AE; AF.r0_ = j; AF.x1_ = i; AF.y1_ = p; AF.r1_ = Z; return AF }; M.drawImage = function (AO, j) { var AH, AF, AJ, AV, AM, AK, AQ, AX; var AI = AO.runtimeStyle.width; var AN = AO.runtimeStyle.height; AO.runtimeStyle.width = "auto"; AO.runtimeStyle.height = "auto"; var AG = AO.width; var AT = AO.height; AO.runtimeStyle.width = AI; AO.runtimeStyle.height = AN; if (arguments.length == 3) { AH = arguments[1]; AF = arguments[2]; AM = AK = 0; AQ = AJ = AG; AX = AV = AT } else { if (arguments.length == 5) { AH = arguments[1]; AF = arguments[2]; AJ = arguments[3]; AV = arguments[4]; AM = AK = 0; AQ = AG; AX = AT } else { if (arguments.length == 9) { AM = arguments[1]; AK = arguments[2]; AQ = arguments[3]; AX = arguments[4]; AH = arguments[5]; AF = arguments[6]; AJ = arguments[7]; AV = arguments[8] } else { throw Error("Invalid number of arguments") } } } var AW = this.getCoords_(AH, AF); var m = AQ / 2; var i = AX / 2; var AU = []; var Z = 10; var AE = 10; AU.push(" <g_vml_:group", ' coordsize="', D * Z, ",", D * AE, '"', ' coordorigin="0,0"', ' style="width:', Z, "px;height:", AE, "px;position:absolute;"); if (this.m_[0][0] != 1 || this.m_[0][1] || this.m_[1][1] != 1 || this.m_[1][0]) { var p = []; p.push("M11=", this.m_[0][0], ",", "M12=", this.m_[1][0], ",", "M21=", this.m_[0][1], ",", "M22=", this.m_[1][1], ",", "Dx=", K(AW.x / D), ",", "Dy=", K(AW.y / D), ""); var AS = AW; var AR = this.getCoords_(AH + AJ, AF); var AP = this.getCoords_(AH, AF + AV); var AL = this.getCoords_(AH + AJ, AF + AV); AS.x = z.max(AS.x, AR.x, AP.x, AL.x); AS.y = z.max(AS.y, AR.y, AP.y, AL.y); AU.push("padding:0 ", K(AS.x / D), "px ", K(AS.y / D), "px 0;filter:progid:DXImageTransform.Microsoft.Matrix(", p.join(""), ", sizingmethod='clip');") } else { AU.push("top:", K(AW.y / D), "px;left:", K(AW.x / D), "px;") } AU.push(' ">', '<g_vml_:image src="', AO.src, '"', ' style="width:', D * AJ, "px;", " height:", D * AV, 'px"', ' cropleft="', AM / AG, '"', ' croptop="', AK / AT, '"', ' cropright="', (AG - AM - AQ) / AG, '"', ' cropbottom="', (AT - AK - AX) / AT, '"', " />", "</g_vml_:group>"); this.element_.insertAdjacentHTML("BeforeEnd", AU.join("")) }; M.stroke = function (AM) { var m = 10; var AN = 10; var AE = 5000; var AG = { x: null, y: null }; var AL = { x: null, y: null }; for (var AH = 0; AH < this.currentPath_.length; AH += AE) { var AK = []; var AF = false; AK.push("<g_vml_:shape", ' filled="', !!AM, '"', ' style="position:absolute;width:', m, "px;height:", AN, 'px;"', ' coordorigin="0,0"', ' coordsize="', D * m, ",", D * AN, '"', ' stroked="', !AM, '"', ' path="'); var AO = false; for (var AI = AH; AI < Math.min(AH + AE, this.currentPath_.length); AI++) { if (AI % AE == 0 && AI > 0) { AK.push(" m ", K(this.currentPath_[AI - 1].x), ",", K(this.currentPath_[AI - 1].y)) } var Z = this.currentPath_[AI]; var AJ; switch (Z.type) { case "moveTo": AJ = Z; AK.push(" m ", K(Z.x), ",", K(Z.y)); break; case "lineTo": AK.push(" l ", K(Z.x), ",", K(Z.y)); break; case "close": AK.push(" x "); Z = null; break; case "bezierCurveTo": AK.push(" c ", K(Z.cp1x), ",", K(Z.cp1y), ",", K(Z.cp2x), ",", K(Z.cp2y), ",", K(Z.x), ",", K(Z.y)); break; case "at": case "wa": AK.push(" ", Z.type, " ", K(Z.x - this.arcScaleX_ * Z.radius), ",", K(Z.y - this.arcScaleY_ * Z.radius), " ", K(Z.x + this.arcScaleX_ * Z.radius), ",", K(Z.y + this.arcScaleY_ * Z.radius), " ", K(Z.xStart), ",", K(Z.yStart), " ", K(Z.xEnd), ",", K(Z.yEnd)); break }if (Z) { if (AG.x == null || Z.x < AG.x) { AG.x = Z.x } if (AL.x == null || Z.x > AL.x) { AL.x = Z.x } if (AG.y == null || Z.y < AG.y) { AG.y = Z.y } if (AL.y == null || Z.y > AL.y) { AL.y = Z.y } } } AK.push(' ">'); if (!AM) { R(this, AK) } else { a(this, AK, AG, AL) } AK.push("</g_vml_:shape>"); this.element_.insertAdjacentHTML("beforeEnd", AK.join("")) } }; function R(j, AE) { var i = Y(j.strokeStyle); var m = i.color; var p = i.alpha * j.globalAlpha; var Z = j.lineScale_ * j.lineWidth; if (Z < 1) { p *= Z } AE.push("<g_vml_:stroke", ' opacity="', p, '"', ' joinstyle="', j.lineJoin, '"', ' miterlimit="', j.miterLimit, '"', ' endcap="', t(j.lineCap), '"', ' weight="', Z, 'px"', ' color="', m, '" />') } function a(AO, AG, Ah, AP) { var AH = AO.fillStyle; var AY = AO.arcScaleX_; var AX = AO.arcScaleY_; var Z = AP.x - Ah.x; var m = AP.y - Ah.y; if (AH instanceof v) { var AL = 0; var Ac = { x: 0, y: 0 }; var AU = 0; var AK = 1; if (AH.type_ == "gradient") { var AJ = AH.x0_ / AY; var j = AH.y0_ / AX; var AI = AH.x1_ / AY; var Aj = AH.y1_ / AX; var Ag = AO.getCoords_(AJ, j); var Af = AO.getCoords_(AI, Aj); var AE = Af.x - Ag.x; var p = Af.y - Ag.y; AL = Math.atan2(AE, p) * 180 / Math.PI; if (AL < 0) { AL += 360 } if (AL < 0.000001) { AL = 0 } } else { var Ag = AO.getCoords_(AH.x0_, AH.y0_); Ac = { x: (Ag.x - Ah.x) / Z, y: (Ag.y - Ah.y) / m }; Z /= AY * D; m /= AX * D; var Aa = z.max(Z, m); AU = 2 * AH.r0_ / Aa; AK = 2 * AH.r1_ / Aa - AU } var AS = AH.colors_; AS.sort(function (Ak, i) { return Ak.offset - i.offset }); var AN = AS.length; var AR = AS[0].color; var AQ = AS[AN - 1].color; var AW = AS[0].alpha * AO.globalAlpha; var AV = AS[AN - 1].alpha * AO.globalAlpha; var Ab = []; for (var Ae = 0; Ae < AN; Ae++) { var AM = AS[Ae]; Ab.push(AM.offset * AK + AU + " " + AM.color) } AG.push('<g_vml_:fill type="', AH.type_, '"', ' method="none" focus="100%"', ' color="', AR, '"', ' color2="', AQ, '"', ' colors="', Ab.join(","), '"', ' opacity="', AV, '"', ' g_o_:opacity2="', AW, '"', ' angle="', AL, '"', ' focusposition="', Ac.x, ",", Ac.y, '" />') } else { if (AH instanceof u) { if (Z && m) { var AF = -Ah.x; var AZ = -Ah.y; AG.push("<g_vml_:fill", ' position="', AF / Z * AY * AY, ",", AZ / m * AX * AX, '"', ' type="tile"', ' src="', AH.src_, '" />') } } else { var Ai = Y(AO.fillStyle); var AT = Ai.color; var Ad = Ai.alpha * AO.globalAlpha; AG.push('<g_vml_:fill color="', AT, '" opacity="', Ad, '" />') } } } M.fill = function () { this.stroke(true) }; M.closePath = function () { this.currentPath_.push({ type: "close" }) }; M.getCoords_ = function (j, i) { var Z = this.m_; return { x: D * (j * Z[0][0] + i * Z[1][0] + Z[2][0]) - F, y: D * (j * Z[0][1] + i * Z[1][1] + Z[2][1]) - F } }; M.save = function () { var Z = {}; Q(this, Z); this.aStack_.push(Z); this.mStack_.push(this.m_); this.m_ = d(V(), this.m_) }; M.restore = function () { if (this.aStack_.length) { Q(this.aStack_.pop(), this); this.m_ = this.mStack_.pop() } }; function H(Z) { return isFinite(Z[0][0]) && isFinite(Z[0][1]) && isFinite(Z[1][0]) && isFinite(Z[1][1]) && isFinite(Z[2][0]) && isFinite(Z[2][1]) } function y(i, Z, j) { if (!H(Z)) { return } i.m_ = Z; if (j) { var p = Z[0][0] * Z[1][1] - Z[0][1] * Z[1][0]; i.lineScale_ = k(b(p)) } } M.translate = function (j, i) { var Z = [[1, 0, 0], [0, 1, 0], [j, i, 1]]; y(this, d(Z, this.m_), false) }; M.rotate = function (i) { var m = U(i); var j = J(i); var Z = [[m, j, 0], [-j, m, 0], [0, 0, 1]]; y(this, d(Z, this.m_), false) }; M.scale = function (j, i) { this.arcScaleX_ *= j; this.arcScaleY_ *= i; var Z = [[j, 0, 0], [0, i, 0], [0, 0, 1]]; y(this, d(Z, this.m_), true) }; M.transform = function (p, m, AF, AE, i, Z) { var j = [[p, m, 0], [AF, AE, 0], [i, Z, 1]]; y(this, d(j, this.m_), true) }; M.setTransform = function (AE, p, AG, AF, j, i) { var Z = [[AE, p, 0], [AG, AF, 0], [j, i, 1]]; y(this, Z, true) }; M.drawText_ = function (AK, AI, AH, AN, AG) { var AM = this.m_, AQ = 1000, i = 0, AP = AQ, AF = { x: 0, y: 0 }, AE = []; var Z = P(X(this.font), this.element_); var j = AA(Z); var AR = this.element_.currentStyle; var p = this.textAlign.toLowerCase(); switch (p) { case "left": case "center": case "right": break; case "end": p = AR.direction == "ltr" ? "right" : "left"; break; case "start": p = AR.direction == "rtl" ? "right" : "left"; break; default: p = "left" }switch (this.textBaseline) { case "hanging": case "top": AF.y = Z.size / 1.75; break; case "middle": break; default: case null: case "alphabetic": case "ideographic": case "bottom": AF.y = -Z.size / 2.25; break }switch (p) { case "right": i = AQ; AP = 0.05; break; case "center": i = AP = AQ / 2; break }var AO = this.getCoords_(AI + AF.x, AH + AF.y); AE.push('<g_vml_:line from="', -i, ' 0" to="', AP, ' 0.05" ', ' coordsize="100 100" coordorigin="0 0"', ' filled="', !AG, '" stroked="', !!AG, '" style="position:absolute;width:1px;height:1px;">'); if (AG) { R(this, AE) } else { a(this, AE, { x: -i, y: 0 }, { x: AP, y: Z.size }) } var AL = AM[0][0].toFixed(3) + "," + AM[1][0].toFixed(3) + "," + AM[0][1].toFixed(3) + "," + AM[1][1].toFixed(3) + ",0,0"; var AJ = K(AO.x / D) + "," + K(AO.y / D); AE.push('<g_vml_:skew on="t" matrix="', AL, '" ', ' offset="', AJ, '" origin="', i, ' 0" />', '<g_vml_:path textpathok="true" />', '<g_vml_:textpath on="true" string="', AD(AK), '" style="v-text-align:', p, ";font:", AD(j), '" /></g_vml_:line>'); this.element_.insertAdjacentHTML("beforeEnd", AE.join("")) }; M.fillText = function (j, Z, m, i) { this.drawText_(j, Z, m, i, false) }; M.strokeText = function (j, Z, m, i) { this.drawText_(j, Z, m, i, true) }; M.measureText = function (j) { if (!this.textMeasureEl_) { var Z = '<span style="position:absolute;top:-20000px;left:0;padding:0;margin:0;border:none;white-space:pre;"></span>'; this.element_.insertAdjacentHTML("beforeEnd", Z); this.textMeasureEl_ = this.element_.lastChild } var i = this.element_.ownerDocument; this.textMeasureEl_.innerHTML = ""; this.textMeasureEl_.style.font = this.font; this.textMeasureEl_.appendChild(i.createTextNode(j)); return { width: this.textMeasureEl_.offsetWidth } }; M.clip = function () { }; M.arcTo = function () { }; M.createPattern = function (i, Z) { return new u(i, Z) }; function v(Z) { this.type_ = Z; this.x0_ = 0; this.y0_ = 0; this.r0_ = 0; this.x1_ = 0; this.y1_ = 0; this.r1_ = 0; this.colors_ = [] } v.prototype.addColorStop = function (i, Z) { Z = Y(Z); this.colors_.push({ offset: i, color: Z.color, alpha: Z.alpha }) }; function u(i, Z) { q(i); switch (Z) { case "repeat": case null: case "": this.repetition_ = "repeat"; break; case "repeat-x": case "repeat-y": case "no-repeat": this.repetition_ = Z; break; default: n("SYNTAX_ERR") }this.src_ = i.src; this.width_ = i.width; this.height_ = i.height } function n(Z) { throw new o(Z) } function q(Z) { if (!Z || Z.nodeType != 1 || Z.tagName != "IMG") { n("TYPE_MISMATCH_ERR") } if (Z.readyState != "complete") { n("INVALID_STATE_ERR") } } function o(Z) { this.code = this[Z]; this.message = Z + ": DOM Exception " + this.code } var x = o.prototype = new Error; x.INDEX_SIZE_ERR = 1; x.DOMSTRING_SIZE_ERR = 2; x.HIERARCHY_REQUEST_ERR = 3; x.WRONG_DOCUMENT_ERR = 4; x.INVALID_CHARACTER_ERR = 5; x.NO_DATA_ALLOWED_ERR = 6; x.NO_MODIFICATION_ALLOWED_ERR = 7; x.NOT_FOUND_ERR = 8; x.NOT_SUPPORTED_ERR = 9; x.INUSE_ATTRIBUTE_ERR = 10; x.INVALID_STATE_ERR = 11; x.SYNTAX_ERR = 12; x.INVALID_MODIFICATION_ERR = 13; x.NAMESPACE_ERR = 14; x.INVALID_ACCESS_ERR = 15; x.VALIDATION_ERR = 16; x.TYPE_MISMATCH_ERR = 17; G_vmlCanvasManager = E; CanvasRenderingContext2D = W; CanvasGradient = v; CanvasPattern = u; DOMException = o })() };;/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */(function (global, factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) { throw new Error("jQuery requires a window with a document"); }
            return factory(w);
        };
    } else { factory(global); }
}(typeof window !== "undefined" ? window : this, function (window, noGlobal) {
    var deletedIds = []; var document = window.document; var slice = deletedIds.slice; var concat = deletedIds.concat; var push = deletedIds.push; var indexOf = deletedIds.indexOf; var class2type = {}; var toString = class2type.toString; var hasOwn = class2type.hasOwnProperty; var support = {}; var
        version = "1.12.4", jQuery = function (selector, context) { return new jQuery.fn.init(selector, context); }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) { return letter.toUpperCase(); }; jQuery.fn = jQuery.prototype = { jquery: version, constructor: jQuery, selector: "", length: 0, toArray: function () { return slice.call(this); }, get: function (num) { return num != null ? (num < 0 ? this[num + this.length] : this[num]) : slice.call(this); }, pushStack: function (elems) { var ret = jQuery.merge(this.constructor(), elems); ret.prevObject = this; ret.context = this.context; return ret; }, each: function (callback) { return jQuery.each(this, callback); }, map: function (callback) { return this.pushStack(jQuery.map(this, function (elem, i) { return callback.call(elem, i, elem); })); }, slice: function () { return this.pushStack(slice.apply(this, arguments)); }, first: function () { return this.eq(0); }, last: function () { return this.eq(-1); }, eq: function (i) { var len = this.length, j = +i + (i < 0 ? len : 0); return this.pushStack(j >= 0 && j < len ? [this[j]] : []); }, end: function () { return this.prevObject || this.constructor(); }, push: push, sort: deletedIds.sort, splice: deletedIds.splice }; jQuery.extend = jQuery.fn.extend = function () {
            var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false; if (typeof target === "boolean") { deep = target; target = arguments[i] || {}; i++; }
            if (typeof target !== "object" && !jQuery.isFunction(target)) { target = {}; }
            if (i === length) { target = this; i--; }
            for (; i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name]; copy = options[name]; if (target === copy) { continue; }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) { copyIsArray = false; clone = src && jQuery.isArray(src) ? src : []; } else { clone = src && jQuery.isPlainObject(src) ? src : {}; }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) { target[name] = copy; }
                    }
                }
            }
            return target;
        }; jQuery.extend({
            expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""), isReady: true, error: function (msg) { throw new Error(msg); }, noop: function () { }, isFunction: function (obj) { return jQuery.type(obj) === "function"; }, isArray: Array.isArray || function (obj) { return jQuery.type(obj) === "array"; }, isWindow: function (obj) { return obj != null && obj == obj.window; }, isNumeric: function (obj) { var realStringObj = obj && obj.toString(); return !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0; }, isEmptyObject: function (obj) {
                var name; for (name in obj) { return false; }
                return true;
            }, isPlainObject: function (obj) {
                var key; if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) { return false; }
                try { if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) { return false; } } catch (e) { return false; }
                if (!support.ownFirst) { for (key in obj) { return hasOwn.call(obj, key); } }
                for (key in obj) { }
                return key === undefined || hasOwn.call(obj, key);
            }, type: function (obj) {
                if (obj == null) { return obj + ""; }
                return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
            }, globalEval: function (data) { if (data && jQuery.trim(data)) { (window.execScript || function (data) { window["eval"].call(window, data); })(data); } }, camelCase: function (string) { return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase); }, nodeName: function (elem, name) { return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase(); }, each: function (obj, callback) {
                var length, i = 0; if (isArrayLike(obj)) { length = obj.length; for (; i < length; i++) { if (callback.call(obj[i], i, obj[i]) === false) { break; } } } else { for (i in obj) { if (callback.call(obj[i], i, obj[i]) === false) { break; } } }
                return obj;
            }, trim: function (text) { return text == null ? "" : (text + "").replace(rtrim, ""); }, makeArray: function (arr, results) {
                var ret = results || []; if (arr != null) { if (isArrayLike(Object(arr))) { jQuery.merge(ret, typeof arr === "string" ? [arr] : arr); } else { push.call(ret, arr); } }
                return ret;
            }, inArray: function (elem, arr, i) {
                var len; if (arr) {
                    if (indexOf) { return indexOf.call(arr, elem, i); }
                    len = arr.length; i = i ? i < 0 ? Math.max(0, len + i) : i : 0; for (; i < len; i++) { if (i in arr && arr[i] === elem) { return i; } }
                }
                return -1;
            }, merge: function (first, second) {
                var len = +second.length, j = 0, i = first.length; while (j < len) { first[i++] = second[j++]; }
                if (len !== len) { while (second[j] !== undefined) { first[i++] = second[j++]; } }
                first.length = i; return first;
            }, grep: function (elems, callback, invert) {
                var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert; for (; i < length; i++) { callbackInverse = !callback(elems[i], i); if (callbackInverse !== callbackExpect) { matches.push(elems[i]); } }
                return matches;
            }, map: function (elems, callback, arg) {
                var length, value, i = 0, ret = []; if (isArrayLike(elems)) { length = elems.length; for (; i < length; i++) { value = callback(elems[i], i, arg); if (value != null) { ret.push(value); } } } else { for (i in elems) { value = callback(elems[i], i, arg); if (value != null) { ret.push(value); } } }
                return concat.apply([], ret);
            }, guid: 1, proxy: function (fn, context) {
                var args, proxy, tmp; if (typeof context === "string") { tmp = fn[context]; context = fn; fn = tmp; }
                if (!jQuery.isFunction(fn)) { return undefined; }
                args = slice.call(arguments, 2); proxy = function () { return fn.apply(context || this, args.concat(slice.call(arguments))); }; proxy.guid = fn.guid = fn.guid || jQuery.guid++; return proxy;
            }, now: function () { return +(new Date()); }, support: support
        }); if (typeof Symbol === "function") { jQuery.fn[Symbol.iterator] = deletedIds[Symbol.iterator]; }
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) { class2type["[object " + name + "]"] = name.toLowerCase(); }); function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = jQuery.type(obj); if (type === "function" || jQuery.isWindow(obj)) { return false; }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
    }
    var Sizzle =/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */(function (window) {
            var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
                if (a === b) { hasDuplicate = true; }
                return 0;
            }, MAX_NEGATIVE = 1 << 31, hasOwn = ({}).hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                var i = 0, len = list.length; for (; i < len; i++) { if (list[i] === elem) { return i; } }
                return -1;
            }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
                "ID": new RegExp("^#(" + identifier + ")"), "CLASS": new RegExp("^\\.(" + identifier + ")"), "TAG": new RegExp("^(" + identifier + "|[*])"), "ATTR": new RegExp("^" + attributes), "PSEUDO": new RegExp("^" + pseudos), "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"), "bool": new RegExp("^(?:" + booleans + ")$", "i"), "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                    whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
            }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function (_, escaped, escapedWhitespace) { var high = "0x" + escaped - 0x10000; return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00); }, unloadHandler = function () { setDocument(); }; try { push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes); arr[preferredDoc.childNodes.length].nodeType; } catch (e) {
                push = {
                    apply: arr.length ? function (target, els) { push_native.apply(target, slice.call(els)); } : function (target, els) {
                        var j = target.length, i = 0; while ((target[j++] = els[i++])) { }
                        target.length = j - 1;
                    }
                };
            }
            function Sizzle(selector, context, results, seed) {
                var m, i, elem, nid, nidselect, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9; results = results || []; if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) { return results; }
                if (!seed) {
                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) { setDocument(context); }
                    context = context || document; if (documentIsHTML) {
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) { if ((m = match[1])) { if (nodeType === 9) { if ((elem = context.getElementById(m))) { if (elem.id === m) { results.push(elem); return results; } } else { return results; } } else { if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) { results.push(elem); return results; } } } else if (match[2]) { push.apply(results, context.getElementsByTagName(selector)); return results; } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) { push.apply(results, context.getElementsByClassName(m)); return results; } }
                        if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                            if (nodeType !== 1) { newContext = context; newSelector = selector; } else if (context.nodeName.toLowerCase() !== "object") {
                                if ((nid = context.getAttribute("id"))) { nid = nid.replace(rescape, "\\$&"); } else { context.setAttribute("id", (nid = expando)); }
                                groups = tokenize(selector); i = groups.length; nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']"; while (i--) { groups[i] = nidselect + " " + toSelector(groups[i]); }
                                newSelector = groups.join(","); newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                            }
                            if (newSelector) { try { push.apply(results, newContext.querySelectorAll(newSelector)); return results; } catch (qsaError) { } finally { if (nid === expando) { context.removeAttribute("id"); } } }
                        }
                    }
                }
                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }
            function createCache() {
                var keys = []; function cache(key, value) {
                    if (keys.push(key + " ") > Expr.cacheLength) { delete cache[keys.shift()]; }
                    return (cache[key + " "] = value);
                }
                return cache;
            }
            function markFunction(fn) { fn[expando] = true; return fn; }
            function assert(fn) {
                var div = document.createElement("div"); try { return !!fn(div); } catch (e) { return false; } finally {
                    if (div.parentNode) { div.parentNode.removeChild(div); }
                    div = null;
                }
            }
            function addHandle(attrs, handler) { var arr = attrs.split("|"), i = arr.length; while (i--) { Expr.attrHandle[arr[i]] = handler; } }
            function siblingCheck(a, b) {
                var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) -
                    (~a.sourceIndex || MAX_NEGATIVE); if (diff) { return diff; }
                if (cur) { while ((cur = cur.nextSibling)) { if (cur === b) { return -1; } } }
                return a ? 1 : -1;
            }
            function createInputPseudo(type) { return function (elem) { var name = elem.nodeName.toLowerCase(); return name === "input" && elem.type === type; }; }
            function createButtonPseudo(type) { return function (elem) { var name = elem.nodeName.toLowerCase(); return (name === "input" || name === "button") && elem.type === type; }; }
            function createPositionalPseudo(fn) { return markFunction(function (argument) { argument = +argument; return markFunction(function (seed, matches) { var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length; while (i--) { if (seed[(j = matchIndexes[i])]) { seed[j] = !(matches[j] = seed[j]); } } }); }); }
            function testContext(context) { return context && typeof context.getElementsByTagName !== "undefined" && context; }
            support = Sizzle.support = {}; isXML = Sizzle.isXML = function (elem) { var documentElement = elem && (elem.ownerDocument || elem).documentElement; return documentElement ? documentElement.nodeName !== "HTML" : false; }; setDocument = Sizzle.setDocument = function (node) {
                var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc; if (doc === document || doc.nodeType !== 9 || !doc.documentElement) { return document; }
                document = doc; docElem = document.documentElement; documentIsHTML = !isXML(document); if ((parent = document.defaultView) && parent.top !== parent) { if (parent.addEventListener) { parent.addEventListener("unload", unloadHandler, false); } else if (parent.attachEvent) { parent.attachEvent("onunload", unloadHandler); } }
                support.attributes = assert(function (div) { div.className = "i"; return !div.getAttribute("className"); }); support.getElementsByTagName = assert(function (div) { div.appendChild(document.createComment("")); return !div.getElementsByTagName("*").length; }); support.getElementsByClassName = rnative.test(document.getElementsByClassName); support.getById = assert(function (div) { docElem.appendChild(div).id = expando; return !document.getElementsByName || !document.getElementsByName(expando).length; }); if (support.getById) { Expr.find["ID"] = function (id, context) { if (typeof context.getElementById !== "undefined" && documentIsHTML) { var m = context.getElementById(id); return m ? [m] : []; } }; Expr.filter["ID"] = function (id) { var attrId = id.replace(runescape, funescape); return function (elem) { return elem.getAttribute("id") === attrId; }; }; } else { delete Expr.find["ID"]; Expr.filter["ID"] = function (id) { var attrId = id.replace(runescape, funescape); return function (elem) { var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id"); return node && node.value === attrId; }; }; }
                Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) { if (typeof context.getElementsByTagName !== "undefined") { return context.getElementsByTagName(tag); } else if (support.qsa) { return context.querySelectorAll(tag); } } : function (tag, context) {
                    var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag); if (tag === "*") {
                        while ((elem = results[i++])) { if (elem.nodeType === 1) { tmp.push(elem); } }
                        return tmp;
                    }
                    return results;
                }; Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) { if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) { return context.getElementsByClassName(className); } }; rbuggyMatches = []; rbuggyQSA = []; if ((support.qsa = rnative.test(document.querySelectorAll))) {
                    assert(function (div) {
                        docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; if (div.querySelectorAll("[msallowcapture^='']").length) { rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")"); }
                        if (!div.querySelectorAll("[selected]").length) { rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")"); }
                        if (!div.querySelectorAll("[id~=" + expando + "-]").length) { rbuggyQSA.push("~="); }
                        if (!div.querySelectorAll(":checked").length) { rbuggyQSA.push(":checked"); }
                        if (!div.querySelectorAll("a#" + expando + "+*").length) { rbuggyQSA.push(".#.+[+~]"); }
                    }); assert(function (div) {
                        var input = document.createElement("input"); input.setAttribute("type", "hidden"); div.appendChild(input).setAttribute("name", "D"); if (div.querySelectorAll("[name=d]").length) { rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?="); }
                        if (!div.querySelectorAll(":enabled").length) { rbuggyQSA.push(":enabled", ":disabled"); }
                        div.querySelectorAll("*,:x"); rbuggyQSA.push(",.*:");
                    });
                }
                if ((support.matchesSelector = rnative.test((matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) { assert(function (div) { support.disconnectedMatch = matches.call(div, "div"); matches.call(div, "[s!='']:x"); rbuggyMatches.push("!=", pseudos); }); }
                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|")); rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")); hasCompare = rnative.test(docElem.compareDocumentPosition); contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) { var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode; return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16)); } : function (a, b) {
                    if (b) { while ((b = b.parentNode)) { if (b === a) { return true; } } }
                    return false;
                }; sortOrder = hasCompare ? function (a, b) {
                    if (a === b) { hasDuplicate = true; return 0; }
                    var compare = !a.compareDocumentPosition - !b.compareDocumentPosition; if (compare) { return compare; }
                    compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1; if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
                        if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) { return -1; }
                        if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) { return 1; }
                        return sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0;
                    }
                    return compare & 4 ? -1 : 1;
                } : function (a, b) {
                    if (a === b) { hasDuplicate = true; return 0; }
                    var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b]; if (!aup || !bup) { return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf(sortInput, a) - indexOf(sortInput, b)) : 0; } else if (aup === bup) { return siblingCheck(a, b); }
                    cur = a; while ((cur = cur.parentNode)) { ap.unshift(cur); }
                    cur = b; while ((cur = cur.parentNode)) { bp.unshift(cur); }
                    while (ap[i] === bp[i]) { i++; }
                    return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
                }; return document;
            }; Sizzle.matches = function (expr, elements) { return Sizzle(expr, null, null, elements); }; Sizzle.matchesSelector = function (elem, expr) {
                if ((elem.ownerDocument || elem) !== document) { setDocument(elem); }
                expr = expr.replace(rattributeQuotes, "='$1']"); if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) { try { var ret = matches.call(elem, expr); if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) { return ret; } } catch (e) { } }
                return Sizzle(expr, document, null, [elem]).length > 0;
            }; Sizzle.contains = function (context, elem) {
                if ((context.ownerDocument || context) !== document) { setDocument(context); }
                return contains(context, elem);
            }; Sizzle.attr = function (elem, name) {
                if ((elem.ownerDocument || elem) !== document) { setDocument(elem); }
                var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined; return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
            }; Sizzle.error = function (msg) { throw new Error("Syntax error, unrecognized expression: " + msg); }; Sizzle.uniqueSort = function (results) {
                var elem, duplicates = [], j = 0, i = 0; hasDuplicate = !support.detectDuplicates; sortInput = !support.sortStable && results.slice(0); results.sort(sortOrder); if (hasDuplicate) {
                    while ((elem = results[i++])) { if (elem === results[i]) { j = duplicates.push(i); } }
                    while (j--) { results.splice(duplicates[j], 1); }
                }
                sortInput = null; return results;
            }; getText = Sizzle.getText = function (elem) {
                var node, ret = "", i = 0, nodeType = elem.nodeType; if (!nodeType) { while ((node = elem[i++])) { ret += getText(node); } } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) { if (typeof elem.textContent === "string") { return elem.textContent; } else { for (elem = elem.firstChild; elem; elem = elem.nextSibling) { ret += getText(elem); } } } else if (nodeType === 3 || nodeType === 4) { return elem.nodeValue; }
                return ret;
            }; Expr = Sizzle.selectors = {
                cacheLength: 50, createPseudo: markFunction, match: matchExpr, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: true }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: true }, "~": { dir: "previousSibling" } }, preFilter: {
                    "ATTR": function (match) {
                        match[1] = match[1].replace(runescape, funescape); match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape); if (match[2] === "~=") { match[3] = " " + match[3] + " "; }
                        return match.slice(0, 4);
                    }, "CHILD": function (match) {
                        match[1] = match[1].toLowerCase(); if (match[1].slice(0, 3) === "nth") {
                            if (!match[3]) { Sizzle.error(match[0]); }
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd")); match[5] = +((match[7] + match[8]) || match[3] === "odd");
                        } else if (match[3]) { Sizzle.error(match[0]); }
                        return match;
                    }, "PSEUDO": function (match) {
                        var excess, unquoted = !match[6] && match[2]; if (matchExpr["CHILD"].test(match[0])) { return null; }
                        if (match[3]) { match[2] = match[4] || match[5] || ""; } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) { match[0] = match[0].slice(0, excess); match[2] = unquoted.slice(0, excess); }
                        return match.slice(0, 3);
                    }
                }, filter: {
                    "TAG": function (nodeNameSelector) { var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase(); return nodeNameSelector === "*" ? function () { return true; } : function (elem) { return elem.nodeName && elem.nodeName.toLowerCase() === nodeName; }; }, "CLASS": function (className) { var pattern = classCache[className + " "]; return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) { return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""); }); }, "ATTR": function (name, operator, check) {
                        return function (elem) {
                            var result = Sizzle.attr(elem, name); if (result == null) { return operator === "!="; }
                            if (!operator) { return true; }
                            result += ""; return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
                        };
                    }, "CHILD": function (type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type"; return first === 1 && last === 0 ? function (elem) { return !!elem.parentNode; } : function (elem, context, xml) {
                            var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false; if (parent) {
                                if (simple) {
                                    while (dir) {
                                        node = elem; while ((node = node[dir])) { if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) { return false; } }
                                        start = dir = type === "only" && !start && "nextSibling";
                                    }
                                    return true;
                                }
                                start = [forward ? parent.firstChild : parent.lastChild]; if (forward && useCache) { node = parent; outerCache = node[expando] || (node[expando] = {}); uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}); cache = uniqueCache[type] || []; nodeIndex = cache[0] === dirruns && cache[1]; diff = nodeIndex && cache[2]; node = nodeIndex && parent.childNodes[nodeIndex]; while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) { if (node.nodeType === 1 && ++diff && node === elem) { uniqueCache[type] = [dirruns, nodeIndex, diff]; break; } } } else {
                                    if (useCache) { node = elem; outerCache = node[expando] || (node[expando] = {}); uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}); cache = uniqueCache[type] || []; nodeIndex = cache[0] === dirruns && cache[1]; diff = nodeIndex; }
                                    if (diff === false) {
                                        while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
                                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                                if (useCache) { outerCache = node[expando] || (node[expando] = {}); uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {}); uniqueCache[type] = [dirruns, diff]; }
                                                if (node === elem) { break; }
                                            }
                                        }
                                    }
                                }
                                diff -= last; return diff === first || (diff % first === 0 && diff / first >= 0);
                            }
                        };
                    }, "PSEUDO": function (pseudo, argument) {
                        var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); if (fn[expando]) { return fn(argument); }
                        if (fn.length > 1) { args = [pseudo, pseudo, "", argument]; return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) { var idx, matched = fn(seed, argument), i = matched.length; while (i--) { idx = indexOf(seed, matched[i]); seed[idx] = !(matches[idx] = matched[i]); } }) : function (elem) { return fn(elem, 0, args); }; }
                        return fn;
                    }
                }, pseudos: {
                    "not": markFunction(function (selector) { var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1")); return matcher[expando] ? markFunction(function (seed, matches, context, xml) { var elem, unmatched = matcher(seed, null, xml, []), i = seed.length; while (i--) { if ((elem = unmatched[i])) { seed[i] = !(matches[i] = elem); } } }) : function (elem, context, xml) { input[0] = elem; matcher(input, null, xml, results); input[0] = null; return !results.pop(); }; }), "has": markFunction(function (selector) { return function (elem) { return Sizzle(selector, elem).length > 0; }; }), "contains": markFunction(function (text) { text = text.replace(runescape, funescape); return function (elem) { return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1; }; }), "lang": markFunction(function (lang) {
                        if (!ridentifier.test(lang || "")) { Sizzle.error("unsupported lang: " + lang); }
                        lang = lang.replace(runescape, funescape).toLowerCase(); return function (elem) { var elemLang; do { if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) { elemLang = elemLang.toLowerCase(); return elemLang === lang || elemLang.indexOf(lang + "-") === 0; } } while ((elem = elem.parentNode) && elem.nodeType === 1); return false; };
                    }), "target": function (elem) { var hash = window.location && window.location.hash; return hash && hash.slice(1) === elem.id; }, "root": function (elem) { return elem === docElem; }, "focus": function (elem) { return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex); }, "enabled": function (elem) { return elem.disabled === false; }, "disabled": function (elem) { return elem.disabled === true; }, "checked": function (elem) { var nodeName = elem.nodeName.toLowerCase(); return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected); }, "selected": function (elem) {
                        if (elem.parentNode) { elem.parentNode.selectedIndex; }
                        return elem.selected === true;
                    }, "empty": function (elem) {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) { if (elem.nodeType < 6) { return false; } }
                        return true;
                    }, "parent": function (elem) { return !Expr.pseudos["empty"](elem); }, "header": function (elem) { return rheader.test(elem.nodeName); }, "input": function (elem) { return rinputs.test(elem.nodeName); }, "button": function (elem) { var name = elem.nodeName.toLowerCase(); return name === "input" && elem.type === "button" || name === "button"; }, "text": function (elem) { var attr; return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text"); }, "first": createPositionalPseudo(function () { return [0]; }), "last": createPositionalPseudo(function (matchIndexes, length) { return [length - 1]; }), "eq": createPositionalPseudo(function (matchIndexes, length, argument) { return [argument < 0 ? argument + length : argument]; }), "even": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 0; for (; i < length; i += 2) { matchIndexes.push(i); }
                        return matchIndexes;
                    }), "odd": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 1; for (; i < length; i += 2) { matchIndexes.push(i); }
                        return matchIndexes;
                    }), "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument; for (; --i >= 0;) { matchIndexes.push(i); }
                        return matchIndexes;
                    }), "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument; for (; ++i < length;) { matchIndexes.push(i); }
                        return matchIndexes;
                    })
                }
            }; Expr.pseudos["nth"] = Expr.pseudos["eq"]; for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) { Expr.pseudos[i] = createInputPseudo(i); }
            for (i in { submit: true, reset: true }) { Expr.pseudos[i] = createButtonPseudo(i); }
            function setFilters() { }
            setFilters.prototype = Expr.filters = Expr.pseudos; Expr.setFilters = new setFilters(); tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "]; if (cached) { return parseOnly ? 0 : cached.slice(0); }
                soFar = selector; groups = []; preFilters = Expr.preFilter; while (soFar) {
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) { soFar = soFar.slice(match[0].length) || soFar; }
                        groups.push((tokens = []));
                    }
                    matched = false; if ((match = rcombinators.exec(soFar))) { matched = match.shift(); tokens.push({ value: matched, type: match[0].replace(rtrim, " ") }); soFar = soFar.slice(matched.length); }
                    for (type in Expr.filter) { if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) { matched = match.shift(); tokens.push({ value: matched, type: type, matches: match }); soFar = soFar.slice(matched.length); } }
                    if (!matched) { break; }
                }
                return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
            }; function toSelector(tokens) {
                var i = 0, len = tokens.length, selector = ""; for (; i < len; i++) { selector += tokens[i].value; }
                return selector;
            }
            function addCombinator(matcher, combinator, base) { var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++; return combinator.first ? function (elem, context, xml) { while ((elem = elem[dir])) { if (elem.nodeType === 1 || checkNonElements) { return matcher(elem, context, xml); } } } : function (elem, context, xml) { var oldCache, uniqueCache, outerCache, newCache = [dirruns, doneName]; if (xml) { while ((elem = elem[dir])) { if (elem.nodeType === 1 || checkNonElements) { if (matcher(elem, context, xml)) { return true; } } } } else { while ((elem = elem[dir])) { if (elem.nodeType === 1 || checkNonElements) { outerCache = elem[expando] || (elem[expando] = {}); uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {}); if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) { return (newCache[2] = oldCache[2]); } else { uniqueCache[dir] = newCache; if ((newCache[2] = matcher(elem, context, xml))) { return true; } } } } } }; }
            function elementMatcher(matchers) {
                return matchers.length > 1 ? function (elem, context, xml) {
                    var i = matchers.length; while (i--) { if (!matchers[i](elem, context, xml)) { return false; } }
                    return true;
                } : matchers[0];
            }
            function multipleContexts(selector, contexts, results) {
                var i = 0, len = contexts.length; for (; i < len; i++) { Sizzle(selector, contexts[i], results); }
                return results;
            }
            function condense(unmatched, map, filter, context, xml) {
                var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null; for (; i < len; i++) { if ((elem = unmatched[i])) { if (!filter || filter(elem, context, xml)) { newUnmatched.push(elem); if (mapped) { map.push(i); } } } }
                return newUnmatched;
            }
            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) { postFilter = setMatcher(postFilter); }
                if (postFinder && !postFinder[expando]) { postFinder = setMatcher(postFinder, postSelector); }
                return markFunction(function (seed, results, context, xml) {
                    var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn; if (matcher) { matcher(matcherIn, matcherOut, context, xml); }
                    if (postFilter) { temp = condense(matcherOut, postMap); postFilter(temp, [], context, xml); i = temp.length; while (i--) { if ((elem = temp[i])) { matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem); } } }
                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                temp = []; i = matcherOut.length; while (i--) { if ((elem = matcherOut[i])) { temp.push((matcherIn[i] = elem)); } }
                                postFinder(null, (matcherOut = []), temp, xml);
                            }
                            i = matcherOut.length; while (i--) { if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) { seed[temp] = !(results[temp] = elem); } }
                        }
                    } else { matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut); if (postFinder) { postFinder(null, results, matcherOut, xml); } else { push.apply(results, matcherOut); } }
                });
            }
            function matcherFromTokens(tokens) {
                var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) { return elem === checkContext; }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) { return indexOf(checkContext, elem) > -1; }, implicitRelative, true), matchers = [function (elem, context, xml) { var ret = (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); checkContext = null; return ret; }]; for (; i < len; i++) {
                    if ((matcher = Expr.relative[tokens[i].type])) { matchers = [addCombinator(elementMatcher(matchers), matcher)]; } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); if (matcher[expando]) {
                            j = ++i; for (; j < len; j++) { if (Expr.relative[tokens[j].type]) { break; } }
                            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
                        }
                        matchers.push(matcher);
                    }
                }
                return elementMatcher(matchers);
            }
            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher, matchedCount = 0, i = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find["TAG"]("*", outermost), dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1), len = elems.length; if (outermost) { outermostContext = context === document || context || outermost; }
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0; if (!context && elem.ownerDocument !== document) { setDocument(elem); xml = !documentIsHTML; }
                            while ((matcher = elementMatchers[j++])) { if (matcher(elem, context || document, xml)) { results.push(elem); break; } }
                            if (outermost) { dirruns = dirrunsUnique; }
                        }
                        if (bySet) {
                            if ((elem = !matcher && elem)) { matchedCount--; }
                            if (seed) { unmatched.push(elem); }
                        }
                    }
                    matchedCount += i; if (bySet && i !== matchedCount) {
                        j = 0; while ((matcher = setMatchers[j++])) { matcher(unmatched, setMatched, context, xml); }
                        if (seed) {
                            if (matchedCount > 0) { while (i--) { if (!(unmatched[i] || setMatched[i])) { setMatched[i] = pop.call(results); } } }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched); if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) { Sizzle.uniqueSort(results); }
                    }
                    if (outermost) { dirruns = dirrunsUnique; outermostContext = contextBackup; }
                    return unmatched;
                }; return bySet ? markFunction(superMatcher) : superMatcher;
            }
            compile = Sizzle.compile = function (selector, match) {
                var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "]; if (!cached) {
                    if (!match) { match = tokenize(selector); }
                    i = match.length; while (i--) { cached = matcherFromTokens(match[i]); if (cached[expando]) { setMatchers.push(cached); } else { elementMatchers.push(cached); } }
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); cached.selector = selector;
                }
                return cached;
            }; select = Sizzle.select = function (selector, context, results, seed) {
                var i, tokens, token, type, find, compiled = typeof selector === "function" && selector, match = !seed && tokenize((selector = compiled.selector || selector)); results = results || []; if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0); if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0]; if (!context) { return results; } else if (compiled) { context = context.parentNode; }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length; while (i--) {
                        token = tokens[i]; if (Expr.relative[(type = token.type)]) { break; }
                        if ((find = Expr.find[type])) {
                            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
                                tokens.splice(i, 1); selector = seed.length && toSelector(tokens); if (!selector) { push.apply(results, seed); return results; }
                                break;
                            }
                        }
                    }
                }
                (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context); return results;
            }; support.sortStable = expando.split("").sort(sortOrder).join("") === expando; support.detectDuplicates = !!hasDuplicate; setDocument(); support.sortDetached = assert(function (div1) { return div1.compareDocumentPosition(document.createElement("div")) & 1; }); if (!assert(function (div) { div.innerHTML = "<a href='#'></a>"; return div.firstChild.getAttribute("href") === "#"; })) { addHandle("type|href|height|width", function (elem, name, isXML) { if (!isXML) { return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2); } }); }
            if (!support.attributes || !assert(function (div) { div.innerHTML = "<input/>"; div.firstChild.setAttribute("value", ""); return div.firstChild.getAttribute("value") === ""; })) { addHandle("value", function (elem, name, isXML) { if (!isXML && elem.nodeName.toLowerCase() === "input") { return elem.defaultValue; } }); }
            if (!assert(function (div) { return div.getAttribute("disabled") == null; })) { addHandle(booleans, function (elem, name, isXML) { var val; if (!isXML) { return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null; } }); }
            return Sizzle;
        })(window); jQuery.find = Sizzle; jQuery.expr = Sizzle.selectors; jQuery.expr[":"] = jQuery.expr.pseudos; jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort; jQuery.text = Sizzle.getText; jQuery.isXMLDoc = Sizzle.isXML; jQuery.contains = Sizzle.contains; var dir = function (elem, dir, until) {
            var matched = [], truncate = until !== undefined; while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                    if (truncate && jQuery(elem).is(until)) { break; }
                    matched.push(elem);
                }
            }
            return matched;
        }; var siblings = function (n, elem) {
            var matched = []; for (; n; n = n.nextSibling) { if (n.nodeType === 1 && n !== elem) { matched.push(n); } }
            return matched;
        }; var rneedsContext = jQuery.expr.match.needsContext; var rsingleTag = (/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/); var risSimple = /^.[^:#\[\.,]*$/; function winnow(elements, qualifier, not) {
            if (jQuery.isFunction(qualifier)) { return jQuery.grep(elements, function (elem, i) { return !!qualifier.call(elem, i, elem) !== not; }); }
            if (qualifier.nodeType) { return jQuery.grep(elements, function (elem) { return (elem === qualifier) !== not; }); }
            if (typeof qualifier === "string") {
                if (risSimple.test(qualifier)) { return jQuery.filter(qualifier, elements, not); }
                qualifier = jQuery.filter(qualifier, elements);
            }
            return jQuery.grep(elements, function (elem) { return (jQuery.inArray(elem, qualifier) > -1) !== not; });
        }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0]; if (not) { expr = ":not(" + expr + ")"; }
        return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) { return elem.nodeType === 1; }));
    }; jQuery.fn.extend({
        find: function (selector) {
            var i, ret = [], self = this, len = self.length; if (typeof selector !== "string") { return this.pushStack(jQuery(selector).filter(function () { for (i = 0; i < len; i++) { if (jQuery.contains(self[i], this)) { return true; } } })); }
            for (i = 0; i < len; i++) { jQuery.find(selector, self[i], ret); }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret); ret.selector = this.selector ? this.selector + " " + selector : selector; return ret;
        }, filter: function (selector) { return this.pushStack(winnow(this, selector || [], false)); }, not: function (selector) { return this.pushStack(winnow(this, selector || [], true)); }, is: function (selector) { return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length; }
    }); var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context, root) {
        var match, elem; if (!selector) { return this; }
        root = root || rootjQuery; if (typeof selector === "string") {
            if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) { match = [null, selector, null]; } else { match = rquickExpr.exec(selector); }
            if (match && (match[1] || !context)) {
                if (match[1]) {
                    context = context instanceof jQuery ? context[0] : context; jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) { for (match in context) { if (jQuery.isFunction(this[match])) { this[match](context[match]); } else { this.attr(match, context[match]); } } }
                    return this;
                } else {
                    elem = document.getElementById(match[2]); if (elem && elem.parentNode) {
                        if (elem.id !== match[2]) { return rootjQuery.find(selector); }
                        this.length = 1; this[0] = elem;
                    }
                    this.context = document; this.selector = selector; return this;
                }
            } else if (!context || context.jquery) { return (context || root).find(selector); } else { return this.constructor(context).find(selector); }
        } else if (selector.nodeType) { this.context = this[0] = selector; this.length = 1; return this; } else if (jQuery.isFunction(selector)) { return typeof root.ready !== "undefined" ? root.ready(selector) : selector(jQuery); }
        if (selector.selector !== undefined) { this.selector = selector.selector; this.context = selector.context; }
        return jQuery.makeArray(selector, this);
    }; init.prototype = jQuery.fn; rootjQuery = jQuery(document); var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = { children: true, contents: true, next: true, prev: true }; jQuery.fn.extend({
        has: function (target) { var i, targets = jQuery(target, this), len = targets.length; return this.filter(function () { for (i = 0; i < len; i++) { if (jQuery.contains(this, targets[i])) { return true; } } }); }, closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0; for (; i < l; i++) { for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) { if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) { matched.push(cur); break; } } }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        }, index: function (elem) {
            if (!elem) { return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1; }
            if (typeof elem === "string") { return jQuery.inArray(this[0], jQuery(elem)); }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        }, add: function (selector, context) { return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context)))); }, addBack: function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)); }
    }); function sibling(cur, dir) { do { cur = cur[dir]; } while (cur && cur.nodeType !== 1); return cur; }
    jQuery.each({ parent: function (elem) { var parent = elem.parentNode; return parent && parent.nodeType !== 11 ? parent : null; }, parents: function (elem) { return dir(elem, "parentNode"); }, parentsUntil: function (elem, i, until) { return dir(elem, "parentNode", until); }, next: function (elem) { return sibling(elem, "nextSibling"); }, prev: function (elem) { return sibling(elem, "previousSibling"); }, nextAll: function (elem) { return dir(elem, "nextSibling"); }, prevAll: function (elem) { return dir(elem, "previousSibling"); }, nextUntil: function (elem, i, until) { return dir(elem, "nextSibling", until); }, prevUntil: function (elem, i, until) { return dir(elem, "previousSibling", until); }, siblings: function (elem) { return siblings((elem.parentNode || {}).firstChild, elem); }, children: function (elem) { return siblings(elem.firstChild); }, contents: function (elem) { return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes); } }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var ret = jQuery.map(this, fn, until); if (name.slice(-5) !== "Until") { selector = until; }
            if (selector && typeof selector === "string") { ret = jQuery.filter(selector, ret); }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) { ret = jQuery.uniqueSort(ret); }
                if (rparentsprev.test(name)) { ret = ret.reverse(); }
            }
            return this.pushStack(ret);
        };
    }); var rnotwhite = (/\S+/g); function createOptions(options) { var object = {}; jQuery.each(options.match(rnotwhite) || [], function (_, flag) { object[flag] = true; }); return object; }
    jQuery.Callbacks = function (options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options); var
            firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function () {
                locked = options.once; fired = firing = true; for (; queue.length; firingIndex = -1) { memory = queue.shift(); while (++firingIndex < list.length) { if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) { firingIndex = list.length; memory = false; } } }
                if (!options.memory) { memory = false; }
                firing = false; if (locked) { if (memory) { list = []; } else { list = ""; } }
            }, self = {
                add: function () {
                    if (list) {
                        if (memory && !firing) { firingIndex = list.length - 1; queue.push(memory); }
                        (function add(args) { jQuery.each(args, function (_, arg) { if (jQuery.isFunction(arg)) { if (!options.unique || !self.has(arg)) { list.push(arg); } } else if (arg && arg.length && jQuery.type(arg) !== "string") { add(arg); } }); })(arguments); if (memory && !firing) { fire(); }
                    }
                    return this;
                }, remove: function () { jQuery.each(arguments, function (_, arg) { var index; while ((index = jQuery.inArray(arg, list, index)) > -1) { list.splice(index, 1); if (index <= firingIndex) { firingIndex--; } } }); return this; }, has: function (fn) { return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0; }, empty: function () {
                    if (list) { list = []; }
                    return this;
                }, disable: function () { locked = queue = []; list = memory = ""; return this; }, disabled: function () { return !list; }, lock: function () {
                    locked = true; if (!memory) { self.disable(); }
                    return this;
                }, locked: function () { return !!locked; }, fireWith: function (context, args) {
                    if (!locked) { args = args || []; args = [context, args.slice ? args.slice() : args]; queue.push(args); if (!firing) { fire(); } }
                    return this;
                }, fire: function () { self.fireWith(this, arguments); return this; }, fired: function () { return !!fired; }
            }; return self;
    }; jQuery.extend({
        Deferred: function (func) {
            var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]], state = "pending", promise = { state: function () { return state; }, always: function () { deferred.done(arguments).fail(arguments); return this; }, then: function () { var fns = arguments; return jQuery.Deferred(function (newDefer) { jQuery.each(tuples, function (i, tuple) { var fn = jQuery.isFunction(fns[i]) && fns[i]; deferred[tuple[1]](function () { var returned = fn && fn.apply(this, arguments); if (returned && jQuery.isFunction(returned.promise)) { returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject); } else { newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments); } }); }); fns = null; }).promise(); }, promise: function (obj) { return obj != null ? jQuery.extend(obj, promise) : promise; } }, deferred = {}; promise.pipe = promise.then; jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3]; promise[tuple[1]] = list.add; if (stateString) { list.add(function () { state = stateString; }, tuples[i ^ 1][2].disable, tuples[2][2].lock); }
                deferred[tuple[0]] = function () { deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments); return this; }; deferred[tuple[0] + "With"] = list.fireWith;
            }); promise.promise(deferred); if (func) { func.call(deferred, deferred); }
            return deferred;
        }, when: function (subordinate) {
            var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) { return function (value) { contexts[i] = this; values[i] = arguments.length > 1 ? slice.call(arguments) : value; if (values === progressValues) { deferred.notifyWith(contexts, values); } else if (!(--remaining)) { deferred.resolveWith(contexts, values); } }; }, progressValues, progressContexts, resolveContexts; if (length > 1) { progressValues = new Array(length); progressContexts = new Array(length); resolveContexts = new Array(length); for (; i < length; i++) { if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) { resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject); } else { --remaining; } } }
            if (!remaining) { deferred.resolveWith(resolveContexts, resolveValues); }
            return deferred.promise();
        }
    }); var readyList; jQuery.fn.ready = function (fn) { jQuery.ready.promise().done(fn); return this; }; jQuery.extend({
        isReady: false, readyWait: 1, holdReady: function (hold) { if (hold) { jQuery.readyWait++; } else { jQuery.ready(true); } }, ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) { return; }
            jQuery.isReady = true; if (wait !== true && --jQuery.readyWait > 0) { return; }
            readyList.resolveWith(document, [jQuery]); if (jQuery.fn.triggerHandler) { jQuery(document).triggerHandler("ready"); jQuery(document).off("ready"); }
        }
    }); function detach() { if (document.addEventListener) { document.removeEventListener("DOMContentLoaded", completed); window.removeEventListener("load", completed); } else { document.detachEvent("onreadystatechange", completed); window.detachEvent("onload", completed); } }
    function completed() { if (document.addEventListener || window.event.type === "load" || document.readyState === "complete") { detach(); jQuery.ready(); } }
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred(); if (document.readyState === "complete" || (document.readyState !== "loading" && !document.documentElement.doScroll)) { window.setTimeout(jQuery.ready); } else if (document.addEventListener) { document.addEventListener("DOMContentLoaded", completed); window.addEventListener("load", completed); } else {
                document.attachEvent("onreadystatechange", completed); window.attachEvent("onload", completed); var top = false; try { top = window.frameElement == null && document.documentElement; } catch (e) { }
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try { top.doScroll("left"); } catch (e) { return window.setTimeout(doScrollCheck, 50); }
                            detach(); jQuery.ready();
                        }
                    })();
                }
            }
        }
        return readyList.promise(obj);
    }; jQuery.ready.promise(); var i; for (i in jQuery(support)) { break; }
    support.ownFirst = i === "0"; support.inlineBlockNeedsLayout = false; jQuery(function () {
        var val, div, body, container; body = document.getElementsByTagName("body")[0]; if (!body || !body.style) { return; }
        div = document.createElement("div"); container = document.createElement("div"); container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"; body.appendChild(container).appendChild(div); if (typeof div.style.zoom !== "undefined") { div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"; support.inlineBlockNeedsLayout = val = div.offsetWidth === 3; if (val) { body.style.zoom = 1; } }
        body.removeChild(container);
    }); (function () {
        var div = document.createElement("div"); support.deleteExpando = true; try { delete div.test; } catch (e) { support.deleteExpando = false; }
        div = null;
    })(); var acceptData = function (elem) { var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()], nodeType = +elem.nodeType || 1; return nodeType !== 1 && nodeType !== 9 ? false : !noData || noData !== true && elem.getAttribute("classid") === noData; }; var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g; function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase(); data = elem.getAttribute(name); if (typeof data === "string") {
                try { data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data; } catch (e) { }
                jQuery.data(elem, key, data);
            } else { data = undefined; }
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name; for (name in obj) {
            if (name === "data" && jQuery.isEmptyObject(obj[name])) { continue; }
            if (name !== "toJSON") { return false; }
        }
        return true;
    }
    function internalData(elem, name, data, pvt) {
        if (!acceptData(elem)) { return; }
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey; if ((!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string") { return; }
        if (!id) { if (isNode) { id = elem[internalKey] = deletedIds.pop() || jQuery.guid++; } else { id = internalKey; } }
        if (!cache[id]) { cache[id] = isNode ? {} : { toJSON: jQuery.noop }; }
        if (typeof name === "object" || typeof name === "function") { if (pvt) { cache[id] = jQuery.extend(cache[id], name); } else { cache[id].data = jQuery.extend(cache[id].data, name); } }
        thisCache = cache[id]; if (!pvt) {
            if (!thisCache.data) { thisCache.data = {}; }
            thisCache = thisCache.data;
        }
        if (data !== undefined) { thisCache[jQuery.camelCase(name)] = data; }
        if (typeof name === "string") { ret = thisCache[name]; if (ret == null) { ret = thisCache[jQuery.camelCase(name)]; } } else { ret = thisCache; }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!acceptData(elem)) { return; }
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando; if (!cache[id]) { return; }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data; if (thisCache) {
                if (!jQuery.isArray(name)) { if (name in thisCache) { name = [name]; } else { name = jQuery.camelCase(name); if (name in thisCache) { name = [name]; } else { name = name.split(" "); } } } else { name = name.concat(jQuery.map(name, jQuery.camelCase)); }
                i = name.length; while (i--) { delete thisCache[name[i]]; }
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) { return; }
            }
        }
        if (!pvt) { delete cache[id].data; if (!isEmptyDataObject(cache[id])) { return; } }
        if (isNode) { jQuery.cleanData([elem], true); } else if (support.deleteExpando || cache != cache.window) { delete cache[id]; } else { cache[id] = undefined; }
    }
    jQuery.extend({ cache: {}, noData: { "applet ": true, "embed ": true, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function (elem) { elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando]; return !!elem && !isEmptyDataObject(elem); }, data: function (elem, name, data) { return internalData(elem, name, data); }, removeData: function (elem, name) { return internalRemoveData(elem, name); }, _data: function (elem, name, data) { return internalData(elem, name, data, true); }, _removeData: function (elem, name) { return internalRemoveData(elem, name, true); } }); jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes; if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem); if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        i = attrs.length; while (i--) { if (attrs[i]) { name = attrs[i].name; if (name.indexOf("data-") === 0) { name = jQuery.camelCase(name.slice(5)); dataAttr(elem, name, data[name]); } } }
                        jQuery._data(elem, "parsedAttrs", true);
                    }
                }
                return data;
            }
            if (typeof key === "object") { return this.each(function () { jQuery.data(this, key); }); }
            return arguments.length > 1 ? this.each(function () { jQuery.data(this, key, value); }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
        }, removeData: function (key) { return this.each(function () { jQuery.removeData(this, key); }); }
    }); jQuery.extend({
        queue: function (elem, type, data) {
            var queue; if (elem) {
                type = (type || "fx") + "queue"; queue = jQuery._data(elem, type); if (data) { if (!queue || jQuery.isArray(data)) { queue = jQuery._data(elem, type, jQuery.makeArray(data)); } else { queue.push(data); } }
                return queue || [];
            }
        }, dequeue: function (elem, type) {
            type = type || "fx"; var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () { jQuery.dequeue(elem, type); }; if (fn === "inprogress") { fn = queue.shift(); startLength--; }
            if (fn) {
                if (type === "fx") { queue.unshift("inprogress"); }
                delete hooks.stop; fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) { hooks.empty.fire(); }
        }, _queueHooks: function (elem, type) { var key = type + "queueHooks"; return jQuery._data(elem, key) || jQuery._data(elem, key, { empty: jQuery.Callbacks("once memory").add(function () { jQuery._removeData(elem, type + "queue"); jQuery._removeData(elem, key); }) }); }
    }); jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2; if (typeof type !== "string") { data = type; type = "fx"; setter--; }
            if (arguments.length < setter) { return jQuery.queue(this[0], type); }
            return data === undefined ? this : this.each(function () { var queue = jQuery.queue(this, type, data); jQuery._queueHooks(this, type); if (type === "fx" && queue[0] !== "inprogress") { jQuery.dequeue(this, type); } });
        }, dequeue: function (type) { return this.each(function () { jQuery.dequeue(this, type); }); }, clearQueue: function (type) { return this.queue(type || "fx", []); }, promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () { if (!(--count)) { defer.resolveWith(elements, [elements]); } }; if (typeof type !== "string") { obj = type; type = undefined; }
            type = type || "fx"; while (i--) { tmp = jQuery._data(elements[i], type + "queueHooks"); if (tmp && tmp.empty) { count++; tmp.empty.add(resolve); } }
            resolve(); return defer.promise(obj);
        }
    }); (function () {
        var shrinkWrapBlocksVal; support.shrinkWrapBlocks = function () {
            if (shrinkWrapBlocksVal != null) { return shrinkWrapBlocksVal; }
            shrinkWrapBlocksVal = false; var div, body, container; body = document.getElementsByTagName("body")[0]; if (!body || !body.style) { return; }
            div = document.createElement("div"); container = document.createElement("div"); container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"; body.appendChild(container).appendChild(div); if (typeof div.style.zoom !== "undefined") { div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1"; div.appendChild(document.createElement("div")).style.width = "5px"; shrinkWrapBlocksVal = div.offsetWidth !== 3; }
            body.removeChild(container); return shrinkWrapBlocksVal;
        };
    })(); var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source; var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"); var cssExpand = ["Top", "Right", "Bottom", "Left"]; var isHidden = function (elem, el) { elem = el || elem; return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem); }; function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale = 1, maxIterations = 20, currentValue = tween ? function () { return tween.cur(); } : function () { return jQuery.css(elem, prop, ""); }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop)); if (initialInUnit && initialInUnit[3] !== unit) { unit = unit || initialInUnit[3]; valueParts = valueParts || []; initialInUnit = +initial || 1; do { scale = scale || ".5"; initialInUnit = initialInUnit / scale; jQuery.style(elem, prop, initialInUnit + unit); } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations); }
        if (valueParts) { initialInUnit = +initialInUnit || +initial || 0; adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2]; if (tween) { tween.unit = unit; tween.start = initialInUnit; tween.end = adjusted; } }
        return adjusted;
    }
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, length = elems.length, bulk = key == null; if (jQuery.type(key) === "object") { chainable = true; for (i in key) { access(elems, fn, i, key[i], true, emptyGet, raw); } } else if (value !== undefined) {
            chainable = true; if (!jQuery.isFunction(value)) { raw = true; }
            if (bulk) { if (raw) { fn.call(elems, value); fn = null; } else { bulk = fn; fn = function (elem, key, value) { return bulk.call(jQuery(elem), value); }; } }
            if (fn) { for (; i < length; i++) { fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key))); } }
        }
        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
    }; var rcheckableType = (/^(?:checkbox|radio)$/i); var rtagName = (/<([\w:-]+)/); var rscriptType = (/^$|\/(?:java|ecma)script/i); var rleadingWhitespace = (/^\s+/); var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" + "details|dialog|figcaption|figure|footer|header|hgroup|main|" + "mark|meter|nav|output|picture|progress|section|summary|template|time|video"; function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment(); if (safeFrag.createElement) { while (list.length) { safeFrag.createElement(list.pop()); } }
        return safeFrag;
    }
    (function () { var div = document.createElement("div"), fragment = document.createDocumentFragment(), input = document.createElement("input"); div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; support.leadingWhitespace = div.firstChild.nodeType === 3; support.tbody = !div.getElementsByTagName("tbody").length; support.htmlSerialize = !!div.getElementsByTagName("link").length; support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>"; input.type = "checkbox"; input.checked = true; fragment.appendChild(input); support.appendChecked = input.checked; div.innerHTML = "<textarea>x</textarea>"; support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; fragment.appendChild(div); input = document.createElement("input"); input.setAttribute("type", "radio"); input.setAttribute("checked", "checked"); input.setAttribute("name", "t"); div.appendChild(input); support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; support.noCloneEvent = !!div.addEventListener; div[jQuery.expando] = 1; support.attributes = !div.getAttribute(jQuery.expando); })(); var wrapMap = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] }; wrapMap.optgroup = wrapMap.option; wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead; wrapMap.th = wrapMap.td; function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : undefined; if (!found) { for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) { if (!tag || jQuery.nodeName(elem, tag)) { found.push(elem); } else { jQuery.merge(found, getAll(elem, tag)); } } }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
    }
    function setGlobalEval(elems, refElements) { var elem, i = 0; for (; (elem = elems[i]) != null; i++) { jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval")); } }
    var rhtml = /<|&#?\w+;/, rtbody = /<tbody/i; function fixDefaultChecked(elem) { if (rcheckableType.test(elem.type)) { elem.defaultChecked = elem.checked; } }
    function buildFragment(elems, context, scripts, selection, ignored) {
        var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0; for (; i < l; i++) {
            elem = elems[i]; if (elem || elem === 0) {
                if (jQuery.type(elem) === "object") { jQuery.merge(nodes, elem.nodeType ? [elem] : elem); } else if (!rhtml.test(elem)) { nodes.push(context.createTextNode(elem)); } else {
                    tmp = tmp || safe.appendChild(context.createElement("div")); tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(); wrap = wrapMap[tag] || wrapMap._default; tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; j = wrap[0]; while (j--) { tmp = tmp.lastChild; }
                    if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) { nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0])); }
                    if (!support.tbody) { elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0; j = elem && elem.childNodes.length; while (j--) { if (jQuery.nodeName((tbody = elem.childNodes[j]), "tbody") && !tbody.childNodes.length) { elem.removeChild(tbody); } } }
                    jQuery.merge(nodes, tmp.childNodes); tmp.textContent = ""; while (tmp.firstChild) { tmp.removeChild(tmp.firstChild); }
                    tmp = safe.lastChild;
                }
            }
        }
        if (tmp) { safe.removeChild(tmp); }
        if (!support.appendChecked) { jQuery.grep(getAll(nodes, "input"), fixDefaultChecked); }
        i = 0; while ((elem = nodes[i++])) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) { ignored.push(elem); }
                continue;
            }
            contains = jQuery.contains(elem.ownerDocument, elem); tmp = getAll(safe.appendChild(elem), "script"); if (contains) { setGlobalEval(tmp); }
            if (scripts) { j = 0; while ((elem = tmp[j++])) { if (rscriptType.test(elem.type || "")) { scripts.push(elem); } } }
        }
        tmp = null; return safe;
    }
    (function () {
        var i, eventName, div = document.createElement("div"); for (i in { submit: true, change: true, focusin: true }) { eventName = "on" + i; if (!(support[i] = eventName in window)) { div.setAttribute(eventName, "t"); support[i] = div.attributes[eventName].expando === false; } }
        div = null;
    })(); var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/; function returnTrue() { return true; }
    function returnFalse() { return false; }
    function safeActiveElement() { try { return document.activeElement; } catch (err) { } }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type; if (typeof types === "object") {
            if (typeof selector !== "string") { data = data || selector; selector = undefined; }
            for (type in types) { on(elem, type, selector, data, types[type], one); }
            return elem;
        }
        if (data == null && fn == null) { fn = selector; data = selector = undefined; } else if (fn == null) { if (typeof selector === "string") { fn = data; data = undefined; } else { fn = data; data = selector; selector = undefined; } }
        if (fn === false) { fn = returnFalse; } else if (!fn) { return elem; }
        if (one === 1) { origFn = fn; fn = function (event) { jQuery().off(event); return origFn.apply(this, arguments); }; fn.guid = origFn.guid || (origFn.guid = jQuery.guid++); }
        return elem.each(function () { jQuery.event.add(this, types, fn, data, selector); });
    }
    jQuery.event = {
        global: {}, add: function (elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem); if (!elemData) { return; }
            if (handler.handler) { handleObjIn = handler; handler = handleObjIn.handler; selector = handleObjIn.selector; }
            if (!handler.guid) { handler.guid = jQuery.guid++; }
            if (!(events = elemData.events)) { events = elemData.events = {}; }
            if (!(eventHandle = elemData.handle)) { eventHandle = elemData.handle = function (e) { return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined; }; eventHandle.elem = elem; }
            types = (types || "").match(rnotwhite) || [""]; t = types.length; while (t--) {
                tmp = rtypenamespace.exec(types[t]) || []; type = origType = tmp[1]; namespaces = (tmp[2] || "").split(".").sort(); if (!type) { continue; }
                special = jQuery.event.special[type] || {}; type = (selector ? special.delegateType : special.bindType) || type; special = jQuery.event.special[type] || {}; handleObj = jQuery.extend({ type: type, origType: origType, data: data, handler: handler, guid: handler.guid, selector: selector, needsContext: selector && jQuery.expr.match.needsContext.test(selector), namespace: namespaces.join(".") }, handleObjIn); if (!(handlers = events[type])) { handlers = events[type] = []; handlers.delegateCount = 0; if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) { if (elem.addEventListener) { elem.addEventListener(type, eventHandle, false); } else if (elem.attachEvent) { elem.attachEvent("on" + type, eventHandle); } } }
                if (special.add) { special.add.call(elem, handleObj); if (!handleObj.handler.guid) { handleObj.handler.guid = handler.guid; } }
                if (selector) { handlers.splice(handlers.delegateCount++, 0, handleObj); } else { handlers.push(handleObj); }
                jQuery.event.global[type] = true;
            }
            elem = null;
        }, remove: function (elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem); if (!elemData || !(events = elemData.events)) { return; }
            types = (types || "").match(rnotwhite) || [""]; t = types.length; while (t--) {
                tmp = rtypenamespace.exec(types[t]) || []; type = origType = tmp[1]; namespaces = (tmp[2] || "").split(".").sort(); if (!type) {
                    for (type in events) { jQuery.event.remove(elem, type + types[t], handler, selector, true); }
                    continue;
                }
                special = jQuery.event.special[type] || {}; type = (selector ? special.delegateType : special.bindType) || type; handlers = events[type] || []; tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); origCount = j = handlers.length; while (j--) {
                    handleObj = handlers[j]; if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1); if (handleObj.selector) { handlers.delegateCount--; }
                        if (special.remove) { special.remove.call(elem, handleObj); }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) { jQuery.removeEvent(elem, type, elemData.handle); }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) { delete elemData.handle; jQuery._removeData(elem, "events"); }
        }, trigger: function (event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [elem || document], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : []; cur = tmp = elem = elem || document; if (elem.nodeType === 3 || elem.nodeType === 8) { return; }
            if (rfocusMorph.test(type + jQuery.event.triggered)) { return; }
            if (type.indexOf(".") > -1) { namespaces = type.split("."); type = namespaces.shift(); namespaces.sort(); }
            ontype = type.indexOf(":") < 0 && "on" + type; event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event); event.isTrigger = onlyHandlers ? 2 : 3; event.namespace = namespaces.join("."); event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; event.result = undefined; if (!event.target) { event.target = elem; }
            data = data == null ? [event] : jQuery.makeArray(data, [event]); special = jQuery.event.special[type] || {}; if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) { return; }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type; if (!rfocusMorph.test(bubbleType + type)) { cur = cur.parentNode; }
                for (; cur; cur = cur.parentNode) { eventPath.push(cur); tmp = cur; }
                if (tmp === (elem.ownerDocument || document)) { eventPath.push(tmp.defaultView || tmp.parentWindow || window); }
            }
            i = 0; while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type; handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle"); if (handle) { handle.apply(cur, data); }
                handle = ontype && cur[ontype]; if (handle && handle.apply && acceptData(cur)) { event.result = handle.apply(cur, data); if (event.result === false) { event.preventDefault(); } }
            }
            event.type = type; if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype]; if (tmp) { elem[ontype] = null; }
                        jQuery.event.triggered = type; try { elem[type](); } catch (e) { }
                        jQuery.event.triggered = undefined; if (tmp) { elem[ontype] = tmp; }
                    }
                }
            }
            return event.result;
        }, dispatch: function (event) {
            event = jQuery.event.fix(event); var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {}; args[0] = event; event.delegateTarget = this; if (special.preDispatch && special.preDispatch.call(this, event) === false) { return; }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers); i = 0; while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) { event.currentTarget = matched.elem; j = 0; while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) { if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) { event.handleObj = handleObj; event.data = handleObj.data; ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args); if (ret !== undefined) { if ((event.result = ret) === false) { event.preventDefault(); event.stopPropagation(); } } } } }
            if (special.postDispatch) { special.postDispatch.call(this, event); }
            return event.result;
        }, handlers: function (event, handlers) {
            var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target; if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {
                for (; cur != this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = []; for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i]; sel = handleObj.selector + " "; if (matches[sel] === undefined) { matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length; }
                            if (matches[sel]) { matches.push(handleObj); }
                        }
                        if (matches.length) { handlerQueue.push({ elem: cur, handlers: matches }); }
                    }
                }
            }
            if (delegateCount < handlers.length) { handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) }); }
            return handlerQueue;
        }, fix: function (event) {
            if (event[jQuery.expando]) { return event; }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type]; if (!fixHook) { this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}; }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props; event = new jQuery.Event(originalEvent); i = copy.length; while (i--) { prop = copy[i]; event[prop] = originalEvent[prop]; }
            if (!event.target) { event.target = originalEvent.srcElement || document; }
            if (event.target.nodeType === 3) { event.target = event.target.parentNode; }
            event.metaKey = !!event.metaKey; return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        }, props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "), fixHooks: {}, keyHooks: {
            props: "char charCode key keyCode".split(" "), filter: function (event, original) {
                if (event.which == null) { event.which = original.charCode != null ? original.charCode : original.keyCode; }
                return event;
            }
        }, mouseHooks: {
            props: ("button buttons clientX clientY fromElement offsetX offsetY " + "pageX pageY screenX screenY toElement").split(" "), filter: function (event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement; if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document; doc = eventDoc.documentElement; body = eventDoc.body; event.pageX = original.clientX +
                        (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
                        (doc && doc.clientLeft || body && body.clientLeft || 0); event.pageY = original.clientY +
                            (doc && doc.scrollTop || body && body.scrollTop || 0) -
                            (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) { event.relatedTarget = fromElement === event.target ? original.toElement : fromElement; }
                if (!event.which && button !== undefined) { event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0))); }
                return event;
            }
        }, special: { load: { noBubble: true }, focus: { trigger: function () { if (this !== safeActiveElement() && this.focus) { try { this.focus(); return false; } catch (e) { } } }, delegateType: "focusin" }, blur: { trigger: function () { if (this === safeActiveElement() && this.blur) { this.blur(); return false; } }, delegateType: "focusout" }, click: { trigger: function () { if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) { this.click(); return false; } }, _default: function (event) { return jQuery.nodeName(event.target, "a"); } }, beforeunload: { postDispatch: function (event) { if (event.result !== undefined && event.originalEvent) { event.originalEvent.returnValue = event.result; } } } }, simulate: function (type, elem, event) { var e = jQuery.extend(new jQuery.Event(), event, { type: type, isSimulated: true }); jQuery.event.trigger(e, null, elem); if (e.isDefaultPrevented()) { event.preventDefault(); } }
    }; jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) { if (elem.removeEventListener) { elem.removeEventListener(type, handle); } } : function (elem, type, handle) {
        var name = "on" + type; if (elem.detachEvent) {
            if (typeof elem[name] === "undefined") { elem[name] = null; }
            elem.detachEvent(name, handle);
        }
    }; jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) { return new jQuery.Event(src, props); }
        if (src && src.type) { this.originalEvent = src; this.type = src.type; this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse; } else { this.type = src; }
        if (props) { jQuery.extend(this, props); }
        this.timeStamp = src && src.timeStamp || jQuery.now(); this[jQuery.expando] = true;
    }; jQuery.Event.prototype = {
        constructor: jQuery.Event, isDefaultPrevented: returnFalse, isPropagationStopped: returnFalse, isImmediatePropagationStopped: returnFalse, preventDefault: function () {
            var e = this.originalEvent; this.isDefaultPrevented = returnTrue; if (!e) { return; }
            if (e.preventDefault) { e.preventDefault(); } else { e.returnValue = false; }
        }, stopPropagation: function () {
            var e = this.originalEvent; this.isPropagationStopped = returnTrue; if (!e || this.isSimulated) { return; }
            if (e.stopPropagation) { e.stopPropagation(); }
            e.cancelBubble = true;
        }, stopImmediatePropagation: function () {
            var e = this.originalEvent; this.isImmediatePropagationStopped = returnTrue; if (e && e.stopImmediatePropagation) { e.stopImmediatePropagation(); }
            this.stopPropagation();
        }
    }; jQuery.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix, bindType: fix, handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj; if (!related || (related !== target && !jQuery.contains(target, related))) { event.type = handleObj.origType; ret = handleObj.handler.apply(this, arguments); event.type = fix; }
                return ret;
            }
        };
    }); if (!support.submit) {
        jQuery.event.special.submit = {
            setup: function () {
                if (jQuery.nodeName(this, "form")) { return false; }
                jQuery.event.add(this, "click._submit keypress._submit", function (e) { var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? jQuery.prop(elem, "form") : undefined; if (form && !jQuery._data(form, "submit")) { jQuery.event.add(form, "submit._submit", function (event) { event._submitBubble = true; }); jQuery._data(form, "submit", true); } });
            }, postDispatch: function (event) { if (event._submitBubble) { delete event._submitBubble; if (this.parentNode && !event.isTrigger) { jQuery.event.simulate("submit", this.parentNode, event); } } }, teardown: function () {
                if (jQuery.nodeName(this, "form")) { return false; }
                jQuery.event.remove(this, "._submit");
            }
        };
    }
    if (!support.change) {
        jQuery.event.special.change = {
            setup: function () {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function (event) { if (event.originalEvent.propertyName === "checked") { this._justChanged = true; } }); jQuery.event.add(this, "click._change", function (event) {
                            if (this._justChanged && !event.isTrigger) { this._justChanged = false; }
                            jQuery.event.simulate("change", this, event);
                        });
                    }
                    return false;
                }
                jQuery.event.add(this, "beforeactivate._change", function (e) { var elem = e.target; if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "change")) { jQuery.event.add(elem, "change._change", function (event) { if (this.parentNode && !event.isSimulated && !event.isTrigger) { jQuery.event.simulate("change", this.parentNode, event); } }); jQuery._data(elem, "change", true); } });
            }, handle: function (event) { var elem = event.target; if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) { return event.handleObj.handler.apply(this, arguments); } }, teardown: function () { jQuery.event.remove(this, "._change"); return !rformElems.test(this.nodeName); }
        };
    }
    if (!support.focusin) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {
            var handler = function (event) { jQuery.event.simulate(fix, event.target, jQuery.event.fix(event)); }; jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix); if (!attaches) { doc.addEventListener(orig, handler, true); }
                    jQuery._data(doc, fix, (attaches || 0) + 1);
                }, teardown: function () { var doc = this.ownerDocument || this, attaches = jQuery._data(doc, fix) - 1; if (!attaches) { doc.removeEventListener(orig, handler, true); jQuery._removeData(doc, fix); } else { jQuery._data(doc, fix, attaches); } }
            };
        });
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn) { return on(this, types, selector, data, fn); }, one: function (types, selector, data, fn) { return on(this, types, selector, data, fn, 1); }, off: function (types, selector, fn) {
            var handleObj, type; if (types && types.preventDefault && types.handleObj) { handleObj = types.handleObj; jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler); return this; }
            if (typeof types === "object") {
                for (type in types) { this.off(type, selector, types[type]); }
                return this;
            }
            if (selector === false || typeof selector === "function") { fn = selector; selector = undefined; }
            if (fn === false) { fn = returnFalse; }
            return this.each(function () { jQuery.event.remove(this, types, fn, selector); });
        }, trigger: function (type, data) { return this.each(function () { jQuery.event.trigger(type, data, this); }); }, triggerHandler: function (type, data) { var elem = this[0]; if (elem) { return jQuery.event.trigger(type, data, elem, true); } }
    }); var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div")); function manipulationTarget(elem, content) { return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem; }
    function disableScript(elem) { elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type; return elem; }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type); if (match) { elem.type = match[1]; } else { elem.removeAttribute("type"); }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) { return; }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events; if (events) { delete curData.handle; curData.events = {}; for (type in events) { for (i = 0, l = events[type].length; i < l; i++) { jQuery.event.add(dest, type, events[type][i]); } } }
        if (curData.data) { curData.data = jQuery.extend({}, curData.data); }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data; if (dest.nodeType !== 1) { return; }
        nodeName = dest.nodeName.toLowerCase(); if (!support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest); for (e in data.events) { jQuery.removeEvent(dest, e, data.handle); }
            dest.removeAttribute(jQuery.expando);
        }
        if (nodeName === "script" && dest.text !== src.text) { disableScript(dest).text = src.text; restoreScript(dest); } else if (nodeName === "object") {
            if (dest.parentNode) { dest.outerHTML = src.outerHTML; }
            if (support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) { dest.innerHTML = src.innerHTML; }
        } else if (nodeName === "input" && rcheckableType.test(src.type)) { dest.defaultChecked = dest.checked = src.checked; if (dest.value !== src.value) { dest.value = src.value; } } else if (nodeName === "option") { dest.defaultSelected = dest.selected = src.defaultSelected; } else if (nodeName === "input" || nodeName === "textarea") { dest.defaultValue = src.defaultValue; }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args); var first, node, hasScripts, scripts, doc, fragment, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value); if (isFunction || (l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value))) {
            return collection.each(function (index) {
                var self = collection.eq(index); if (isFunction) { args[0] = value.call(this, index, self.html()); }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored); first = fragment.firstChild; if (fragment.childNodes.length === 1) { fragment = first; }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript); hasScripts = scripts.length; for (; i < l; i++) {
                    node = fragment; if (i !== iNoClone) { node = jQuery.clone(node, true, true); if (hasScripts) { jQuery.merge(scripts, getAll(node, "script")); } }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) { doc = scripts[scripts.length - 1].ownerDocument; jQuery.map(scripts, restoreScript); for (i = 0; i < hasScripts; i++) { node = scripts[i]; if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) { if (node.src) { if (jQuery._evalUrl) { jQuery._evalUrl(node.src); } } else { jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, "")); } } } }
                fragment = first = null;
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, elems = selector ? jQuery.filter(selector, elem) : elem, i = 0; for (; (node = elems[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) { jQuery.cleanData(getAll(node)); }
            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) { setGlobalEval(getAll(node, "script")); }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function (html) { return html.replace(rxhtmlTag, "<$1></$2>"); }, clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem); if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) { clone = elem.cloneNode(true); } else { fragmentDiv.innerHTML = elem.outerHTML; fragmentDiv.removeChild(clone = fragmentDiv.firstChild); }
            if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) { destElements = getAll(clone); srcElements = getAll(elem); for (i = 0; (node = srcElements[i]) != null; ++i) { if (destElements[i]) { fixCloneNodeIssues(node, destElements[i]); } } }
            if (dataAndEvents) { if (deepDataAndEvents) { srcElements = srcElements || getAll(elem); destElements = destElements || getAll(clone); for (i = 0; (node = srcElements[i]) != null; i++) { cloneCopyEvent(node, destElements[i]); } } else { cloneCopyEvent(elem, clone); } }
            destElements = getAll(clone, "script"); if (destElements.length > 0) { setGlobalEval(destElements, !inPage && getAll(elem, "script")); }
            destElements = srcElements = node = null; return clone;
        }, cleanData: function (elems, forceAcceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, attributes = support.attributes, special = jQuery.event.special; for (; (elem = elems[i]) != null; i++) {
                if (forceAcceptData || acceptData(elem)) {
                    id = elem[internalKey]; data = id && cache[id]; if (data) {
                        if (data.events) { for (type in data.events) { if (special[type]) { jQuery.event.remove(elem, type); } else { jQuery.removeEvent(elem, type, data.handle); } } }
                        if (cache[id]) {
                            delete cache[id]; if (!attributes && typeof elem.removeAttribute !== "undefined") { elem.removeAttribute(internalKey); } else { elem[internalKey] = undefined; }
                            deletedIds.push(id);
                        }
                    }
                }
            }
        }
    }); jQuery.fn.extend({
        domManip: domManip, detach: function (selector) { return remove(this, selector, true); }, remove: function (selector) { return remove(this, selector); }, text: function (value) { return access(this, function (value) { return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value)); }, null, value, arguments.length); }, append: function () { return domManip(this, arguments, function (elem) { if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) { var target = manipulationTarget(this, elem); target.appendChild(elem); } }); }, prepend: function () { return domManip(this, arguments, function (elem) { if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) { var target = manipulationTarget(this, elem); target.insertBefore(elem, target.firstChild); } }); }, before: function () { return domManip(this, arguments, function (elem) { if (this.parentNode) { this.parentNode.insertBefore(elem, this); } }); }, after: function () { return domManip(this, arguments, function (elem) { if (this.parentNode) { this.parentNode.insertBefore(elem, this.nextSibling); } }); }, empty: function () {
            var elem, i = 0; for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) { jQuery.cleanData(getAll(elem, false)); }
                while (elem.firstChild) { elem.removeChild(elem.firstChild); }
                if (elem.options && jQuery.nodeName(elem, "select")) { elem.options.length = 0; }
            }
            return this;
        }, clone: function (dataAndEvents, deepDataAndEvents) { dataAndEvents = dataAndEvents == null ? false : dataAndEvents; deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents; return this.map(function () { return jQuery.clone(this, dataAndEvents, deepDataAndEvents); }); }, html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length; if (value === undefined) { return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined; }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value); try {
                        for (; i < l; i++) { elem = this[i] || {}; if (elem.nodeType === 1) { jQuery.cleanData(getAll(elem, false)); elem.innerHTML = value; } }
                        elem = 0;
                    } catch (e) { }
                }
                if (elem) { this.empty().append(value); }
            }, null, value, arguments.length);
        }, replaceWith: function () { var ignored = []; return domManip(this, arguments, function (elem) { var parent = this.parentNode; if (jQuery.inArray(this, ignored) < 0) { jQuery.cleanData(getAll(this)); if (parent) { parent.replaceChild(elem, this); } } }, ignored); }
    }); jQuery.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1; for (; i <= last; i++) { elems = i === last ? this : this.clone(true); jQuery(insert[i])[original](elems); push.apply(ret, elems.get()); }
            return this.pushStack(ret);
        };
    }); var iframe, elemdisplay = { HTML: "block", BODY: "block" }; function actualDisplay(name, doc) { var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display"); elem.detach(); return display; }
    function defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName]; if (!display) {
            display = actualDisplay(nodeName, doc); if (display === "none" || !display) { iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement); doc = (iframe[0].contentWindow || iframe[0].contentDocument).document; doc.write(); doc.close(); display = actualDisplay(nodeName, doc); iframe.detach(); }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    var rmargin = (/^margin/); var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i"); var swap = function (elem, options, callback, args) {
        var ret, name, old = {}; for (name in options) { old[name] = elem.style[name]; elem.style[name] = options[name]; }
        ret = callback.apply(elem, args || []); for (name in options) { elem.style[name] = old[name]; }
        return ret;
    }; var documentElement = document.documentElement; (function () {
        var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal, reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal, container = document.createElement("div"), div = document.createElement("div"); if (!div.style) { return; }
        div.style.cssText = "float:left;opacity:.5"; support.opacity = div.style.opacity === "0.5"; support.cssFloat = !!div.style.cssFloat; div.style.backgroundClip = "content-box"; div.cloneNode(true).style.backgroundClip = ""; support.clearCloneStyle = div.style.backgroundClip === "content-box"; container = document.createElement("div"); container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute"; div.innerHTML = ""; container.appendChild(div); support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" || div.style.WebkitBoxSizing === ""; jQuery.extend(support, {
            reliableHiddenOffsets: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return reliableHiddenOffsetsVal;
            }, boxSizingReliable: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return boxSizingReliableVal;
            }, pixelMarginRight: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return pixelMarginRightVal;
            }, pixelPosition: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return pixelPositionVal;
            }, reliableMarginRight: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return reliableMarginRightVal;
            }, reliableMarginLeft: function () {
                if (pixelPositionVal == null) { computeStyleTests(); }
                return reliableMarginLeftVal;
            }
        }); function computeStyleTests() {
            var contents, divStyle, documentElement = document.documentElement; documentElement.appendChild(container); div.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%"; pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false; pixelMarginRightVal = reliableMarginRightVal = true; if (window.getComputedStyle) { divStyle = window.getComputedStyle(div); pixelPositionVal = (divStyle || {}).top !== "1%"; reliableMarginLeftVal = (divStyle || {}).marginLeft === "2px"; boxSizingReliableVal = (divStyle || { width: "4px" }).width === "4px"; div.style.marginRight = "50%"; pixelMarginRightVal = (divStyle || { marginRight: "4px" }).marginRight === "4px"; contents = div.appendChild(document.createElement("div")); contents.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0"; contents.style.marginRight = contents.style.width = "0"; div.style.width = "1px"; reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents) || {}).marginRight); div.removeChild(contents); }
            div.style.display = "none"; reliableHiddenOffsetsVal = div.getClientRects().length === 0; if (reliableHiddenOffsetsVal) { div.style.display = ""; div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"; div.childNodes[0].style.borderCollapse = "separate"; contents = div.getElementsByTagName("td"); contents[0].style.cssText = "margin:0;border:0;padding:0;display:none"; reliableHiddenOffsetsVal = contents[0].offsetHeight === 0; if (reliableHiddenOffsetsVal) { contents[0].style.display = ""; contents[1].style.display = "none"; reliableHiddenOffsetsVal = contents[0].offsetHeight === 0; } }
            documentElement.removeChild(container);
        }
    })(); var getStyles, curCSS, rposition = /^(top|right|bottom|left)$/; if (window.getComputedStyle) {
        getStyles = function (elem) {
            var view = elem.ownerDocument.defaultView; if (!view || !view.opener) { view = window; }
            return view.getComputedStyle(elem);
        }; curCSS = function (elem, name, computed) {
            var width, minWidth, maxWidth, ret, style = elem.style; computed = computed || getStyles(elem); ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined; if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) { ret = jQuery.style(elem, name); }
            if (computed) { if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) { width = style.width; minWidth = style.minWidth; maxWidth = style.maxWidth; style.minWidth = style.maxWidth = style.width = ret; ret = computed.width; style.width = width; style.minWidth = minWidth; style.maxWidth = maxWidth; } }
            return ret === undefined ? ret : ret + "";
        };
    } else if (documentElement.currentStyle) {
        getStyles = function (elem) { return elem.currentStyle; }; curCSS = function (elem, name, computed) {
            var left, rs, rsLeft, ret, style = elem.style; computed = computed || getStyles(elem); ret = computed ? computed[name] : undefined; if (ret == null && style && style[name]) { ret = style[name]; }
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left; rs = elem.runtimeStyle; rsLeft = rs && rs.left; if (rsLeft) { rs.left = elem.currentStyle.left; }
                style.left = name === "fontSize" ? "1em" : ret; ret = style.pixelLeft + "px"; style.left = left; if (rsLeft) { rs.left = rsLeft; }
            }
            return ret === undefined ? ret : ret + "" || "auto";
        };
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) { delete this.get; return; }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var
        ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/i, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"), cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = { letterSpacing: "0", fontWeight: "400" }, cssPrefixes = ["Webkit", "O", "Moz", "ms"], emptyStyle = document.createElement("div").style; function vendorPropName(name) {
            if (name in emptyStyle) { return name; }
            var capName = name.charAt(0).toUpperCase() + name.slice(1), i = cssPrefixes.length; while (i--) { name = cssPrefixes[i] + capName; if (name in emptyStyle) { return name; } }
        }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length; for (; index < length; index++) {
            elem = elements[index]; if (!elem.style) { continue; }
            values[index] = jQuery._data(elem, "olddisplay"); display = elem.style.display; if (show) {
                if (!values[index] && display === "none") { elem.style.display = ""; }
                if (elem.style.display === "" && isHidden(elem)) { values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName)); }
            } else { hidden = isHidden(elem); if (display && display !== "none" || !hidden) { jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display")); } }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index]; if (!elem.style) { continue; }
            if (!show || elem.style.display === "none" || elem.style.display === "") { elem.style.display = show ? values[index] || "" : "none"; }
        }
        return elements;
    }
    function setPositiveNumber(elem, value, subtract) { var matches = rnumsplit.exec(value); return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value; }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0; for (; i < 4; i += 2) {
            if (extra === "margin") { val += jQuery.css(elem, extra + cssExpand[i], true, styles); }
            if (isBorderBox) {
                if (extra === "content") { val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles); }
                if (extra !== "margin") { val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); }
            } else { val += jQuery.css(elem, "padding" + cssExpand[i], true, styles); if (extra !== "padding") { val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); } }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box"; if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles); if (val < 0 || val == null) { val = elem.style[name]; }
            if (rnumnonpx.test(val)) { return val; }
            valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); val = parseFloat(val) || 0;
        }
        return (val +
            augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
    }
    jQuery.extend({
        cssHooks: { opacity: { get: function (elem, computed) { if (computed) { var ret = curCSS(elem, "opacity"); return ret === "" ? "1" : ret; } } } }, cssNumber: { "animationIterationCount": true, "columnCount": true, "fillOpacity": true, "flexGrow": true, "flexShrink": true, "fontWeight": true, "lineHeight": true, "opacity": true, "order": true, "orphans": true, "widows": true, "zIndex": true, "zoom": true }, cssProps: { "float": support.cssFloat ? "cssFloat" : "styleFloat" }, style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) { return; }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style; name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName); hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; if (value !== undefined) {
                type = typeof value; if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) { value = adjustCSS(elem, name, ret); type = "number"; }
                if (value == null || value !== value) { return; }
                if (type === "number") { value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px"); }
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) { style[name] = "inherit"; }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) { try { style[name] = value; } catch (e) { } }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) { return ret; }
                return style[name];
            }
        }, css: function (elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name); name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName); hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; if (hooks && "get" in hooks) { val = hooks.get(elem, true, extra); }
            if (val === undefined) { val = curCSS(elem, name, styles); }
            if (val === "normal" && name in cssNormalTransform) { val = cssNormalTransform[name]; }
            if (extra === "" || extra) { num = parseFloat(val); return extra === true || isFinite(num) ? num || 0 : val; }
            return val;
        }
    }); jQuery.each(["height", "width"], function (i, name) { jQuery.cssHooks[name] = { get: function (elem, computed, extra) { if (computed) { return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () { return getWidthOrHeight(elem, name, extra); }) : getWidthOrHeight(elem, name, extra); } }, set: function (elem, value, extra) { var styles = extra && getStyles(elem); return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0); } }; }); if (!support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function (elem, computed) { return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (0.01 * parseFloat(RegExp.$1)) + "" : computed ? "1" : ""; }, set: function (elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || ""; style.zoom = 1; if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) { style.removeAttribute("filter"); if (value === "" || currentStyle && !currentStyle.filter) { return; } }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
            }
        };
    }
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) { if (computed) { return swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]); } }); jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || (jQuery.contains(elem.ownerDocument, elem) ? elem.getBoundingClientRect().left -
                swap(elem, { marginLeft: 0 }, function () { return elem.getBoundingClientRect().left; }) : 0)) + "px";
        }
    }); jQuery.each({ margin: "", padding: "", border: "Width" }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value]; for (; i < 4; i++) { expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]; }
                return expanded;
            }
        }; if (!rmargin.test(prefix)) { jQuery.cssHooks[prefix + suffix].set = setPositiveNumber; }
    }); jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0; if (jQuery.isArray(name)) {
                    styles = getStyles(elem); len = name.length; for (; i < len; i++) { map[name[i]] = jQuery.css(elem, name[i], false, styles); }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }, show: function () { return showHide(this, true); }, hide: function () { return showHide(this); }, toggle: function (state) {
            if (typeof state === "boolean") { return state ? this.show() : this.hide(); }
            return this.each(function () { if (isHidden(this)) { jQuery(this).show(); } else { jQuery(this).hide(); } });
        }
    }); function Tween(elem, options, prop, end, easing) { return new Tween.prototype.init(elem, options, prop, end, easing); }
    jQuery.Tween = Tween; Tween.prototype = {
        constructor: Tween, init: function (elem, options, prop, end, easing, unit) { this.elem = elem; this.prop = prop; this.easing = easing || jQuery.easing._default; this.options = options; this.start = this.now = this.cur(); this.end = end; this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px"); }, cur: function () { var hooks = Tween.propHooks[this.prop]; return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this); }, run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop]; if (this.options.duration) { this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration); } else { this.pos = eased = percent; }
            this.now = (this.end - this.start) * eased + this.start; if (this.options.step) { this.options.step.call(this.elem, this.now, this); }
            if (hooks && hooks.set) { hooks.set(this); } else { Tween.propHooks._default.set(this); }
            return this;
        }
    }; Tween.prototype.init.prototype = Tween.prototype; Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result; if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) { return tween.elem[tween.prop]; }
                result = jQuery.css(tween.elem, tween.prop, ""); return !result || result === "auto" ? 0 : result;
            }, set: function (tween) { if (jQuery.fx.step[tween.prop]) { jQuery.fx.step[tween.prop](tween); } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) { jQuery.style(tween.elem, tween.prop, tween.now + tween.unit); } else { tween.elem[tween.prop] = tween.now; } }
        }
    }; Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = { set: function (tween) { if (tween.elem.nodeType && tween.elem.parentNode) { tween.elem[tween.prop] = tween.now; } } }; jQuery.easing = { linear: function (p) { return p; }, swing: function (p) { return 0.5 - Math.cos(p * Math.PI) / 2; }, _default: "swing" }; jQuery.fx = Tween.prototype.init; jQuery.fx.step = {}; var
        fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/; function createFxNow() { window.setTimeout(function () { fxNow = undefined; }); return (fxNow = jQuery.now()); }
    function genFx(type, includeWidth) {
        var which, attrs = { height: type }, i = 0; includeWidth = includeWidth ? 1 : 0; for (; i < 4; i += 2 - includeWidth) { which = cssExpand[i]; attrs["margin" + which] = attrs["padding" + which] = type; }
        if (includeWidth) { attrs.opacity = attrs.width = type; }
        return attrs;
    }
    function createTween(value, prop, animation) { var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length; for (; index < length; index++) { if ((tween = collection[index].call(animation, prop, value))) { return tween; } } }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow"); if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx"); if (hooks.unqueued == null) { hooks.unqueued = 0; oldfire = hooks.empty.fire; hooks.empty.fire = function () { if (!hooks.unqueued) { oldfire(); } }; }
            hooks.unqueued++; anim.always(function () { anim.always(function () { hooks.unqueued--; if (!jQuery.queue(elem, "fx").length) { hooks.empty.fire(); } }); });
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) { opts.overflow = [style.overflow, style.overflowX, style.overflowY]; display = jQuery.css(elem, "display"); checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display; if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") { if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") { style.display = "inline-block"; } else { style.zoom = 1; } } }
        if (opts.overflow) { style.overflow = "hidden"; if (!support.shrinkWrapBlocks()) { anim.always(function () { style.overflow = opts.overflow[0]; style.overflowX = opts.overflow[1]; style.overflowY = opts.overflow[2]; }); } }
        for (prop in props) {
            value = props[prop]; if (rfxtypes.exec(value)) {
                delete props[prop]; toggle = toggle || value === "toggle"; if (value === (hidden ? "hide" : "show")) { if (value === "show" && dataShow && dataShow[prop] !== undefined) { hidden = true; } else { continue; } }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            } else { display = undefined; }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) { if ("hidden" in dataShow) { hidden = dataShow.hidden; } } else { dataShow = jQuery._data(elem, "fxshow", {}); }
            if (toggle) { dataShow.hidden = !hidden; }
            if (hidden) { jQuery(elem).show(); } else { anim.done(function () { jQuery(elem).hide(); }); }
            anim.done(function () { var prop; jQuery._removeData(elem, "fxshow"); for (prop in orig) { jQuery.style(elem, prop, orig[prop]); } }); for (prop in orig) { tween = createTween(hidden ? dataShow[prop] : 0, prop, anim); if (!(prop in dataShow)) { dataShow[prop] = tween.start; if (hidden) { tween.end = tween.start; tween.start = prop === "width" || prop === "height" ? 1 : 0; } } }
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") { style.display = display; }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks; for (index in props) {
            name = jQuery.camelCase(index); easing = specialEasing[name]; value = props[index]; if (jQuery.isArray(value)) { easing = value[1]; value = props[index] = value[0]; }
            if (index !== name) { props[name] = value; delete props[index]; }
            hooks = jQuery.cssHooks[name]; if (hooks && "expand" in hooks) { value = hooks.expand(value); delete props[name]; for (index in value) { if (!(index in props)) { props[index] = value[index]; specialEasing[index] = easing; } } } else { specialEasing[name] = easing; }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () { delete tick.elem; }), tick = function () {
            if (stopped) { return false; }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length; for (; index < length; index++) { animation.tweens[index].run(percent); }
            deferred.notifyWith(elem, [animation, percent, remaining]); if (percent < 1 && length) { return remaining; } else { deferred.resolveWith(elem, [animation]); return false; }
        }, animation = deferred.promise({
            elem: elem, props: jQuery.extend({}, properties), opts: jQuery.extend(true, { specialEasing: {}, easing: jQuery.easing._default }, options), originalProperties: properties, originalOptions: options, startTime: fxNow || createFxNow(), duration: options.duration, tweens: [], createTween: function (prop, end) { var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing); animation.tweens.push(tween); return tween; }, stop: function (gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0; if (stopped) { return this; }
                stopped = true; for (; index < length; index++) { animation.tweens[index].run(1); }
                if (gotoEnd) { deferred.notifyWith(elem, [animation, 1, 0]); deferred.resolveWith(elem, [animation, gotoEnd]); } else { deferred.rejectWith(elem, [animation, gotoEnd]); }
                return this;
            }
        }), props = animation.props; propFilter(props, animation.opts.specialEasing); for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts); if (result) {
                if (jQuery.isFunction(result.stop)) { jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result); }
                return result;
            }
        }
        jQuery.map(props, createTween, animation); if (jQuery.isFunction(animation.opts.start)) { animation.opts.start.call(elem, animation); }
        jQuery.fx.timer(jQuery.extend(tick, { elem: elem, anim: animation, queue: animation.opts.queue })); return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: { "*": [function (prop, value) { var tween = this.createTween(prop, value); adjustCSS(tween.elem, prop, rcssNum.exec(value), tween); return tween; }] }, tweener: function (props, callback) {
            if (jQuery.isFunction(props)) { callback = props; props = ["*"]; } else { props = props.match(rnotwhite); }
            var prop, index = 0, length = props.length; for (; index < length; index++) { prop = props[index]; Animation.tweeners[prop] = Animation.tweeners[prop] || []; Animation.tweeners[prop].unshift(callback); }
        }, prefilters: [defaultPrefilter], prefilter: function (callback, prepend) { if (prepend) { Animation.prefilters.unshift(callback); } else { Animation.prefilters.push(callback); } }
    }); jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : { complete: fn || !fn && easing || jQuery.isFunction(speed) && speed, duration: speed, easing: fn && easing || easing && !jQuery.isFunction(easing) && easing }; opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default; if (opt.queue == null || opt.queue === true) { opt.queue = "fx"; }
        opt.old = opt.complete; opt.complete = function () {
            if (jQuery.isFunction(opt.old)) { opt.old.call(this); }
            if (opt.queue) { jQuery.dequeue(this, opt.queue); }
        }; return opt;
    }; jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) { return this.filter(isHidden).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback); }, animate: function (prop, speed, easing, callback) { var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () { var anim = Animation(this, jQuery.extend({}, prop), optall); if (empty || jQuery._data(this, "finish")) { anim.stop(true); } }; doAnimation.finish = doAnimation; return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation); }, stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) { var stop = hooks.stop; delete hooks.stop; stop(gotoEnd); }; if (typeof type !== "string") { gotoEnd = clearQueue; clearQueue = type; type = undefined; }
            if (clearQueue && type !== false) { this.queue(type || "fx", []); }
            return this.each(function () {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this); if (index) { if (data[index] && data[index].stop) { stopQueue(data[index]); } } else { for (index in data) { if (data[index] && data[index].stop && rrun.test(index)) { stopQueue(data[index]); } } }
                for (index = timers.length; index--;) { if (timers[index].elem === this && (type == null || timers[index].queue === type)) { timers[index].anim.stop(gotoEnd); dequeue = false; timers.splice(index, 1); } }
                if (dequeue || !gotoEnd) { jQuery.dequeue(this, type); }
            });
        }, finish: function (type) {
            if (type !== false) { type = type || "fx"; }
            return this.each(function () {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0; data.finish = true; jQuery.queue(this, type, []); if (hooks && hooks.stop) { hooks.stop.call(this, true); }
                for (index = timers.length; index--;) { if (timers[index].elem === this && timers[index].queue === type) { timers[index].anim.stop(true); timers.splice(index, 1); } }
                for (index = 0; index < length; index++) { if (queue[index] && queue[index].finish) { queue[index].finish.call(this); } }
                delete data.finish;
            });
        }
    }); jQuery.each(["toggle", "show", "hide"], function (i, name) { var cssFn = jQuery.fn[name]; jQuery.fn[name] = function (speed, easing, callback) { return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback); }; }); jQuery.each({ slideDown: genFx("show"), slideUp: genFx("hide"), slideToggle: genFx("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (name, props) { jQuery.fn[name] = function (speed, easing, callback) { return this.animate(props, speed, easing, callback); }; }); jQuery.timers = []; jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers, i = 0; fxNow = jQuery.now(); for (; i < timers.length; i++) { timer = timers[i]; if (!timer() && timers[i] === timer) { timers.splice(i--, 1); } }
        if (!timers.length) { jQuery.fx.stop(); }
        fxNow = undefined;
    }; jQuery.fx.timer = function (timer) { jQuery.timers.push(timer); if (timer()) { jQuery.fx.start(); } else { jQuery.timers.pop(); } }; jQuery.fx.interval = 13; jQuery.fx.start = function () { if (!timerId) { timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval); } }; jQuery.fx.stop = function () { window.clearInterval(timerId); timerId = null; }; jQuery.fx.speeds = { slow: 600, fast: 200, _default: 400 }; jQuery.fn.delay = function (time, type) { time = jQuery.fx ? jQuery.fx.speeds[time] || time : time; type = type || "fx"; return this.queue(type, function (next, hooks) { var timeout = window.setTimeout(next, time); hooks.stop = function () { window.clearTimeout(timeout); }; }); }; (function () { var a, input = document.createElement("input"), div = document.createElement("div"), select = document.createElement("select"), opt = select.appendChild(document.createElement("option")); div = document.createElement("div"); div.setAttribute("className", "t"); div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; a = div.getElementsByTagName("a")[0]; input.setAttribute("type", "checkbox"); div.appendChild(input); a = div.getElementsByTagName("a")[0]; a.style.cssText = "top:1px"; support.getSetAttribute = div.className !== "t"; support.style = /top/.test(a.getAttribute("style")); support.hrefNormalized = a.getAttribute("href") === "/a"; support.checkOn = !!input.value; support.optSelected = opt.selected; support.enctype = !!document.createElement("form").enctype; select.disabled = true; support.optDisabled = !opt.disabled; input = document.createElement("input"); input.setAttribute("value", ""); support.input = input.getAttribute("value") === ""; input.value = "t"; input.setAttribute("type", "radio"); support.radioValue = input.value === "t"; })(); var rreturn = /\r/g, rspaces = /[\x20\t\r\n\f]+/g; jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, isFunction, elem = this[0]; if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()]; if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) { return ret; }
                    ret = elem.value; return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value); return this.each(function (i) {
                var val; if (this.nodeType !== 1) { return; }
                if (isFunction) { val = value.call(this, i, jQuery(this).val()); } else { val = value; }
                if (val == null) { val = ""; } else if (typeof val === "number") { val += ""; } else if (jQuery.isArray(val)) { val = jQuery.map(val, function (value) { return value == null ? "" : value + ""; }); }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) { this.value = val; }
            });
        }
    }); jQuery.extend({
        valHooks: {
            option: { get: function (elem) { var val = jQuery.find.attr(elem, "value"); return val != null ? val : jQuery.trim(jQuery.text(elem)).replace(rspaces, " "); } }, select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0; for (; i < max; i++) {
                        option = options[i]; if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val(); if (one) { return value; }
                            values.push(value);
                        }
                    }
                    return values;
                }, set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length; while (i--) { option = options[i]; if (jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) { try { option.selected = optionSet = true; } catch (_) { option.scrollHeight; } } else { option.selected = false; } }
                    if (!optionSet) { elem.selectedIndex = -1; }
                    return options;
                }
            }
        }
    }); jQuery.each(["radio", "checkbox"], function () { jQuery.valHooks[this] = { set: function (elem, value) { if (jQuery.isArray(value)) { return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1); } } }; if (!support.checkOn) { jQuery.valHooks[this].get = function (elem) { return elem.getAttribute("value") === null ? "on" : elem.value; }; } }); var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = support.getSetAttribute, getSetInput = support.input; jQuery.fn.extend({ attr: function (name, value) { return access(this, jQuery.attr, name, value, arguments.length > 1); }, removeAttr: function (name) { return this.each(function () { jQuery.removeAttr(this, name); }); } }); jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType; if (nType === 3 || nType === 8 || nType === 2) { return; }
            if (typeof elem.getAttribute === "undefined") { return jQuery.prop(elem, name, value); }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) { name = name.toLowerCase(); hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook); }
            if (value !== undefined) {
                if (value === null) { jQuery.removeAttr(elem, name); return; }
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) { return ret; }
                elem.setAttribute(name, value + ""); return value;
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) { return ret; }
            ret = jQuery.find.attr(elem, name); return ret == null ? undefined : ret;
        }, attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value; elem.setAttribute("type", value); if (val) { elem.value = val; }
                        return value;
                    }
                }
            }
        }, removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(rnotwhite); if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name; if (jQuery.expr.match.bool.test(name)) { if (getSetInput && getSetAttribute || !ruseDefault.test(name)) { elem[propName] = false; } else { elem[jQuery.camelCase("default-" + name)] = elem[propName] = false; } } else { jQuery.attr(elem, name, ""); }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        }
    }); boolHook = {
        set: function (elem, value, name) {
            if (value === false) { jQuery.removeAttr(elem, name); } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) { elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name); } else { elem[jQuery.camelCase("default-" + name)] = elem[name] = true; }
            return name;
        }
    }; jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr; if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
            attrHandle[name] = function (elem, name, isXML) {
                var ret, handle; if (!isXML) { handle = attrHandle[name]; attrHandle[name] = ret; ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null; attrHandle[name] = handle; }
                return ret;
            };
        } else { attrHandle[name] = function (elem, name, isXML) { if (!isXML) { return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null; } }; }
    }); if (!getSetInput || !getSetAttribute) { jQuery.attrHooks.value = { set: function (elem, value, name) { if (jQuery.nodeName(elem, "input")) { elem.defaultValue = value; } else { return nodeHook && nodeHook.set(elem, value, name); } } }; }
    if (!getSetAttribute) {
        nodeHook = {
            set: function (elem, value, name) {
                var ret = elem.getAttributeNode(name); if (!ret) { elem.setAttributeNode((ret = elem.ownerDocument.createAttribute(name))); }
                ret.value = value += ""; if (name === "value" || value === elem.getAttribute(name)) { return value; }
            }
        }; attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) { var ret; if (!isXML) { return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null; } }; jQuery.valHooks.button = { get: function (elem, name) { var ret = elem.getAttributeNode(name); if (ret && ret.specified) { return ret.value; } }, set: nodeHook.set }; jQuery.attrHooks.contenteditable = { set: function (elem, value, name) { nodeHook.set(elem, value === "" ? false : value, name); } }; jQuery.each(["width", "height"], function (i, name) { jQuery.attrHooks[name] = { set: function (elem, value) { if (value === "") { elem.setAttribute(name, "auto"); return value; } } }; });
    }
    if (!support.style) { jQuery.attrHooks.style = { get: function (elem) { return elem.style.cssText || undefined; }, set: function (elem, value) { return (elem.style.cssText = value + ""); } }; }
    var rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i; jQuery.fn.extend({ prop: function (name, value) { return access(this, jQuery.prop, name, value, arguments.length > 1); }, removeProp: function (name) { name = jQuery.propFix[name] || name; return this.each(function () { try { this[name] = undefined; delete this[name]; } catch (e) { } }); } }); jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType; if (nType === 3 || nType === 8 || nType === 2) { return; }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) { name = jQuery.propFix[name] || name; hooks = jQuery.propHooks[name]; }
            if (value !== undefined) {
                if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) { return ret; }
                return (elem[name] = value);
            }
            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) { return ret; }
            return elem[name];
        }, propHooks: { tabIndex: { get: function (elem) { var tabindex = jQuery.find.attr(elem, "tabindex"); return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1; } } }, propFix: { "for": "htmlFor", "class": "className" }
    }); if (!support.hrefNormalized) { jQuery.each(["href", "src"], function (i, name) { jQuery.propHooks[name] = { get: function (elem) { return elem.getAttribute(name, 4); } }; }); }
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode; if (parent) { parent.selectedIndex; if (parent.parentNode) { parent.parentNode.selectedIndex; } }
                return null;
            }, set: function (elem) { var parent = elem.parentNode; if (parent) { parent.selectedIndex; if (parent.parentNode) { parent.parentNode.selectedIndex; } } }
        };
    }
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () { jQuery.propFix[this.toLowerCase()] = this; }); if (!support.enctype) { jQuery.propFix.enctype = "encoding"; }
    var rclass = /[\t\r\n\f]/g; function getClass(elem) { return jQuery.attr(elem, "class") || ""; }
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0; if (jQuery.isFunction(value)) { return this.each(function (j) { jQuery(this).addClass(value.call(this, j, getClass(this))); }); }
            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || []; while ((elem = this[i++])) {
                    curValue = getClass(elem); cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " "); if (cur) {
                        j = 0; while ((clazz = classes[j++])) { if (cur.indexOf(" " + clazz + " ") < 0) { cur += clazz + " "; } }
                        finalValue = jQuery.trim(cur); if (curValue !== finalValue) { jQuery.attr(elem, "class", finalValue); }
                    }
                }
            }
            return this;
        }, removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0; if (jQuery.isFunction(value)) { return this.each(function (j) { jQuery(this).removeClass(value.call(this, j, getClass(this))); }); }
            if (!arguments.length) { return this.attr("class", ""); }
            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || []; while ((elem = this[i++])) {
                    curValue = getClass(elem); cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " "); if (cur) {
                        j = 0; while ((clazz = classes[j++])) { while (cur.indexOf(" " + clazz + " ") > -1) { cur = cur.replace(" " + clazz + " ", " "); } }
                        finalValue = jQuery.trim(cur); if (curValue !== finalValue) { jQuery.attr(elem, "class", finalValue); }
                    }
                }
            }
            return this;
        }, toggleClass: function (value, stateVal) {
            var type = typeof value; if (typeof stateVal === "boolean" && type === "string") { return stateVal ? this.addClass(value) : this.removeClass(value); }
            if (jQuery.isFunction(value)) { return this.each(function (i) { jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal); }); }
            return this.each(function () {
                var className, i, self, classNames; if (type === "string") { i = 0; self = jQuery(this); classNames = value.match(rnotwhite) || []; while ((className = classNames[i++])) { if (self.hasClass(className)) { self.removeClass(className); } else { self.addClass(className); } } } else if (value === undefined || type === "boolean") {
                    className = getClass(this); if (className) { jQuery._data(this, "__className__", className); }
                    jQuery.attr(this, "class", className || value === false ? "" : jQuery._data(this, "__className__") || "");
                }
            });
        }, hasClass: function (selector) {
            var className, elem, i = 0; className = " " + selector + " "; while ((elem = this[i++])) { if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) { return true; } }
            return false;
        }
    }); jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) { jQuery.fn[name] = function (data, fn) { return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name); }; }); jQuery.fn.extend({ hover: function (fnOver, fnOut) { return this.mouseenter(fnOver).mouseleave(fnOut || fnOver); } }); var location = window.location; var nonce = jQuery.now(); var rquery = (/\?/); var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g; jQuery.parseJSON = function (data) {
        if (window.JSON && window.JSON.parse) { return window.JSON.parse(data + ""); }
        var requireNonComma, depth = null, str = jQuery.trim(data + ""); return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {
            if (requireNonComma && comma) { depth = 0; }
            if (depth === 0) { return token; }
            requireNonComma = open || comma; depth += !close - !open; return "";
        })) ? (Function("return " + str))() : jQuery.error("Invalid JSON: " + data);
    }; jQuery.parseXML = function (data) {
        var xml, tmp; if (!data || typeof data !== "string") { return null; }
        try { if (window.DOMParser) { tmp = new window.DOMParser(); xml = tmp.parseFromString(data, "text/xml"); } else { xml = new window.ActiveXObject("Microsoft.XMLDOM"); xml.async = "false"; xml.loadXML(data); } } catch (e) { xml = undefined; }
        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) { jQuery.error("Invalid XML: " + data); }
        return xml;
    }; var
        rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), ajaxLocation = location.href, ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; function addToPrefiltersOrTransports(structure) {
            return function (dataTypeExpression, func) {
                if (typeof dataTypeExpression !== "string") { func = dataTypeExpression; dataTypeExpression = "*"; }
                var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || []; if (jQuery.isFunction(func)) { while ((dataType = dataTypes[i++])) { if (dataType.charAt(0) === "+") { dataType = dataType.slice(1) || "*"; (structure[dataType] = structure[dataType] || []).unshift(func); } else { (structure[dataType] = structure[dataType] || []).push(func); } } }
            };
        }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = (structure === transports); function inspect(dataType) { var selected; inspected[dataType] = true; jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) { var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR); if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) { options.dataTypes.unshift(dataTypeOrTransport); inspect(dataTypeOrTransport); return false; } else if (seekingTransport) { return !(selected = dataTypeOrTransport); } }); return selected; }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {}; for (key in src) { if (src[key] !== undefined) { (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key]; } }
        if (deep) { jQuery.extend(true, target, deep); }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes; while (dataTypes[0] === "*") { dataTypes.shift(); if (ct === undefined) { ct = s.mimeType || jqXHR.getResponseHeader("Content-Type"); } }
        if (ct) { for (type in contents) { if (contents[type] && contents[type].test(ct)) { dataTypes.unshift(type); break; } } }
        if (dataTypes[0] in responses) { finalDataType = dataTypes[0]; } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) { finalDataType = type; break; }
                if (!firstDataType) { firstDataType = type; }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) { dataTypes.unshift(finalDataType); }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice(); if (dataTypes[1]) { for (conv in s.converters) { converters[conv.toLowerCase()] = s.converters[conv]; } }
        current = dataTypes.shift(); while (current) {
            if (s.responseFields[current]) { jqXHR[s.responseFields[current]] = response; }
            if (!prev && isSuccess && s.dataFilter) { response = s.dataFilter(response, s.dataType); }
            prev = current; current = dataTypes.shift(); if (current) {
                if (current === "*") { current = prev; } else if (prev !== "*" && prev !== current) {
                    conv = converters[prev + " " + current] || converters["* " + current]; if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(" "); if (tmp[1] === current) {
                                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]]; if (conv) {
                                    if (conv === true) { conv = converters[conv2]; } else if (converters[conv2] !== true) { current = tmp[0]; dataTypes.unshift(tmp[1]); }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) { if (conv && s["throws"]) { response = conv(response); } else { try { response = conv(response); } catch (e) { return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current }; } } }
                }
            }
        }
        return { state: "success", data: response };
    }
    jQuery.extend({
        active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: ajaxLocation, type: "GET", isLocal: rlocalProtocol.test(ajaxLocParts[1]), global: true, processData: true, async: true, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": allTypes, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML }, flatOptions: { url: true, context: true } }, ajaxSetup: function (target, settings) { return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target); }, ajaxPrefilter: addToPrefiltersOrTransports(prefilters), ajaxTransport: addToPrefiltersOrTransports(transports), ajax: function (url, options) {
            if (typeof url === "object") { options = url; url = undefined; }
            options = options || {}; var
                parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                    readyState: 0, getResponseHeader: function (key) {
                        var match; if (state === 2) {
                            if (!responseHeaders) { responseHeaders = {}; while ((match = rheaders.exec(responseHeadersString))) { responseHeaders[match[1].toLowerCase()] = match[2]; } }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    }, getAllResponseHeaders: function () { return state === 2 ? responseHeadersString : null; }, setRequestHeader: function (name, value) {
                        var lname = name.toLowerCase(); if (!state) { name = requestHeadersNames[lname] = requestHeadersNames[lname] || name; requestHeaders[name] = value; }
                        return this;
                    }, overrideMimeType: function (type) {
                        if (!state) { s.mimeType = type; }
                        return this;
                    }, statusCode: function (map) {
                        var code; if (map) { if (state < 2) { for (code in map) { statusCode[code] = [statusCode[code], map[code]]; } } else { jqXHR.always(map[jqXHR.status]); } }
                        return this;
                    }, abort: function (statusText) {
                        var finalText = statusText || strAbort; if (transport) { transport.abort(finalText); }
                        done(0, finalText); return this;
                    }
                }; deferred.promise(jqXHR).complete = completeDeferred.add; jqXHR.success = jqXHR.done; jqXHR.error = jqXHR.fail; s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//"); s.type = options.method || options.type || s.method || s.type; s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""]; if (s.crossDomain == null) { parts = rurl.exec(s.url.toLowerCase()); s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443")))); }
            if (s.data && s.processData && typeof s.data !== "string") { s.data = jQuery.param(s.data, s.traditional); }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); if (state === 2) { return jqXHR; }
            fireGlobals = jQuery.event && s.global; if (fireGlobals && jQuery.active++ === 0) { jQuery.event.trigger("ajaxStart"); }
            s.type = s.type.toUpperCase(); s.hasContent = !rnoContent.test(s.type); cacheURL = s.url; if (!s.hasContent) {
                if (s.data) { cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data); delete s.data; }
                if (s.cache === false) { s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++; }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) { jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]); }
                if (jQuery.etag[cacheURL]) { jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]); }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) { jqXHR.setRequestHeader("Content-Type", s.contentType); }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] +
                (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); for (i in s.headers) { jqXHR.setRequestHeader(i, s.headers[i]); }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) { return jqXHR.abort(); }
            strAbort = "abort"; for (i in { success: 1, error: 1, complete: 1 }) { jqXHR[i](s[i]); }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); if (!transport) { done(-1, "No Transport"); } else {
                jqXHR.readyState = 1; if (fireGlobals) { globalEventContext.trigger("ajaxSend", [jqXHR, s]); }
                if (state === 2) { return jqXHR; }
                if (s.async && s.timeout > 0) { timeoutTimer = window.setTimeout(function () { jqXHR.abort("timeout"); }, s.timeout); }
                try { state = 1; transport.send(requestHeaders, done); } catch (e) { if (state < 2) { done(-1, e); } else { throw e; } }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText; if (state === 2) { return; }
                state = 2; if (timeoutTimer) { window.clearTimeout(timeoutTimer); }
                transport = undefined; responseHeadersString = headers || ""; jqXHR.readyState = status > 0 ? 4 : 0; isSuccess = status >= 200 && status < 300 || status === 304; if (responses) { response = ajaxHandleResponses(s, jqXHR, responses); }
                response = ajaxConvert(s, response, jqXHR, isSuccess); if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified"); if (modified) { jQuery.lastModified[cacheURL] = modified; }
                        modified = jqXHR.getResponseHeader("etag"); if (modified) { jQuery.etag[cacheURL] = modified; }
                    }
                    if (status === 204 || s.type === "HEAD") { statusText = "nocontent"; } else if (status === 304) { statusText = "notmodified"; } else { statusText = response.state; success = response.data; error = response.error; isSuccess = !error; }
                } else { error = statusText; if (status || !statusText) { statusText = "error"; if (status < 0) { status = 0; } } }
                jqXHR.status = status; jqXHR.statusText = (nativeStatusText || statusText) + ""; if (isSuccess) { deferred.resolveWith(callbackContext, [success, statusText, jqXHR]); } else { deferred.rejectWith(callbackContext, [jqXHR, statusText, error]); }
                jqXHR.statusCode(statusCode); statusCode = undefined; if (fireGlobals) { globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]); }
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]); if (fireGlobals) { globalEventContext.trigger("ajaxComplete", [jqXHR, s]); if (!(--jQuery.active)) { jQuery.event.trigger("ajaxStop"); } }
            }
            return jqXHR;
        }, getJSON: function (url, data, callback) { return jQuery.get(url, data, callback, "json"); }, getScript: function (url, callback) { return jQuery.get(url, undefined, callback, "script"); }
    }); jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) { type = type || callback; callback = data; data = undefined; }
            return jQuery.ajax(jQuery.extend({ url: url, type: method, dataType: type, data: data, success: callback }, jQuery.isPlainObject(url) && url));
        };
    }); jQuery._evalUrl = function (url) { return jQuery.ajax({ url: url, type: "GET", dataType: "script", cache: true, async: false, global: false, "throws": true }); }; jQuery.fn.extend({
        wrapAll: function (html) {
            if (jQuery.isFunction(html)) { return this.each(function (i) { jQuery(this).wrapAll(html.call(this, i)); }); }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true); if (this[0].parentNode) { wrap.insertBefore(this[0]); }
                wrap.map(function () {
                    var elem = this; while (elem.firstChild && elem.firstChild.nodeType === 1) { elem = elem.firstChild; }
                    return elem;
                }).append(this);
            }
            return this;
        }, wrapInner: function (html) {
            if (jQuery.isFunction(html)) { return this.each(function (i) { jQuery(this).wrapInner(html.call(this, i)); }); }
            return this.each(function () { var self = jQuery(this), contents = self.contents(); if (contents.length) { contents.wrapAll(html); } else { self.append(html); } });
        }, wrap: function (html) { var isFunction = jQuery.isFunction(html); return this.each(function (i) { jQuery(this).wrapAll(isFunction ? html.call(this, i) : html); }); }, unwrap: function () { return this.parent().each(function () { if (!jQuery.nodeName(this, "body")) { jQuery(this).replaceWith(this.childNodes); } }).end(); }
    }); function getDisplay(elem) { return elem.style && elem.style.display || jQuery.css(elem, "display"); }
    function filterHidden(elem) {
        if (!jQuery.contains(elem.ownerDocument || document, elem)) { return true; }
        while (elem && elem.nodeType === 1) {
            if (getDisplay(elem) === "none" || elem.type === "hidden") { return true; }
            elem = elem.parentNode;
        }
        return false;
    }
    jQuery.expr.filters.hidden = function (elem) { return support.reliableHiddenOffsets() ? (elem.offsetWidth <= 0 && elem.offsetHeight <= 0 && !elem.getClientRects().length) : filterHidden(elem); }; jQuery.expr.filters.visible = function (elem) { return !jQuery.expr.filters.hidden(elem); }; var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i; function buildParams(prefix, obj, traditional, add) { var name; if (jQuery.isArray(obj)) { jQuery.each(obj, function (i, v) { if (traditional || rbracket.test(prefix)) { add(prefix, v); } else { buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add); } }); } else if (!traditional && jQuery.type(obj) === "object") { for (name in obj) { buildParams(prefix + "[" + name + "]", obj[name], traditional, add); } } else { add(prefix, obj); } }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) { value = jQuery.isFunction(value) ? value() : (value == null ? "" : value); s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value); }; if (traditional === undefined) { traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional; }
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) { jQuery.each(a, function () { add(this.name, this.value); }); } else { for (prefix in a) { buildParams(prefix, a[prefix], traditional, add); } }
        return s.join("&").replace(r20, "+");
    }; jQuery.fn.extend({ serialize: function () { return jQuery.param(this.serializeArray()); }, serializeArray: function () { return this.map(function () { var elements = jQuery.prop(this, "elements"); return elements ? jQuery.makeArray(elements) : this; }).filter(function () { var type = this.type; return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type)); }).map(function (i, elem) { var val = jQuery(this).val(); return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) { return { name: elem.name, value: val.replace(rCRLF, "\r\n") }; }) : { name: elem.name, value: val.replace(rCRLF, "\r\n") }; }).get(); } }); jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ? function () {
        if (this.isLocal) { return createActiveXHR(); }
        if (document.documentMode > 8) { return createStandardXHR(); }
        return /^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();
    } : createStandardXHR; var xhrId = 0, xhrCallbacks = {}, xhrSupported = jQuery.ajaxSettings.xhr(); if (window.attachEvent) { window.attachEvent("onunload", function () { for (var key in xhrCallbacks) { xhrCallbacks[key](undefined, true); } }); }
    support.cors = !!xhrSupported && ("withCredentials" in xhrSupported); xhrSupported = support.ajax = !!xhrSupported; if (xhrSupported) {
        jQuery.ajaxTransport(function (options) {
            if (!options.crossDomain || support.cors) {
                var callback; return {
                    send: function (headers, complete) {
                        var i, xhr = options.xhr(), id = ++xhrId; xhr.open(options.type, options.url, options.async, options.username, options.password); if (options.xhrFields) { for (i in options.xhrFields) { xhr[i] = options.xhrFields[i]; } }
                        if (options.mimeType && xhr.overrideMimeType) { xhr.overrideMimeType(options.mimeType); }
                        if (!options.crossDomain && !headers["X-Requested-With"]) { headers["X-Requested-With"] = "XMLHttpRequest"; }
                        for (i in headers) { if (headers[i] !== undefined) { xhr.setRequestHeader(i, headers[i] + ""); } }
                        xhr.send((options.hasContent && options.data) || null); callback = function (_, isAbort) {
                            var status, statusText, responses; if (callback && (isAbort || xhr.readyState === 4)) {
                                delete xhrCallbacks[id]; callback = undefined; xhr.onreadystatechange = jQuery.noop; if (isAbort) { if (xhr.readyState !== 4) { xhr.abort(); } } else {
                                    responses = {}; status = xhr.status; if (typeof xhr.responseText === "string") { responses.text = xhr.responseText; }
                                    try { statusText = xhr.statusText; } catch (e) { statusText = ""; }
                                    if (!status && options.isLocal && !options.crossDomain) { status = responses.text ? 200 : 404; } else if (status === 1223) { status = 204; }
                                }
                            }
                            if (responses) { complete(status, statusText, responses, xhr.getAllResponseHeaders()); }
                        }; if (!options.async) { callback(); } else if (xhr.readyState === 4) { window.setTimeout(callback); } else { xhr.onreadystatechange = xhrCallbacks[id] = callback; }
                    }, abort: function () { if (callback) { callback(undefined, true); } }
                };
            }
        });
    }
    function createStandardXHR() { try { return new window.XMLHttpRequest(); } catch (e) { } }
    function createActiveXHR() { try { return new window.ActiveXObject("Microsoft.XMLHTTP"); } catch (e) { } }
    jQuery.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function (text) { jQuery.globalEval(text); return text; } } }); jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) { s.cache = false; }
        if (s.crossDomain) { s.type = "GET"; s.global = false; }
    }); jQuery.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement; return {
                send: function (_, callback) {
                    script = document.createElement("script"); script.async = true; if (s.scriptCharset) { script.charset = s.scriptCharset; }
                    script.src = s.url; script.onload = script.onreadystatechange = function (_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null; if (script.parentNode) { script.parentNode.removeChild(script); }
                            script = null; if (!isAbort) { callback(200, "success"); }
                        }
                    }; head.insertBefore(script, head.firstChild);
                }, abort: function () { if (script) { script.onload(undefined, true); } }
            };
        }
    }); var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/; jQuery.ajaxSetup({ jsonp: "callback", jsonpCallback: function () { var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++)); this[callback] = true; return callback; } }); jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; if (jsonProp) { s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName); } else if (s.jsonp !== false) { s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName; }
            s.converters["script json"] = function () {
                if (!responseContainer) { jQuery.error(callbackName + " was not called"); }
                return responseContainer[0];
            }; s.dataTypes[0] = "json"; overwritten = window[callbackName]; window[callbackName] = function () { responseContainer = arguments; }; jqXHR.always(function () {
                if (overwritten === undefined) { jQuery(window).removeProp(callbackName); } else { window[callbackName] = overwritten; }
                if (s[callbackName]) { s.jsonpCallback = originalSettings.jsonpCallback; oldCallbacks.push(callbackName); }
                if (responseContainer && jQuery.isFunction(overwritten)) { overwritten(responseContainer[0]); }
                responseContainer = overwritten = undefined;
            }); return "script";
        }
    }); jQuery.parseHTML = function (data, context, keepScripts) {
        if (!data || typeof data !== "string") { return null; }
        if (typeof context === "boolean") { keepScripts = context; context = false; }
        context = context || document; var parsed = rsingleTag.exec(data), scripts = !keepScripts && []; if (parsed) { return [context.createElement(parsed[1])]; }
        parsed = buildFragment([data], context, scripts); if (scripts && scripts.length) { jQuery(scripts).remove(); }
        return jQuery.merge([], parsed.childNodes);
    }; var _load = jQuery.fn.load; jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== "string" && _load) { return _load.apply(this, arguments); }
        var selector, type, response, self = this, off = url.indexOf(" "); if (off > -1) { selector = jQuery.trim(url.slice(off, url.length)); url = url.slice(0, off); }
        if (jQuery.isFunction(params)) { callback = params; params = undefined; } else if (params && typeof params === "object") { type = "POST"; }
        if (self.length > 0) { jQuery.ajax({ url: url, type: type || "GET", dataType: "html", data: params }).done(function (responseText) { response = arguments; self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText); }).always(callback && function (jqXHR, status) { self.each(function () { callback.apply(this, response || [jqXHR.responseText, status, jqXHR]); }); }); }
        return this;
    }; jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) { jQuery.fn[type] = function (fn) { return this.on(type, fn); }; }); jQuery.expr.filters.animated = function (elem) { return jQuery.grep(jQuery.timers, function (fn) { return elem === fn.elem; }).length; }; function getWindow(elem) { return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false; }
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {}; if (position === "static") { elem.style.position = "relative"; }
            curOffset = curElem.offset(); curCSSTop = jQuery.css(elem, "top"); curCSSLeft = jQuery.css(elem, "left"); calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1; if (calculatePosition) { curPosition = curElem.position(); curTop = curPosition.top; curLeft = curPosition.left; } else { curTop = parseFloat(curCSSTop) || 0; curLeft = parseFloat(curCSSLeft) || 0; }
            if (jQuery.isFunction(options)) { options = options.call(elem, i, jQuery.extend({}, curOffset)); }
            if (options.top != null) { props.top = (options.top - curOffset.top) + curTop; }
            if (options.left != null) { props.left = (options.left - curOffset.left) + curLeft; }
            if ("using" in options) { options.using.call(elem, props); } else { curElem.css(props); }
        }
    }; jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) { return options === undefined ? this : this.each(function (i) { jQuery.offset.setOffset(this, options, i); }); }
            var docElem, win, box = { top: 0, left: 0 }, elem = this[0], doc = elem && elem.ownerDocument; if (!doc) { return; }
            docElem = doc.documentElement; if (!jQuery.contains(docElem, elem)) { return box; }
            if (typeof elem.getBoundingClientRect !== "undefined") { box = elem.getBoundingClientRect(); }
            win = getWindow(doc); return { top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0), left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0) };
        }, position: function () {
            if (!this[0]) { return; }
            var offsetParent, offset, parentOffset = { top: 0, left: 0 }, elem = this[0]; if (jQuery.css(elem, "position") === "fixed") { offset = elem.getBoundingClientRect(); } else {
                offsetParent = this.offsetParent(); offset = this.offset(); if (!jQuery.nodeName(offsetParent[0], "html")) { parentOffset = offsetParent.offset(); }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true); parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
            }
            return { top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true), left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true) };
        }, offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent; while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) { offsetParent = offsetParent.offsetParent; }
                return offsetParent || documentElement;
            });
        }
    }); jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
        var top = /Y/.test(prop); jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win = getWindow(elem); if (val === undefined) { return win ? (prop in win) ? win[prop] : win.document.documentElement[method] : elem[method]; }
                if (win) { win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop()); } else { elem[method] = val; }
            }, method, val, arguments.length, null);
        };
    }); jQuery.each(["top", "left"], function (i, prop) { jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) { if (computed) { computed = curCSS(elem, prop); return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed; } }); }); jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border"); return access(this, function (elem, type, value) {
                    var doc; if (jQuery.isWindow(elem)) { return elem.document.documentElement["client" + name]; }
                    if (elem.nodeType === 9) { doc = elem.documentElement; return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]); }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    }); jQuery.fn.extend({ bind: function (types, data, fn) { return this.on(types, null, data, fn); }, unbind: function (types, fn) { return this.off(types, null, fn); }, delegate: function (selector, types, data, fn) { return this.on(types, selector, data, fn); }, undelegate: function (selector, types, fn) { return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn); } }); jQuery.fn.size = function () { return this.length; }; jQuery.fn.andSelf = jQuery.fn.addBack; if (typeof define === "function" && define.amd) { define("jquery", [], function () { return jQuery; }); }
    var
        _jQuery = window.jQuery, _$ = window.$; jQuery.noConflict = function (deep) {
            if (window.$ === jQuery) { window.$ = _$; }
            if (deep && window.jQuery === jQuery) { window.jQuery = _jQuery; }
            return jQuery;
        }; if (!noGlobal) { window.jQuery = window.$ = jQuery; }
    return jQuery;
}));;/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery"); +function (a) { "use strict"; var b = a.fn.jquery.split(" ")[0].split("."); if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1 || b[0] > 3) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4") }(jQuery), +function (a) { "use strict"; function b() { var a = document.createElement("bootstrap"), b = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" }; for (var c in b) if (void 0 !== a.style[c]) return { end: b[c] }; return !1 } a.fn.emulateTransitionEnd = function (b) { var c = !1, d = this; a(this).one("bsTransitionEnd", function () { c = !0 }); var e = function () { c || a(d).trigger(a.support.transition.end) }; return setTimeout(e, b), this }, a(function () { a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = { bindType: a.support.transition.end, delegateType: a.support.transition.end, handle: function (b) { if (a(b.target).is(this)) return b.handleObj.handler.apply(this, arguments) } }) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var c = a(this), e = c.data("bs.alert"); e || c.data("bs.alert", e = new d(this)), "string" == typeof b && e[b].call(c) }) } var c = '[data-dismiss="alert"]', d = function (b) { a(b).on("click", c, this.close) }; d.VERSION = "3.3.7", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) { function c() { g.detach().trigger("closed.bs.alert").remove() } var e = a(this), f = e.attr("data-target"); f || (f = e.attr("href"), f = f && f.replace(/.*(?=#[^\s]*$)/, "")); var g = a("#" === f ? [] : f); b && b.preventDefault(), g.length || (g = e.closest(".alert")), g.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (g.removeClass("in"), a.support.transition && g.hasClass("fade") ? g.one("bsTransitionEnd", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c()) }; var e = a.fn.alert; a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () { return a.fn.alert = e, this }, a(document).on("click.bs.alert.data-api", c, d.prototype.close) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.button"), f = "object" == typeof b && b; e || d.data("bs.button", e = new c(this, f)), "toggle" == b ? e.toggle() : b && e.setState(b) }) } var c = function (b, d) { this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1 }; c.VERSION = "3.3.7", c.DEFAULTS = { loadingText: "loading..." }, c.prototype.setState = function (b) { var c = "disabled", d = this.$element, e = d.is("input") ? "val" : "html", f = d.data(); b += "Text", null == f.resetText && d.data("resetText", d[e]()), setTimeout(a.proxy(function () { d[e](null == f[b] ? this.options[b] : f[b]), "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c).prop(c, !0)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c).prop(c, !1)) }, this), 0) }, c.prototype.toggle = function () { var a = !0, b = this.$element.closest('[data-toggle="buttons"]'); if (b.length) { var c = this.$element.find("input"); "radio" == c.prop("type") ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active")) : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active")), c.prop("checked", this.$element.hasClass("active")), a && c.trigger("change") } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active") }; var d = a.fn.button; a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () { return a.fn.button = d, this }, a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) { var d = a(c.target).closest(".btn"); b.call(d, "toggle"), a(c.target).is('input[type="radio"], input[type="checkbox"]') || (c.preventDefault(), d.is("input,button") ? d.trigger("focus") : d.find("input:visible,button:visible").first().trigger("focus")) }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (b) { a(b.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(b.type)) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.carousel"), f = a.extend({}, c.DEFAULTS, d.data(), "object" == typeof b && b), g = "string" == typeof b ? b : f.slide; e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle() }) } var c = function (b, c) { this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options.pause && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this)) }; c.VERSION = "3.3.7", c.TRANSITION_DURATION = 600, c.DEFAULTS = { interval: 5e3, pause: "hover", wrap: !0, keyboard: !0 }, c.prototype.keydown = function (a) { if (!/input|textarea/i.test(a.target.tagName)) { switch (a.which) { case 37: this.prev(); break; case 39: this.next(); break; default: return }a.preventDefault() } }, c.prototype.cycle = function (b) { return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this }, c.prototype.getItemIndex = function (a) { return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active) }, c.prototype.getItemForDirection = function (a, b) { var c = this.getItemIndex(b), d = "prev" == a && 0 === c || "next" == a && c == this.$items.length - 1; if (d && !this.options.wrap) return b; var e = "prev" == a ? -1 : 1, f = (c + e) % this.$items.length; return this.$items.eq(f) }, c.prototype.to = function (a) { var b = this, c = this.getItemIndex(this.$active = this.$element.find(".item.active")); if (!(a > this.$items.length - 1 || a < 0)) return this.sliding ? this.$element.one("slid.bs.carousel", function () { b.to(a) }) : c == a ? this.pause().cycle() : this.slide(a > c ? "next" : "prev", this.$items.eq(a)) }, c.prototype.pause = function (b) { return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this }, c.prototype.next = function () { if (!this.sliding) return this.slide("next") }, c.prototype.prev = function () { if (!this.sliding) return this.slide("prev") }, c.prototype.slide = function (b, d) { var e = this.$element.find(".item.active"), f = d || this.getItemForDirection(b, e), g = this.interval, h = "next" == b ? "left" : "right", i = this; if (f.hasClass("active")) return this.sliding = !1; var j = f[0], k = a.Event("slide.bs.carousel", { relatedTarget: j, direction: h }); if (this.$element.trigger(k), !k.isDefaultPrevented()) { if (this.sliding = !0, g && this.pause(), this.$indicators.length) { this.$indicators.find(".active").removeClass("active"); var l = a(this.$indicators.children()[this.getItemIndex(f)]); l && l.addClass("active") } var m = a.Event("slid.bs.carousel", { relatedTarget: j, direction: h }); return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one("bsTransitionEnd", function () { f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass(["active", h].join(" ")), i.sliding = !1, setTimeout(function () { i.$element.trigger(m) }, 0) }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"), f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this } }; var d = a.fn.carousel; a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () { return a.fn.carousel = d, this }; var e = function (c) { var d, e = a(this), f = a(e.attr("data-target") || (d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, "")); if (f.hasClass("carousel")) { var g = a.extend({}, f.data(), e.data()), h = e.attr("data-slide-to"); h && (g.interval = !1), b.call(f, g), h && f.data("bs.carousel").to(h), c.preventDefault() } }; a(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), a(window).on("load", function () { a('[data-ride="carousel"]').each(function () { var c = a(this); b.call(c, c.data()) }) }) }(jQuery), +function (a) { "use strict"; function b(b) { var c, d = b.attr("data-target") || (c = b.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, ""); return a(d) } function c(b) { return this.each(function () { var c = a(this), e = c.data("bs.collapse"), f = a.extend({}, d.DEFAULTS, c.data(), "object" == typeof b && b); !e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data("bs.collapse", e = new d(this, f)), "string" == typeof b && e[b]() }) } var d = function (b, c) { this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle="collapse"][href="#' + b.id + '"],[data-toggle="collapse"][data-target="#' + b.id + '"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle() }; d.VERSION = "3.3.7", d.TRANSITION_DURATION = 350, d.DEFAULTS = { toggle: !0 }, d.prototype.dimension = function () { var a = this.$element.hasClass("width"); return a ? "width" : "height" }, d.prototype.show = function () { if (!this.transitioning && !this.$element.hasClass("in")) { var b, e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing"); if (!(e && e.length && (b = e.data("bs.collapse"), b && b.transitioning))) { var f = a.Event("show.bs.collapse"); if (this.$element.trigger(f), !f.isDefaultPrevented()) { e && e.length && (c.call(e, "hide"), b || e.data("bs.collapse", null)); var g = this.dimension(); this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1; var h = function () { this.$element.removeClass("collapsing").addClass("collapse in")[g](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse") }; if (!a.support.transition) return h.call(this); var i = a.camelCase(["scroll", g].join("-")); this.$element.one("bsTransitionEnd", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]) } } } }, d.prototype.hide = function () { if (!this.transitioning && this.$element.hasClass("in")) { var b = a.Event("hide.bs.collapse"); if (this.$element.trigger(b), !b.isDefaultPrevented()) { var c = this.dimension(); this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1; var e = function () { this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse") }; return a.support.transition ? void this.$element[c](0).one("bsTransitionEnd", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this) } } }, d.prototype.toggle = function () { this[this.$element.hasClass("in") ? "hide" : "show"]() }, d.prototype.getParent = function () { return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each(a.proxy(function (c, d) { var e = a(d); this.addAriaAndCollapsedClass(b(e), e) }, this)).end() }, d.prototype.addAriaAndCollapsedClass = function (a, b) { var c = a.hasClass("in"); a.attr("aria-expanded", c), b.toggleClass("collapsed", !c).attr("aria-expanded", c) }; var e = a.fn.collapse; a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () { return a.fn.collapse = e, this }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) { var e = a(this); e.attr("data-target") || d.preventDefault(); var f = b(e), g = f.data("bs.collapse"), h = g ? "toggle" : e.data(); c.call(f, h) }) }(jQuery), +function (a) { "use strict"; function b(b) { var c = b.attr("data-target"); c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, "")); var d = c && a(c); return d && d.length ? d : b.parent() } function c(c) { c && 3 === c.which || (a(e).remove(), a(f).each(function () { var d = a(this), e = b(d), f = { relatedTarget: this }; e.hasClass("open") && (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event("hide.bs.dropdown", f)), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger(a.Event("hidden.bs.dropdown", f))))) })) } function d(b) { return this.each(function () { var c = a(this), d = c.data("bs.dropdown"); d || c.data("bs.dropdown", d = new g(this)), "string" == typeof b && d[b].call(c) }) } var e = ".dropdown-backdrop", f = '[data-toggle="dropdown"]', g = function (b) { a(b).on("click.bs.dropdown", this.toggle) }; g.VERSION = "3.3.7", g.prototype.toggle = function (d) { var e = a(this); if (!e.is(".disabled, :disabled")) { var f = b(e), g = f.hasClass("open"); if (c(), !g) { "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", c); var h = { relatedTarget: this }; if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return; e.trigger("focus").attr("aria-expanded", "true"), f.toggleClass("open").trigger(a.Event("shown.bs.dropdown", h)) } return !1 } }, g.prototype.keydown = function (c) { if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) { var d = a(this); if (c.preventDefault(), c.stopPropagation(), !d.is(".disabled, :disabled")) { var e = b(d), g = e.hasClass("open"); if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger("focus"), d.trigger("click"); var h = " li:not(.disabled):visible a", i = e.find(".dropdown-menu" + h); if (i.length) { var j = i.index(c.target); 38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger("focus") } } } }; var h = a.fn.dropdown; a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () { return a.fn.dropdown = h, this }, a(document).on("click.bs.dropdown.data-api", c).on("click.bs.dropdown.data-api", ".dropdown form", function (a) { a.stopPropagation() }).on("click.bs.dropdown.data-api", f, g.prototype.toggle).on("keydown.bs.dropdown.data-api", f, g.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", g.prototype.keydown) }(jQuery), +function (a) { "use strict"; function b(b, d) { return this.each(function () { var e = a(this), f = e.data("bs.modal"), g = a.extend({}, c.DEFAULTS, e.data(), "object" == typeof b && b); f || e.data("bs.modal", f = new c(this, g)), "string" == typeof b ? f[b](d) : g.show && f.show(d) }) } var c = function (b, c) { this.options = c, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () { this.$element.trigger("loaded.bs.modal") }, this)) }; c.VERSION = "3.3.7", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, c.prototype.toggle = function (a) { return this.isShown ? this.hide() : this.show(a) }, c.prototype.show = function (b) { var d = this, e = a.Event("show.bs.modal", { relatedTarget: b }); this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function () { d.$element.one("mouseup.dismiss.bs.modal", function (b) { a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0) }) }), this.backdrop(function () { var e = a.support.transition && d.$element.hasClass("fade"); d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass("in"), d.enforceFocus(); var f = a.Event("shown.bs.modal", { relatedTarget: b }); e ? d.$dialog.one("bsTransitionEnd", function () { d.$element.trigger("focus").trigger(f) }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger("focus").trigger(f) })) }, c.prototype.hide = function (b) { b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal()) }, c.prototype.enforceFocus = function () { a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (a) { document === a.target || this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus") }, this)) }, c.prototype.escape = function () { this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (a) { 27 == a.which && this.hide() }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal") }, c.prototype.resize = function () { this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal") }, c.prototype.hideModal = function () { var a = this; this.$element.hide(), this.backdrop(function () { a.$body.removeClass("modal-open"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger("hidden.bs.modal") }) }, c.prototype.removeBackdrop = function () { this.$backdrop && this.$backdrop.remove(), this.$backdrop = null }, c.prototype.backdrop = function (b) { var d = this, e = this.$element.hasClass("fade") ? "fade" : ""; if (this.isShown && this.options.backdrop) { var f = a.support.transition && e; if (this.$backdrop = a(document.createElement("div")).addClass("modal-backdrop " + e).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (a) { return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide())) }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return; f ? this.$backdrop.one("bsTransitionEnd", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b() } else if (!this.isShown && this.$backdrop) { this.$backdrop.removeClass("in"); var g = function () { d.removeBackdrop(), b && b() }; a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g() } else b && b() }, c.prototype.handleUpdate = function () { this.adjustDialog() }, c.prototype.adjustDialog = function () { var a = this.$element[0].scrollHeight > document.documentElement.clientHeight; this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : "" }) }, c.prototype.resetAdjustments = function () { this.$element.css({ paddingLeft: "", paddingRight: "" }) }, c.prototype.checkScrollbar = function () { var a = window.innerWidth; if (!a) { var b = document.documentElement.getBoundingClientRect(); a = b.right - Math.abs(b.left) } this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar() }, c.prototype.setScrollbar = function () { var a = parseInt(this.$body.css("padding-right") || 0, 10); this.originalBodyPad = document.body.style.paddingRight || "", this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth) }, c.prototype.resetScrollbar = function () { this.$body.css("padding-right", this.originalBodyPad) }, c.prototype.measureScrollbar = function () { var a = document.createElement("div"); a.className = "modal-scrollbar-measure", this.$body.append(a); var b = a.offsetWidth - a.clientWidth; return this.$body[0].removeChild(a), b }; var d = a.fn.modal; a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () { return a.fn.modal = d, this }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) { var d = a(this), e = d.attr("href"), f = a(d.attr("data-target") || e && e.replace(/.*(?=#[^\s]+$)/, "")), g = f.data("bs.modal") ? "toggle" : a.extend({ remote: !/#/.test(e) && e }, f.data(), d.data()); d.is("a") && c.preventDefault(), f.one("show.bs.modal", function (a) { a.isDefaultPrevented() || f.one("hidden.bs.modal", function () { d.is(":visible") && d.trigger("focus") }) }), b.call(f, g, this) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.tooltip"), f = "object" == typeof b && b; !e && /destroy|hide/.test(b) || (e || d.data("bs.tooltip", e = new c(this, f)), "string" == typeof b && e[b]()) }) } var c = function (a, b) { this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", a, b) }; c.VERSION = "3.3.7", c.TRANSITION_DURATION = 150, c.DEFAULTS = { animation: !0, placement: "top", selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, container: !1, viewport: { selector: "body", padding: 0 } }, c.prototype.init = function (b, c, d) { if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!"); for (var e = this.options.trigger.split(" "), f = e.length; f--;) { var g = e[f]; if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this)); else if ("manual" != g) { var h = "hover" == g ? "mouseenter" : "focusin", i = "hover" == g ? "mouseleave" : "focusout"; this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this)) } } this.options.selector ? this._options = a.extend({}, this.options, { trigger: "manual", selector: "" }) : this.fixTitle() }, c.prototype.getDefaults = function () { return c.DEFAULTS }, c.prototype.getOptions = function (b) { return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = { show: b.delay, hide: b.delay }), b }, c.prototype.getDelegateOptions = function () { var b = {}, c = this.getDefaults(); return this._options && a.each(this._options, function (a, d) { c[a] != d && (b[a] = d) }), b }, c.prototype.enter = function (b) { var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type); return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusin" == b.type ? "focus" : "hover"] = !0), c.tip().hasClass("in") || "in" == c.hoverState ? void (c.hoverState = "in") : (clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () { "in" == c.hoverState && c.show() }, c.options.delay.show)) : c.show()) }, c.prototype.isInStateTrue = function () { for (var a in this.inState) if (this.inState[a]) return !0; return !1 }, c.prototype.leave = function (b) { var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type); if (c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusout" == b.type ? "focus" : "hover"] = !1), !c.isInStateTrue()) return clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () { "out" == c.hoverState && c.hide() }, c.options.delay.hide)) : c.hide() }, c.prototype.show = function () { var b = a.Event("show.bs." + this.type); if (this.hasContent() && this.enabled) { this.$element.trigger(b); var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]); if (b.isDefaultPrevented() || !d) return; var e = this, f = this.tip(), g = this.getUID(this.type); this.setContent(), f.attr("id", g), this.$element.attr("aria-describedby", g), this.options.animation && f.addClass("fade"); var h = "function" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement, i = /\s?auto?\s?/i, j = i.test(h); j && (h = h.replace(i, "") || "top"), f.detach().css({ top: 0, left: 0, display: "block" }).addClass(h).data("bs." + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger("inserted.bs." + this.type); var k = this.getPosition(), l = f[0].offsetWidth, m = f[0].offsetHeight; if (j) { var n = h, o = this.getPosition(this.$viewport); h = "bottom" == h && k.bottom + m > o.bottom ? "top" : "top" == h && k.top - m < o.top ? "bottom" : "right" == h && k.right + l > o.width ? "left" : "left" == h && k.left - l < o.left ? "right" : h, f.removeClass(n).addClass(h) } var p = this.getCalculatedOffset(h, k, l, m); this.applyPlacement(p, h); var q = function () { var a = e.hoverState; e.$element.trigger("shown.bs." + e.type), e.hoverState = null, "out" == a && e.leave(e) }; a.support.transition && this.$tip.hasClass("fade") ? f.one("bsTransitionEnd", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q() } }, c.prototype.applyPlacement = function (b, c) { var d = this.tip(), e = d[0].offsetWidth, f = d[0].offsetHeight, g = parseInt(d.css("margin-top"), 10), h = parseInt(d.css("margin-left"), 10); isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({ using: function (a) { d.css({ top: Math.round(a.top), left: Math.round(a.left) }) } }, b), 0), d.addClass("in"); var i = d[0].offsetWidth, j = d[0].offsetHeight; "top" == c && j != f && (b.top = b.top + f - j); var k = this.getViewportAdjustedDelta(c, b, i, j); k.left ? b.left += k.left : b.top += k.top; var l = /top|bottom/.test(c), m = l ? 2 * k.left - e + i : 2 * k.top - f + j, n = l ? "offsetWidth" : "offsetHeight"; d.offset(b), this.replaceArrow(m, d[0][n], l) }, c.prototype.replaceArrow = function (a, b, c) { this.arrow().css(c ? "left" : "top", 50 * (1 - a / b) + "%").css(c ? "top" : "left", "") }, c.prototype.setContent = function () { var a = this.tip(), b = this.getTitle(); a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right") }, c.prototype.hide = function (b) { function d() { "in" != e.hoverState && f.detach(), e.$element && e.$element.removeAttr("aria-describedby").trigger("hidden.bs." + e.type), b && b() } var e = this, f = a(this.$tip), g = a.Event("hide.bs." + this.type); if (this.$element.trigger(g), !g.isDefaultPrevented()) return f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this }, c.prototype.fixTitle = function () { var a = this.$element; (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "") }, c.prototype.hasContent = function () { return this.getTitle() }, c.prototype.getPosition = function (b) { b = b || this.$element; var c = b[0], d = "BODY" == c.tagName, e = c.getBoundingClientRect(); null == e.width && (e = a.extend({}, e, { width: e.right - e.left, height: e.bottom - e.top })); var f = window.SVGElement && c instanceof window.SVGElement, g = d ? { top: 0, left: 0 } : f ? null : b.offset(), h = { scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop() }, i = d ? { width: a(window).width(), height: a(window).height() } : null; return a.extend({}, e, h, i, g) }, c.prototype.getCalculatedOffset = function (a, b, c, d) { return "bottom" == a ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 } : "top" == a ? { top: b.top - d, left: b.left + b.width / 2 - c / 2 } : "left" == a ? { top: b.top + b.height / 2 - d / 2, left: b.left - c } : { top: b.top + b.height / 2 - d / 2, left: b.left + b.width } }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) { var e = { top: 0, left: 0 }; if (!this.$viewport) return e; var f = this.options.viewport && this.options.viewport.padding || 0, g = this.getPosition(this.$viewport); if (/right|left/.test(a)) { var h = b.top - f - g.scroll, i = b.top + f - g.scroll + d; h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i) } else { var j = b.left - f, k = b.left + f + c; j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k) } return e }, c.prototype.getTitle = function () { var a, b = this.$element, c = this.options; return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title) }, c.prototype.getUID = function (a) { do a += ~~(1e6 * Math.random()); while (document.getElementById(a)); return a }, c.prototype.tip = function () { if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!"); return this.$tip }, c.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow") }, c.prototype.enable = function () { this.enabled = !0 }, c.prototype.disable = function () { this.enabled = !1 }, c.prototype.toggleEnabled = function () { this.enabled = !this.enabled }, c.prototype.toggle = function (b) { var c = this; b && (c = a(b.currentTarget).data("bs." + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c) }, c.prototype.destroy = function () { var a = this; clearTimeout(this.timeout), this.hide(function () { a.$element.off("." + a.type).removeData("bs." + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null, a.$element = null }) }; var d = a.fn.tooltip; a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () { return a.fn.tooltip = d, this } }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.popover"), f = "object" == typeof b && b; !e && /destroy|hide/.test(b) || (e || d.data("bs.popover", e = new c(this, f)), "string" == typeof b && e[b]()) }) } var c = function (a, b) { this.init("popover", a, b) }; if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js"); c.VERSION = "3.3.7", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () { return c.DEFAULTS }, c.prototype.setContent = function () { var a = this.tip(), b = this.getTitle(), c = this.getContent(); a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide() }, c.prototype.hasContent = function () { return this.getTitle() || this.getContent() }, c.prototype.getContent = function () { var a = this.$element, b = this.options; return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content) }, c.prototype.arrow = function () { return this.$arrow = this.$arrow || this.tip().find(".arrow") }; var d = a.fn.popover; a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () { return a.fn.popover = d, this } }(jQuery), +function (a) { "use strict"; function b(c, d) { this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || "") + " .nav li > a", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this)), this.refresh(), this.process() } function c(c) { return this.each(function () { var d = a(this), e = d.data("bs.scrollspy"), f = "object" == typeof c && c; e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]() }) } b.VERSION = "3.3.7", b.DEFAULTS = { offset: 10 }, b.prototype.getScrollHeight = function () { return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight) }, b.prototype.refresh = function () { var b = this, c = "offset", d = 0; this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = "position", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () { var b = a(this), e = b.data("target") || b.attr("href"), f = /^#./.test(e) && a(e); return f && f.length && f.is(":visible") && [[f[c]().top + d, e]] || null }).sort(function (a, b) { return a[0] - b[0] }).each(function () { b.offsets.push(this[0]), b.targets.push(this[1]) }) }, b.prototype.process = function () { var a, b = this.$scrollElement.scrollTop() + this.options.offset, c = this.getScrollHeight(), d = this.options.offset + c - this.$scrollElement.height(), e = this.offsets, f = this.targets, g = this.activeTarget; if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a); if (g && b < e[0]) return this.activeTarget = null, this.clear(); for (a = e.length; a--;)g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]) }, b.prototype.activate = function (b) { this.activeTarget = b, this.clear(); var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]', d = a(c).parents("li").addClass("active"); d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy") }, b.prototype.clear = function () { a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active") }; var d = a.fn.scrollspy; a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () { return a.fn.scrollspy = d, this }, a(window).on("load.bs.scrollspy.data-api", function () { a('[data-spy="scroll"]').each(function () { var b = a(this); c.call(b, b.data()) }) }) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.tab"); e || d.data("bs.tab", e = new c(this)), "string" == typeof b && e[b]() }) } var c = function (b) { this.element = a(b) }; c.VERSION = "3.3.7", c.TRANSITION_DURATION = 150, c.prototype.show = function () { var b = this.element, c = b.closest("ul:not(.dropdown-menu)"), d = b.data("target"); if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) { var e = c.find(".active:last a"), f = a.Event("hide.bs.tab", { relatedTarget: b[0] }), g = a.Event("show.bs.tab", { relatedTarget: e[0] }); if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) { var h = a(d); this.activate(b.closest("li"), c), this.activate(h, h.parent(), function () { e.trigger({ type: "hidden.bs.tab", relatedTarget: b[0] }), b.trigger({ type: "shown.bs.tab", relatedTarget: e[0] }) }) } } }, c.prototype.activate = function (b, d, e) { function f() { g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), h ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu").length && b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), e && e() } var g = d.find("> .active"), h = e && a.support.transition && (g.length && g.hasClass("fade") || !!d.find("> .fade").length); g.length && h ? g.one("bsTransitionEnd", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass("in") }; var d = a.fn.tab; a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () { return a.fn.tab = d, this }; var e = function (c) { c.preventDefault(), b.call(a(this), "show") }; a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e) }(jQuery), +function (a) { "use strict"; function b(b) { return this.each(function () { var d = a(this), e = d.data("bs.affix"), f = "object" == typeof b && b; e || d.data("bs.affix", e = new c(this, f)), "string" == typeof b && e[b]() }) } var c = function (b, d) { this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition() }; c.VERSION = "3.3.7", c.RESET = "affix affix-top affix-bottom", c.DEFAULTS = { offset: 0, target: window }, c.prototype.getState = function (a, b, c, d) { var e = this.$target.scrollTop(), f = this.$element.offset(), g = this.$target.height(); if (null != c && "top" == this.affixed) return e < c && "top"; if ("bottom" == this.affixed) return null != c ? !(e + this.unpin <= f.top) && "bottom" : !(e + g <= a - d) && "bottom"; var h = null == this.affixed, i = h ? e : f.top, j = h ? g : b; return null != c && e <= c ? "top" : null != d && i + j >= a - d && "bottom" }, c.prototype.getPinnedOffset = function () { if (this.pinnedOffset) return this.pinnedOffset; this.$element.removeClass(c.RESET).addClass("affix"); var a = this.$target.scrollTop(), b = this.$element.offset(); return this.pinnedOffset = b.top - a }, c.prototype.checkPositionWithEventLoop = function () { setTimeout(a.proxy(this.checkPosition, this), 1) }, c.prototype.checkPosition = function () { if (this.$element.is(":visible")) { var b = this.$element.height(), d = this.options.offset, e = d.top, f = d.bottom, g = Math.max(a(document).height(), a(document.body).height()); "object" != typeof d && (f = e = d), "function" == typeof e && (e = d.top(this.$element)), "function" == typeof f && (f = d.bottom(this.$element)); var h = this.getState(g, b, e, f); if (this.affixed != h) { null != this.unpin && this.$element.css("top", ""); var i = "affix" + (h ? "-" + h : ""), j = a.Event(i + ".bs.affix"); if (this.$element.trigger(j), j.isDefaultPrevented()) return; this.affixed = h, this.unpin = "bottom" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix", "affixed") + ".bs.affix") } "bottom" == h && this.$element.offset({ top: g - b - f }) } }; var d = a.fn.affix; a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () { return a.fn.affix = d, this }, a(window).on("load", function () { a('[data-spy="affix"]').each(function () { var c = a(this), d = c.data(); d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d) }) }) }(jQuery);;/*!
 DataTables 1.10.18
 ©2008-2018 SpryMedia Ltd - datatables.net/license
*/(function (h) { "function" === typeof define && define.amd ? define(["jquery"], function (E) { return h(E, window, document) }) : "object" === typeof exports ? module.exports = function (E, H) { E || (E = window); H || (H = "undefined" !== typeof window ? require("jquery") : require("jquery")(E)); return h(H, E, E.document) } : h(jQuery, window, document) })(function (h, E, H, k) {
    function Z(a) { var b, c, d = {}; h.each(a, function (e) { if ((b = e.match(/^([^A-Z]+?)([A-Z])/)) && -1 !== "a aa ai ao as b fn i m o s ".indexOf(b[1] + " ")) c = e.replace(b[0], b[2].toLowerCase()), d[c] = e, "o" === b[1] && Z(a[e]) }); a._hungarianMap = d } function J(a, b, c) { a._hungarianMap || Z(a); var d; h.each(b, function (e) { d = a._hungarianMap[e]; if (d !== k && (c || b[d] === k)) "o" === d.charAt(0) ? (b[d] || (b[d] = {}), h.extend(!0, b[d], b[e]), J(a[d], b[d], c)) : b[d] = b[e] }) } function Ca(a) { var b = n.defaults.oLanguage, c = b.sDecimal; c && Da(c); if (a) { var d = a.sZeroRecords; !a.sEmptyTable && (d && "No data available in table" === b.sEmptyTable) && F(a, a, "sZeroRecords", "sEmptyTable"); !a.sLoadingRecords && (d && "Loading..." === b.sLoadingRecords) && F(a, a, "sZeroRecords", "sLoadingRecords"); a.sInfoThousands && (a.sThousands = a.sInfoThousands); (a = a.sDecimal) && c !== a && Da(a) } } function eb(a) { A(a, "ordering", "bSort"); A(a, "orderMulti", "bSortMulti"); A(a, "orderClasses", "bSortClasses"); A(a, "orderCellsTop", "bSortCellsTop"); A(a, "order", "aaSorting"); A(a, "orderFixed", "aaSortingFixed"); A(a, "paging", "bPaginate"); A(a, "pagingType", "sPaginationType"); A(a, "pageLength", "iDisplayLength"); A(a, "searching", "bFilter"); "boolean" === typeof a.sScrollX && (a.sScrollX = a.sScrollX ? "100%" : ""); "boolean" === typeof a.scrollX && (a.scrollX = a.scrollX ? "100%" : ""); if (a = a.aoSearchCols) for (var b = 0, c = a.length; b < c; b++)a[b] && J(n.models.oSearch, a[b]) } function fb(a) { A(a, "orderable", "bSortable"); A(a, "orderData", "aDataSort"); A(a, "orderSequence", "asSorting"); A(a, "orderDataType", "sortDataType"); var b = a.aDataSort; "number" === typeof b && !h.isArray(b) && (a.aDataSort = [b]) } function gb(a) { if (!n.__browser) { var b = {}; n.__browser = b; var c = h("<div/>").css({ position: "fixed", top: 0, left: -1 * h(E).scrollLeft(), height: 1, width: 1, overflow: "hidden" }).append(h("<div/>").css({ position: "absolute", top: 1, left: 1, width: 100, overflow: "scroll" }).append(h("<div/>").css({ width: "100%", height: 10 }))).appendTo("body"), d = c.children(), e = d.children(); b.barWidth = d[0].offsetWidth - d[0].clientWidth; b.bScrollOversize = 100 === e[0].offsetWidth && 100 !== d[0].clientWidth; b.bScrollbarLeft = 1 !== Math.round(e.offset().left); b.bBounding = c[0].getBoundingClientRect().width ? !0 : !1; c.remove() } h.extend(a.oBrowser, n.__browser); a.oScroll.iBarWidth = n.__browser.barWidth }
    function hb(a, b, c, d, e, f) { var g, j = !1; c !== k && (g = c, j = !0); for (; d !== e;)a.hasOwnProperty(d) && (g = j ? b(g, a[d], d, a) : a[d], j = !0, d += f); return g } function Ea(a, b) { var c = n.defaults.column, d = a.aoColumns.length, c = h.extend({}, n.models.oColumn, c, { nTh: b ? b : H.createElement("th"), sTitle: c.sTitle ? c.sTitle : b ? b.innerHTML : "", aDataSort: c.aDataSort ? c.aDataSort : [d], mData: c.mData ? c.mData : d, idx: d }); a.aoColumns.push(c); c = a.aoPreSearchCols; c[d] = h.extend({}, n.models.oSearch, c[d]); ka(a, d, h(b).data()) } function ka(a, b, c) { var b = a.aoColumns[b], d = a.oClasses, e = h(b.nTh); if (!b.sWidthOrig) { b.sWidthOrig = e.attr("width") || null; var f = (e.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/); f && (b.sWidthOrig = f[1]) } c !== k && null !== c && (fb(c), J(n.defaults.column, c), c.mDataProp !== k && !c.mData && (c.mData = c.mDataProp), c.sType && (b._sManualType = c.sType), c.className && !c.sClass && (c.sClass = c.className), c.sClass && e.addClass(c.sClass), h.extend(b, c), F(b, c, "sWidth", "sWidthOrig"), c.iDataSort !== k && (b.aDataSort = [c.iDataSort]), F(b, c, "aDataSort")); var g = b.mData, j = S(g), i = b.mRender ? S(b.mRender) : null, c = function (a) { return "string" === typeof a && -1 !== a.indexOf("@") }; b._bAttrSrc = h.isPlainObject(g) && (c(g.sort) || c(g.type) || c(g.filter)); b._setter = null; b.fnGetData = function (a, b, c) { var d = j(a, b, k, c); return i && b ? i(d, b, a, c) : d }; b.fnSetData = function (a, b, c) { return N(g)(a, b, c) }; "number" !== typeof g && (a._rowReadObject = !0); a.oFeatures.bSort || (b.bSortable = !1, e.addClass(d.sSortableNone)); a = -1 !== h.inArray("asc", b.asSorting); c = -1 !== h.inArray("desc", b.asSorting); !b.bSortable || !a && !c ? (b.sSortingClass = d.sSortableNone, b.sSortingClassJUI = "") : a && !c ? (b.sSortingClass = d.sSortableAsc, b.sSortingClassJUI = d.sSortJUIAscAllowed) : !a && c ? (b.sSortingClass = d.sSortableDesc, b.sSortingClassJUI = d.sSortJUIDescAllowed) : (b.sSortingClass = d.sSortable, b.sSortingClassJUI = d.sSortJUI) } function $(a) { if (!1 !== a.oFeatures.bAutoWidth) { var b = a.aoColumns; Fa(a); for (var c = 0, d = b.length; c < d; c++)b[c].nTh.style.width = b[c].sWidth } b = a.oScroll; ("" !== b.sY || "" !== b.sX) && la(a); r(a, null, "column-sizing", [a]) } function aa(a, b) { var c = ma(a, "bVisible"); return "number" === typeof c[b] ? c[b] : null } function ba(a, b) { var c = ma(a, "bVisible"), c = h.inArray(b, c); return -1 !== c ? c : null } function V(a) { var b = 0; h.each(a.aoColumns, function (a, d) { d.bVisible && "none" !== h(d.nTh).css("display") && b++ }); return b } function ma(a, b) { var c = []; h.map(a.aoColumns, function (a, e) { a[b] && c.push(e) }); return c } function Ga(a) { var b = a.aoColumns, c = a.aoData, d = n.ext.type.detect, e, f, g, j, i, h, l, q, t; e = 0; for (f = b.length; e < f; e++)if (l = b[e], t = [], !l.sType && l._sManualType) l.sType = l._sManualType; else if (!l.sType) { g = 0; for (j = d.length; g < j; g++) { i = 0; for (h = c.length; i < h; i++) { t[i] === k && (t[i] = B(a, i, e, "type")); q = d[g](t[i], a); if (!q && g !== d.length - 1) break; if ("html" === q) break } if (q) { l.sType = q; break } } l.sType || (l.sType = "string") } } function ib(a, b, c, d) { var e, f, g, j, i, m, l = a.aoColumns; if (b) for (e = b.length - 1; 0 <= e; e--) { m = b[e]; var q = m.targets !== k ? m.targets : m.aTargets; h.isArray(q) || (q = [q]); f = 0; for (g = q.length; f < g; f++)if ("number" === typeof q[f] && 0 <= q[f]) { for (; l.length <= q[f];)Ea(a); d(q[f], m) } else if ("number" === typeof q[f] && 0 > q[f]) d(l.length + q[f], m); else if ("string" === typeof q[f]) { j = 0; for (i = l.length; j < i; j++)("_all" == q[f] || h(l[j].nTh).hasClass(q[f])) && d(j, m) } } if (c) { e = 0; for (a = c.length; e < a; e++)d(e, c[e]) } } function O(a, b, c, d) { var e = a.aoData.length, f = h.extend(!0, {}, n.models.oRow, { src: c ? "dom" : "data", idx: e }); f._aData = b; a.aoData.push(f); for (var g = a.aoColumns, j = 0, i = g.length; j < i; j++)g[j].sType = null; a.aiDisplayMaster.push(e); b = a.rowIdFn(b); b !== k && (a.aIds[b] = f); (c || !a.oFeatures.bDeferRender) && Ha(a, e, c, d); return e } function na(a, b) { var c; b instanceof h || (b = h(b)); return b.map(function (b, e) { c = Ia(a, e); return O(a, c.data, e, c.cells) }) } function B(a, b, c, d) { var e = a.iDraw, f = a.aoColumns[c], g = a.aoData[b]._aData, j = f.sDefaultContent, i = f.fnGetData(g, d, { settings: a, row: b, col: c }); if (i === k) return a.iDrawError != e && null === j && (K(a, 0, "Requested unknown parameter " + ("function" == typeof f.mData ? "{function}" : "'" + f.mData + "'") + " for row " + b + ", column " + c, 4), a.iDrawError = e), j; if ((i === g || null === i) && null !== j && d !== k) i = j; else if ("function" === typeof i) return i.call(g); return null === i && "display" == d ? "" : i } function jb(a, b, c, d) { a.aoColumns[c].fnSetData(a.aoData[b]._aData, d, { settings: a, row: b, col: c }) } function Ja(a) { return h.map(a.match(/(\\.|[^\.])+/g) || [""], function (a) { return a.replace(/\\\./g, ".") }) } function S(a) { if (h.isPlainObject(a)) { var b = {}; h.each(a, function (a, c) { c && (b[a] = S(c)) }); return function (a, c, f, g) { var j = b[c] || b._; return j !== k ? j(a, c, f, g) : a } } if (null === a) return function (a) { return a }; if ("function" === typeof a) return function (b, c, f, g) { return a(b, c, f, g) }; if ("string" === typeof a && (-1 !== a.indexOf(".") || -1 !== a.indexOf("[") || -1 !== a.indexOf("("))) { var c = function (a, b, f) { var g, j; if ("" !== f) { j = Ja(f); for (var i = 0, m = j.length; i < m; i++) { f = j[i].match(ca); g = j[i].match(W); if (f) { j[i] = j[i].replace(ca, ""); "" !== j[i] && (a = a[j[i]]); g = []; j.splice(0, i + 1); j = j.join("."); if (h.isArray(a)) { i = 0; for (m = a.length; i < m; i++)g.push(c(a[i], b, j)) } a = f[0].substring(1, f[0].length - 1); a = "" === a ? g : g.join(a); break } else if (g) { j[i] = j[i].replace(W, ""); a = a[j[i]](); continue } if (null === a || a[j[i]] === k) return k; a = a[j[i]] } } return a }; return function (b, e) { return c(b, e, a) } } return function (b) { return b[a] } }
    function N(a) { if (h.isPlainObject(a)) return N(a._); if (null === a) return function () { }; if ("function" === typeof a) return function (b, d, e) { a(b, "set", d, e) }; if ("string" === typeof a && (-1 !== a.indexOf(".") || -1 !== a.indexOf("[") || -1 !== a.indexOf("("))) { var b = function (a, d, e) { var e = Ja(e), f; f = e[e.length - 1]; for (var g, j, i = 0, m = e.length - 1; i < m; i++) { g = e[i].match(ca); j = e[i].match(W); if (g) { e[i] = e[i].replace(ca, ""); a[e[i]] = []; f = e.slice(); f.splice(0, i + 1); g = f.join("."); if (h.isArray(d)) { j = 0; for (m = d.length; j < m; j++)f = {}, b(f, d[j], g), a[e[i]].push(f) } else a[e[i]] = d; return } j && (e[i] = e[i].replace(W, ""), a = a[e[i]](d)); if (null === a[e[i]] || a[e[i]] === k) a[e[i]] = {}; a = a[e[i]] } if (f.match(W)) a[f.replace(W, "")](d); else a[f.replace(ca, "")] = d }; return function (c, d) { return b(c, d, a) } } return function (b, d) { b[a] = d } } function Ka(a) { return D(a.aoData, "_aData") } function oa(a) { a.aoData.length = 0; a.aiDisplayMaster.length = 0; a.aiDisplay.length = 0; a.aIds = {} } function pa(a, b, c) { for (var d = -1, e = 0, f = a.length; e < f; e++)a[e] == b ? d = e : a[e] > b && a[e]--; -1 != d && c === k && a.splice(d, 1) } function da(a, b, c, d) { var e = a.aoData[b], f, g = function (c, d) { for (; c.childNodes.length;)c.removeChild(c.firstChild); c.innerHTML = B(a, b, d, "display") }; if ("dom" === c || (!c || "auto" === c) && "dom" === e.src) e._aData = Ia(a, e, d, d === k ? k : e._aData).data; else { var j = e.anCells; if (j) if (d !== k) g(j[d], d); else { c = 0; for (f = j.length; c < f; c++)g(j[c], c) } } e._aSortData = null; e._aFilterData = null; g = a.aoColumns; if (d !== k) g[d].sType = null; else { c = 0; for (f = g.length; c < f; c++)g[c].sType = null; La(a, e) } } function Ia(a, b, c, d) { var e = [], f = b.firstChild, g, j, i = 0, m, l = a.aoColumns, q = a._rowReadObject, d = d !== k ? d : q ? {} : [], t = function (a, b) { if ("string" === typeof a) { var c = a.indexOf("@"); -1 !== c && (c = a.substring(c + 1), N(a)(d, b.getAttribute(c))) } }, G = function (a) { if (c === k || c === i) j = l[i], m = h.trim(a.innerHTML), j && j._bAttrSrc ? (N(j.mData._)(d, m), t(j.mData.sort, a), t(j.mData.type, a), t(j.mData.filter, a)) : q ? (j._setter || (j._setter = N(j.mData)), j._setter(d, m)) : d[i] = m; i++ }; if (f) for (; f;) { g = f.nodeName.toUpperCase(); if ("TD" == g || "TH" == g) G(f), e.push(f); f = f.nextSibling } else { e = b.anCells; f = 0; for (g = e.length; f < g; f++)G(e[f]) } if (b = b.firstChild ? b : b.nTr) (b = b.getAttribute("id")) && N(a.rowId)(d, b); return { data: d, cells: e } } function Ha(a, b, c, d) { var e = a.aoData[b], f = e._aData, g = [], j, i, m, l, q; if (null === e.nTr) { j = c || H.createElement("tr"); e.nTr = j; e.anCells = g; j._DT_RowIndex = b; La(a, e); l = 0; for (q = a.aoColumns.length; l < q; l++) { m = a.aoColumns[l]; i = c ? d[l] : H.createElement(m.sCellType); i._DT_CellIndex = { row: b, column: l }; g.push(i); if ((!c || m.mRender || m.mData !== l) && (!h.isPlainObject(m.mData) || m.mData._ !== l + ".display")) i.innerHTML = B(a, b, l, "display"); m.sClass && (i.className += " " + m.sClass); m.bVisible && !c ? j.appendChild(i) : !m.bVisible && c && i.parentNode.removeChild(i); m.fnCreatedCell && m.fnCreatedCell.call(a.oInstance, i, B(a, b, l), f, b, l) } r(a, "aoRowCreatedCallback", null, [j, f, b, g]) } e.nTr.setAttribute("role", "row") } function La(a, b) { var c = b.nTr, d = b._aData; if (c) { var e = a.rowIdFn(d); e && (c.id = e); d.DT_RowClass && (e = d.DT_RowClass.split(" "), b.__rowc = b.__rowc ? qa(b.__rowc.concat(e)) : e, h(c).removeClass(b.__rowc.join(" ")).addClass(d.DT_RowClass)); d.DT_RowAttr && h(c).attr(d.DT_RowAttr); d.DT_RowData && h(c).data(d.DT_RowData) } } function kb(a) { var b, c, d, e, f, g = a.nTHead, j = a.nTFoot, i = 0 === h("th, td", g).length, m = a.oClasses, l = a.aoColumns; i && (e = h("<tr/>").appendTo(g)); b = 0; for (c = l.length; b < c; b++)f = l[b], d = h(f.nTh).addClass(f.sClass), i && d.appendTo(e), a.oFeatures.bSort && (d.addClass(f.sSortingClass), !1 !== f.bSortable && (d.attr("tabindex", a.iTabIndex).attr("aria-controls", a.sTableId), Ma(a, f.nTh, b))), f.sTitle != d[0].innerHTML && d.html(f.sTitle), Na(a, "header")(a, d, f, m); i && ea(a.aoHeader, g); h(g).find(">tr").attr("role", "row"); h(g).find(">tr>th, >tr>td").addClass(m.sHeaderTH); h(j).find(">tr>th, >tr>td").addClass(m.sFooterTH); if (null !== j) { a = a.aoFooter[0]; b = 0; for (c = a.length; b < c; b++)f = l[b], f.nTf = a[b].cell, f.sClass && h(f.nTf).addClass(f.sClass) } } function fa(a, b, c) { var d, e, f, g = [], j = [], i = a.aoColumns.length, m; if (b) { c === k && (c = !1); d = 0; for (e = b.length; d < e; d++) { g[d] = b[d].slice(); g[d].nTr = b[d].nTr; for (f = i - 1; 0 <= f; f--)!a.aoColumns[f].bVisible && !c && g[d].splice(f, 1); j.push([]) } d = 0; for (e = g.length; d < e; d++) { if (a = g[d].nTr) for (; f = a.firstChild;)a.removeChild(f); f = 0; for (b = g[d].length; f < b; f++)if (m = i = 1, j[d][f] === k) { a.appendChild(g[d][f].cell); for (j[d][f] = 1; g[d + i] !== k && g[d][f].cell == g[d + i][f].cell;)j[d + i][f] = 1, i++; for (; g[d][f + m] !== k && g[d][f].cell == g[d][f + m].cell;) { for (c = 0; c < i; c++)j[d + c][f + m] = 1; m++ } h(g[d][f].cell).attr("rowspan", i).attr("colspan", m) } } } } function P(a) { var b = r(a, "aoPreDrawCallback", "preDraw", [a]); if (-1 !== h.inArray(!1, b)) C(a, !1); else { var b = [], c = 0, d = a.asStripeClasses, e = d.length, f = a.oLanguage, g = a.iInitDisplayStart, j = "ssp" == y(a), i = a.aiDisplay; a.bDrawing = !0; g !== k && -1 !== g && (a._iDisplayStart = j ? g : g >= a.fnRecordsDisplay() ? 0 : g, a.iInitDisplayStart = -1); var g = a._iDisplayStart, m = a.fnDisplayEnd(); if (a.bDeferLoading) a.bDeferLoading = !1, a.iDraw++, C(a, !1); else if (j) { if (!a.bDestroying && !lb(a)) return } else a.iDraw++; if (0 !== i.length) { f = j ? a.aoData.length : m; for (j = j ? 0 : g; j < f; j++) { var l = i[j], q = a.aoData[l]; null === q.nTr && Ha(a, l); var t = q.nTr; if (0 !== e) { var G = d[c % e]; q._sRowStripe != G && (h(t).removeClass(q._sRowStripe).addClass(G), q._sRowStripe = G) } r(a, "aoRowCallback", null, [t, q._aData, c, j, l]); b.push(t); c++ } } else c = f.sZeroRecords, 1 == a.iDraw && "ajax" == y(a) ? c = f.sLoadingRecords : f.sEmptyTable && 0 === a.fnRecordsTotal() && (c = f.sEmptyTable), b[0] = h("<tr/>", { "class": e ? d[0] : "" }).append(h("<td />", { valign: "top", colSpan: V(a), "class": a.oClasses.sRowEmpty }).html(c))[0]; r(a, "aoHeaderCallback", "header", [h(a.nTHead).children("tr")[0], Ka(a), g, m, i]); r(a, "aoFooterCallback", "footer", [h(a.nTFoot).children("tr")[0], Ka(a), g, m, i]); d = h(a.nTBody); d.children().detach(); d.append(h(b)); r(a, "aoDrawCallback", "draw", [a]); a.bSorted = !1; a.bFiltered = !1; a.bDrawing = !1 } } function T(a, b) { var c = a.oFeatures, d = c.bFilter; c.bSort && mb(a); d ? ga(a, a.oPreviousSearch) : a.aiDisplay = a.aiDisplayMaster.slice(); !0 !== b && (a._iDisplayStart = 0); a._drawHold = b; P(a); a._drawHold = !1 } function nb(a) { var b = a.oClasses, c = h(a.nTable), c = h("<div/>").insertBefore(c), d = a.oFeatures, e = h("<div/>", { id: a.sTableId + "_wrapper", "class": b.sWrapper + (a.nTFoot ? "" : " " + b.sNoFooter) }); a.nHolding = c[0]; a.nTableWrapper = e[0]; a.nTableReinsertBefore = a.nTable.nextSibling; for (var f = a.sDom.split(""), g, j, i, m, l, q, k = 0; k < f.length; k++) { g = null; j = f[k]; if ("<" == j) { i = h("<div/>")[0]; m = f[k + 1]; if ("'" == m || '"' == m) { l = ""; for (q = 2; f[k + q] != m;)l += f[k + q], q++; "H" == l ? l = b.sJUIHeader : "F" == l && (l = b.sJUIFooter); -1 != l.indexOf(".") ? (m = l.split("."), i.id = m[0].substr(1, m[0].length - 1), i.className = m[1]) : "#" == l.charAt(0) ? i.id = l.substr(1, l.length - 1) : i.className = l; k += q } e.append(i); e = h(i) } else if (">" == j) e = e.parent(); else if ("l" == j && d.bPaginate && d.bLengthChange) g = ob(a); else if ("f" == j && d.bFilter) g = pb(a); else if ("r" == j && d.bProcessing) g = qb(a); else if ("t" == j) g = rb(a); else if ("i" == j && d.bInfo) g = sb(a); else if ("p" == j && d.bPaginate) g = tb(a); else if (0 !== n.ext.feature.length) { i = n.ext.feature; q = 0; for (m = i.length; q < m; q++)if (j == i[q].cFeature) { g = i[q].fnInit(a); break } } g && (i = a.aanFeatures, i[j] || (i[j] = []), i[j].push(g), e.append(g)) } c.replaceWith(e); a.nHolding = null } function ea(a, b) { var c = h(b).children("tr"), d, e, f, g, j, i, m, l, q, k; a.splice(0, a.length); f = 0; for (i = c.length; f < i; f++)a.push([]); f = 0; for (i = c.length; f < i; f++) { d = c[f]; for (e = d.firstChild; e;) { if ("TD" == e.nodeName.toUpperCase() || "TH" == e.nodeName.toUpperCase()) { l = 1 * e.getAttribute("colspan"); q = 1 * e.getAttribute("rowspan"); l = !l || 0 === l || 1 === l ? 1 : l; q = !q || 0 === q || 1 === q ? 1 : q; g = 0; for (j = a[f]; j[g];)g++; m = g; k = 1 === l ? !0 : !1; for (j = 0; j < l; j++)for (g = 0; g < q; g++)a[f + g][m + j] = { cell: e, unique: k }, a[f + g].nTr = d } e = e.nextSibling } } } function ra(a, b, c) { var d = []; c || (c = a.aoHeader, b && (c = [], ea(c, b))); for (var b = 0, e = c.length; b < e; b++)for (var f = 0, g = c[b].length; f < g; f++)if (c[b][f].unique && (!d[f] || !a.bSortCellsTop)) d[f] = c[b][f].cell; return d } function sa(a, b, c) { r(a, "aoServerParams", "serverParams", [b]); if (b && h.isArray(b)) { var d = {}, e = /(.*?)\[\]$/; h.each(b, function (a, b) { var c = b.name.match(e); c ? (c = c[0], d[c] || (d[c] = []), d[c].push(b.value)) : d[b.name] = b.value }); b = d } var f, g = a.ajax, j = a.oInstance, i = function (b) { r(a, null, "xhr", [a, b, a.jqXHR]); c(b) }; if (h.isPlainObject(g) && g.data) { f = g.data; var m = "function" === typeof f ? f(b, a) : f, b = "function" === typeof f && m ? m : h.extend(!0, b, m); delete g.data } m = { data: b, success: function (b) { var c = b.error || b.sError; c && K(a, 0, c); a.json = b; i(b) }, dataType: "json", cache: !1, type: a.sServerMethod, error: function (b, c) { var d = r(a, null, "xhr", [a, null, a.jqXHR]); -1 === h.inArray(!0, d) && ("parsererror" == c ? K(a, 0, "Invalid JSON response", 1) : 4 === b.readyState && K(a, 0, "Ajax error", 7)); C(a, !1) } }; a.oAjaxData = b; r(a, null, "preXhr", [a, b]); a.fnServerData ? a.fnServerData.call(j, a.sAjaxSource, h.map(b, function (a, b) { return { name: b, value: a } }), i, a) : a.sAjaxSource || "string" === typeof g ? a.jqXHR = h.ajax(h.extend(m, { url: g || a.sAjaxSource })) : "function" === typeof g ? a.jqXHR = g.call(j, b, i, a) : (a.jqXHR = h.ajax(h.extend(m, g)), g.data = f) } function lb(a) { return a.bAjaxDataGet ? (a.iDraw++, C(a, !0), sa(a, ub(a), function (b) { vb(a, b) }), !1) : !0 } function ub(a) { var b = a.aoColumns, c = b.length, d = a.oFeatures, e = a.oPreviousSearch, f = a.aoPreSearchCols, g, j = [], i, m, l, k = X(a); g = a._iDisplayStart; i = !1 !== d.bPaginate ? a._iDisplayLength : -1; var t = function (a, b) { j.push({ name: a, value: b }) }; t("sEcho", a.iDraw); t("iColumns", c); t("sColumns", D(b, "sName").join(",")); t("iDisplayStart", g); t("iDisplayLength", i); var G = { draw: a.iDraw, columns: [], order: [], start: g, length: i, search: { value: e.sSearch, regex: e.bRegex } }; for (g = 0; g < c; g++)m = b[g], l = f[g], i = "function" == typeof m.mData ? "function" : m.mData, G.columns.push({ data: i, name: m.sName, searchable: m.bSearchable, orderable: m.bSortable, search: { value: l.sSearch, regex: l.bRegex } }), t("mDataProp_" + g, i), d.bFilter && (t("sSearch_" + g, l.sSearch), t("bRegex_" + g, l.bRegex), t("bSearchable_" + g, m.bSearchable)), d.bSort && t("bSortable_" + g, m.bSortable); d.bFilter && (t("sSearch", e.sSearch), t("bRegex", e.bRegex)); d.bSort && (h.each(k, function (a, b) { G.order.push({ column: b.col, dir: b.dir }); t("iSortCol_" + a, b.col); t("sSortDir_" + a, b.dir) }), t("iSortingCols", k.length)); b = n.ext.legacy.ajax; return null === b ? a.sAjaxSource ? j : G : b ? j : G } function vb(a, b) { var c = ta(a, b), d = b.sEcho !== k ? b.sEcho : b.draw, e = b.iTotalRecords !== k ? b.iTotalRecords : b.recordsTotal, f = b.iTotalDisplayRecords !== k ? b.iTotalDisplayRecords : b.recordsFiltered; if (d) { if (1 * d < a.iDraw) return; a.iDraw = 1 * d } oa(a); a._iRecordsTotal = parseInt(e, 10); a._iRecordsDisplay = parseInt(f, 10); d = 0; for (e = c.length; d < e; d++)O(a, c[d]); a.aiDisplay = a.aiDisplayMaster.slice(); a.bAjaxDataGet = !1; P(a); a._bInitComplete || ua(a, b); a.bAjaxDataGet = !0; C(a, !1) } function ta(a, b) { var c = h.isPlainObject(a.ajax) && a.ajax.dataSrc !== k ? a.ajax.dataSrc : a.sAjaxDataProp; return "data" === c ? b.aaData || b[c] : "" !== c ? S(c)(b) : b } function pb(a) { var b = a.oClasses, c = a.sTableId, d = a.oLanguage, e = a.oPreviousSearch, f = a.aanFeatures, g = '<input type="search" class="' + b.sFilterInput + '"/>', j = d.sSearch, j = j.match(/_INPUT_/) ? j.replace("_INPUT_", g) : j + g, b = h("<div/>", { id: !f.f ? c + "_filter" : null, "class": b.sFilter }).append(h("<label/>").append(j)), f = function () { var b = !this.value ? "" : this.value; b != e.sSearch && (ga(a, { sSearch: b, bRegex: e.bRegex, bSmart: e.bSmart, bCaseInsensitive: e.bCaseInsensitive }), a._iDisplayStart = 0, P(a)) }, g = null !== a.searchDelay ? a.searchDelay : "ssp" === y(a) ? 400 : 0, i = h("input", b).val(e.sSearch).attr("placeholder", d.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT", g ? Oa(f, g) : f).on("keypress.DT", function (a) { if (13 == a.keyCode) return !1 }).attr("aria-controls", c); h(a.nTable).on("search.dt.DT", function (b, c) { if (a === c) try { i[0] !== H.activeElement && i.val(e.sSearch) } catch (d) { } }); return b[0] } function ga(a, b, c) { var d = a.oPreviousSearch, e = a.aoPreSearchCols, f = function (a) { d.sSearch = a.sSearch; d.bRegex = a.bRegex; d.bSmart = a.bSmart; d.bCaseInsensitive = a.bCaseInsensitive }; Ga(a); if ("ssp" != y(a)) { wb(a, b.sSearch, c, b.bEscapeRegex !== k ? !b.bEscapeRegex : b.bRegex, b.bSmart, b.bCaseInsensitive); f(b); for (b = 0; b < e.length; b++)xb(a, e[b].sSearch, b, e[b].bEscapeRegex !== k ? !e[b].bEscapeRegex : e[b].bRegex, e[b].bSmart, e[b].bCaseInsensitive); yb(a) } else f(b); a.bFiltered = !0; r(a, null, "search", [a]) } function yb(a) { for (var b = n.ext.search, c = a.aiDisplay, d, e, f = 0, g = b.length; f < g; f++) { for (var j = [], i = 0, m = c.length; i < m; i++)e = c[i], d = a.aoData[e], b[f](a, d._aFilterData, e, d._aData, i) && j.push(e); c.length = 0; h.merge(c, j) } } function xb(a, b, c, d, e, f) { if ("" !== b) { for (var g = [], j = a.aiDisplay, d = Pa(b, d, e, f), e = 0; e < j.length; e++)b = a.aoData[j[e]]._aFilterData[c], d.test(b) && g.push(j[e]); a.aiDisplay = g } } function wb(a, b, c, d, e, f) { var d = Pa(b, d, e, f), f = a.oPreviousSearch.sSearch, g = a.aiDisplayMaster, j, e = []; 0 !== n.ext.search.length && (c = !0); j = zb(a); if (0 >= b.length) a.aiDisplay = g.slice(); else { if (j || c || f.length > b.length || 0 !== b.indexOf(f) || a.bSorted) a.aiDisplay = g.slice(); b = a.aiDisplay; for (c = 0; c < b.length; c++)d.test(a.aoData[b[c]]._sFilterRow) && e.push(b[c]); a.aiDisplay = e } } function Pa(a, b, c, d) { a = b ? a : Qa(a); c && (a = "^(?=.*?" + h.map(a.match(/"[^"]+"|[^ ]+/g) || [""], function (a) { if ('"' === a.charAt(0)) var b = a.match(/^"(.*)"$/), a = b ? b[1] : a; return a.replace('"', "") }).join(")(?=.*?") + ").*$"); return RegExp(a, d ? "i" : "") } function zb(a) { var b = a.aoColumns, c, d, e, f, g, j, i, h, l = n.ext.type.search; c = !1; d = 0; for (f = a.aoData.length; d < f; d++)if (h = a.aoData[d], !h._aFilterData) { j = []; e = 0; for (g = b.length; e < g; e++)c = b[e], c.bSearchable ? (i = B(a, d, e, "filter"), l[c.sType] && (i = l[c.sType](i)), null === i && (i = ""), "string" !== typeof i && i.toString && (i = i.toString())) : i = "", i.indexOf && -1 !== i.indexOf("&") && (va.innerHTML = i, i = Wb ? va.textContent : va.innerText), i.replace && (i = i.replace(/[\r\n]/g, "")), j.push(i); h._aFilterData = j; h._sFilterRow = j.join("  "); c = !0 } return c } function Ab(a) { return { search: a.sSearch, smart: a.bSmart, regex: a.bRegex, caseInsensitive: a.bCaseInsensitive } } function Bb(a) { return { sSearch: a.search, bSmart: a.smart, bRegex: a.regex, bCaseInsensitive: a.caseInsensitive } } function sb(a) { var b = a.sTableId, c = a.aanFeatures.i, d = h("<div/>", { "class": a.oClasses.sInfo, id: !c ? b + "_info" : null }); c || (a.aoDrawCallback.push({ fn: Cb, sName: "information" }), d.attr("role", "status").attr("aria-live", "polite"), h(a.nTable).attr("aria-describedby", b + "_info")); return d[0] } function Cb(a) { var b = a.aanFeatures.i; if (0 !== b.length) { var c = a.oLanguage, d = a._iDisplayStart + 1, e = a.fnDisplayEnd(), f = a.fnRecordsTotal(), g = a.fnRecordsDisplay(), j = g ? c.sInfo : c.sInfoEmpty; g !== f && (j += " " + c.sInfoFiltered); j += c.sInfoPostFix; j = Db(a, j); c = c.fnInfoCallback; null !== c && (j = c.call(a.oInstance, a, d, e, f, g, j)); h(b).html(j) } } function Db(a, b) { var c = a.fnFormatNumber, d = a._iDisplayStart + 1, e = a._iDisplayLength, f = a.fnRecordsDisplay(), g = -1 === e; return b.replace(/_START_/g, c.call(a, d)).replace(/_END_/g, c.call(a, a.fnDisplayEnd())).replace(/_MAX_/g, c.call(a, a.fnRecordsTotal())).replace(/_TOTAL_/g, c.call(a, f)).replace(/_PAGE_/g, c.call(a, g ? 1 : Math.ceil(d / e))).replace(/_PAGES_/g, c.call(a, g ? 1 : Math.ceil(f / e))) } function ha(a) { var b, c, d = a.iInitDisplayStart, e = a.aoColumns, f; c = a.oFeatures; var g = a.bDeferLoading; if (a.bInitialised) { nb(a); kb(a); fa(a, a.aoHeader); fa(a, a.aoFooter); C(a, !0); c.bAutoWidth && Fa(a); b = 0; for (c = e.length; b < c; b++)f = e[b], f.sWidth && (f.nTh.style.width = v(f.sWidth)); r(a, null, "preInit", [a]); T(a); e = y(a); if ("ssp" != e || g) "ajax" == e ? sa(a, [], function (c) { var f = ta(a, c); for (b = 0; b < f.length; b++)O(a, f[b]); a.iInitDisplayStart = d; T(a); C(a, !1); ua(a, c) }, a) : (C(a, !1), ua(a)) } else setTimeout(function () { ha(a) }, 200) } function ua(a, b) { a._bInitComplete = !0; (b || a.oInit.aaData) && $(a); r(a, null, "plugin-init", [a, b]); r(a, "aoInitComplete", "init", [a, b]) } function Ra(a, b) { var c = parseInt(b, 10); a._iDisplayLength = c; Sa(a); r(a, null, "length", [a, c]) } function ob(a) { for (var b = a.oClasses, c = a.sTableId, d = a.aLengthMenu, e = h.isArray(d[0]), f = e ? d[0] : d, d = e ? d[1] : d, e = h("<select/>", { name: c + "_length", "aria-controls": c, "class": b.sLengthSelect }), g = 0, j = f.length; g < j; g++)e[0][g] = new Option("number" === typeof d[g] ? a.fnFormatNumber(d[g]) : d[g], f[g]); var i = h("<div><label/></div>").addClass(b.sLength); a.aanFeatures.l || (i[0].id = c + "_length"); i.children().append(a.oLanguage.sLengthMenu.replace("_MENU_", e[0].outerHTML)); h("select", i).val(a._iDisplayLength).on("change.DT", function () { Ra(a, h(this).val()); P(a) }); h(a.nTable).on("length.dt.DT", function (b, c, d) { a === c && h("select", i).val(d) }); return i[0] } function tb(a) { var b = a.sPaginationType, c = n.ext.pager[b], d = "function" === typeof c, e = function (a) { P(a) }, b = h("<div/>").addClass(a.oClasses.sPaging + b)[0], f = a.aanFeatures; d || c.fnInit(a, b, e); f.p || (b.id = a.sTableId + "_paginate", a.aoDrawCallback.push({ fn: function (a) { if (d) { var b = a._iDisplayStart, i = a._iDisplayLength, h = a.fnRecordsDisplay(), l = -1 === i, b = l ? 0 : Math.ceil(b / i), i = l ? 1 : Math.ceil(h / i), h = c(b, i), k, l = 0; for (k = f.p.length; l < k; l++)Na(a, "pageButton")(a, f.p[l], l, h, b, i) } else c.fnUpdate(a, e) }, sName: "pagination" })); return b } function Ta(a, b, c) { var d = a._iDisplayStart, e = a._iDisplayLength, f = a.fnRecordsDisplay(); 0 === f || -1 === e ? d = 0 : "number" === typeof b ? (d = b * e, d > f && (d = 0)) : "first" == b ? d = 0 : "previous" == b ? (d = 0 <= e ? d - e : 0, 0 > d && (d = 0)) : "next" == b ? d + e < f && (d += e) : "last" == b ? d = Math.floor((f - 1) / e) * e : K(a, 0, "Unknown paging action: " + b, 5); b = a._iDisplayStart !== d; a._iDisplayStart = d; b && (r(a, null, "page", [a]), c && P(a)); return b } function qb(a) { return h("<div/>", { id: !a.aanFeatures.r ? a.sTableId + "_processing" : null, "class": a.oClasses.sProcessing }).html(a.oLanguage.sProcessing).insertBefore(a.nTable)[0] }
    function C(a, b) { a.oFeatures.bProcessing && h(a.aanFeatures.r).css("display", b ? "block" : "none"); r(a, null, "processing", [a, b]) } function rb(a) { var b = h(a.nTable); b.attr("role", "grid"); var c = a.oScroll; if ("" === c.sX && "" === c.sY) return a.nTable; var d = c.sX, e = c.sY, f = a.oClasses, g = b.children("caption"), j = g.length ? g[0]._captionSide : null, i = h(b[0].cloneNode(!1)), m = h(b[0].cloneNode(!1)), l = b.children("tfoot"); l.length || (l = null); i = h("<div/>", { "class": f.sScrollWrapper }).append(h("<div/>", { "class": f.sScrollHead }).css({ overflow: "hidden", position: "relative", border: 0, width: d ? !d ? null : v(d) : "100%" }).append(h("<div/>", { "class": f.sScrollHeadInner }).css({ "box-sizing": "content-box", width: c.sXInner || "100%" }).append(i.removeAttr("id").css("margin-left", 0).append("top" === j ? g : null).append(b.children("thead"))))).append(h("<div/>", { "class": f.sScrollBody }).css({ position: "relative", overflow: "auto", width: !d ? null : v(d) }).append(b)); l && i.append(h("<div/>", { "class": f.sScrollFoot }).css({ overflow: "hidden", border: 0, width: d ? !d ? null : v(d) : "100%" }).append(h("<div/>", { "class": f.sScrollFootInner }).append(m.removeAttr("id").css("margin-left", 0).append("bottom" === j ? g : null).append(b.children("tfoot"))))); var b = i.children(), k = b[0], f = b[1], t = l ? b[2] : null; if (d) h(f).on("scroll.DT", function () { var a = this.scrollLeft; k.scrollLeft = a; l && (t.scrollLeft = a) }); h(f).css(e && c.bCollapse ? "max-height" : "height", e); a.nScrollHead = k; a.nScrollBody = f; a.nScrollFoot = t; a.aoDrawCallback.push({ fn: la, sName: "scrolling" }); return i[0] } function la(a) { var b = a.oScroll, c = b.sX, d = b.sXInner, e = b.sY, b = b.iBarWidth, f = h(a.nScrollHead), g = f[0].style, j = f.children("div"), i = j[0].style, m = j.children("table"), j = a.nScrollBody, l = h(j), q = j.style, t = h(a.nScrollFoot).children("div"), n = t.children("table"), o = h(a.nTHead), p = h(a.nTable), s = p[0], r = s.style, u = a.nTFoot ? h(a.nTFoot) : null, x = a.oBrowser, U = x.bScrollOversize, Xb = D(a.aoColumns, "nTh"), Q, L, R, w, Ua = [], y = [], z = [], A = [], B, C = function (a) { a = a.style; a.paddingTop = "0"; a.paddingBottom = "0"; a.borderTopWidth = "0"; a.borderBottomWidth = "0"; a.height = 0 }; L = j.scrollHeight > j.clientHeight; if (a.scrollBarVis !== L && a.scrollBarVis !== k) a.scrollBarVis = L, $(a); else { a.scrollBarVis = L; p.children("thead, tfoot").remove(); u && (R = u.clone().prependTo(p), Q = u.find("tr"), R = R.find("tr")); w = o.clone().prependTo(p); o = o.find("tr"); L = w.find("tr"); w.find("th, td").removeAttr("tabindex"); c || (q.width = "100%", f[0].style.width = "100%"); h.each(ra(a, w), function (b, c) { B = aa(a, b); c.style.width = a.aoColumns[B].sWidth }); u && I(function (a) { a.style.width = "" }, R); f = p.outerWidth(); if ("" === c) { r.width = "100%"; if (U && (p.find("tbody").height() > j.offsetHeight || "scroll" == l.css("overflow-y"))) r.width = v(p.outerWidth() - b); f = p.outerWidth() } else "" !== d && (r.width = v(d), f = p.outerWidth()); I(C, L); I(function (a) { z.push(a.innerHTML); Ua.push(v(h(a).css("width"))) }, L); I(function (a, b) { if (h.inArray(a, Xb) !== -1) a.style.width = Ua[b] }, o); h(L).height(0); u && (I(C, R), I(function (a) { A.push(a.innerHTML); y.push(v(h(a).css("width"))) }, R), I(function (a, b) { a.style.width = y[b] }, Q), h(R).height(0)); I(function (a, b) { a.innerHTML = '<div class="dataTables_sizing">' + z[b] + "</div>"; a.childNodes[0].style.height = "0"; a.childNodes[0].style.overflow = "hidden"; a.style.width = Ua[b] }, L); u && I(function (a, b) { a.innerHTML = '<div class="dataTables_sizing">' + A[b] + "</div>"; a.childNodes[0].style.height = "0"; a.childNodes[0].style.overflow = "hidden"; a.style.width = y[b] }, R); if (p.outerWidth() < f) { Q = j.scrollHeight > j.offsetHeight || "scroll" == l.css("overflow-y") ? f + b : f; if (U && (j.scrollHeight > j.offsetHeight || "scroll" == l.css("overflow-y"))) r.width = v(Q - b); ("" === c || "" !== d) && K(a, 1, "Possible column misalignment", 6) } else Q = "100%"; q.width = v(Q); g.width = v(Q); u && (a.nScrollFoot.style.width = v(Q)); !e && U && (q.height = v(s.offsetHeight + b)); c = p.outerWidth(); m[0].style.width = v(c); i.width = v(c); d = p.height() > j.clientHeight || "scroll" == l.css("overflow-y"); e = "padding" + (x.bScrollbarLeft ? "Left" : "Right"); i[e] = d ? b + "px" : "0px"; u && (n[0].style.width = v(c), t[0].style.width = v(c), t[0].style[e] = d ? b + "px" : "0px"); p.children("colgroup").insertBefore(p.children("thead")); l.scroll(); if ((a.bSorted || a.bFiltered) && !a._drawHold) j.scrollTop = 0 } } function I(a, b, c) { for (var d = 0, e = 0, f = b.length, g, j; e < f;) { g = b[e].firstChild; for (j = c ? c[e].firstChild : null; g;)1 === g.nodeType && (c ? a(g, j, d) : a(g, d), d++), g = g.nextSibling, j = c ? j.nextSibling : null; e++ } } function Fa(a) { var b = a.nTable, c = a.aoColumns, d = a.oScroll, e = d.sY, f = d.sX, g = d.sXInner, j = c.length, i = ma(a, "bVisible"), m = h("th", a.nTHead), l = b.getAttribute("width"), k = b.parentNode, t = !1, n, o, p = a.oBrowser, d = p.bScrollOversize; (n = b.style.width) && -1 !== n.indexOf("%") && (l = n); for (n = 0; n < i.length; n++)o = c[i[n]], null !== o.sWidth && (o.sWidth = Eb(o.sWidthOrig, k), t = !0); if (d || !t && !f && !e && j == V(a) && j == m.length) for (n = 0; n < j; n++)i = aa(a, n), null !== i && (c[i].sWidth = v(m.eq(n).width())); else { j = h(b).clone().css("visibility", "hidden").removeAttr("id"); j.find("tbody tr").remove(); var s = h("<tr/>").appendTo(j.find("tbody")); j.find("thead, tfoot").remove(); j.append(h(a.nTHead).clone()).append(h(a.nTFoot).clone()); j.find("tfoot th, tfoot td").css("width", ""); m = ra(a, j.find("thead")[0]); for (n = 0; n < i.length; n++)o = c[i[n]], m[n].style.width = null !== o.sWidthOrig && "" !== o.sWidthOrig ? v(o.sWidthOrig) : "", o.sWidthOrig && f && h(m[n]).append(h("<div/>").css({ width: o.sWidthOrig, margin: 0, padding: 0, border: 0, height: 1 })); if (a.aoData.length) for (n = 0; n < i.length; n++)t = i[n], o = c[t], h(Fb(a, t)).clone(!1).append(o.sContentPadding).appendTo(s); h("[name]", j).removeAttr("name"); o = h("<div/>").css(f || e ? { position: "absolute", top: 0, left: 0, height: 1, right: 0, overflow: "hidden" } : {}).append(j).appendTo(k); f && g ? j.width(g) : f ? (j.css("width", "auto"), j.removeAttr("width"), j.width() < k.clientWidth && l && j.width(k.clientWidth)) : e ? j.width(k.clientWidth) : l && j.width(l); for (n = e = 0; n < i.length; n++)k = h(m[n]), g = k.outerWidth() - k.width(), k = p.bBounding ? Math.ceil(m[n].getBoundingClientRect().width) : k.outerWidth(), e += k, c[i[n]].sWidth = v(k - g); b.style.width = v(e); o.remove() } l && (b.style.width = v(l)); if ((l || f) && !a._reszEvt) b = function () { h(E).on("resize.DT-" + a.sInstance, Oa(function () { $(a) })) }, d ? setTimeout(b, 1E3) : b(), a._reszEvt = !0 } function Eb(a, b) { if (!a) return 0; var c = h("<div/>").css("width", v(a)).appendTo(b || H.body), d = c[0].offsetWidth; c.remove(); return d } function Fb(a, b) { var c = Gb(a, b); if (0 > c) return null; var d = a.aoData[c]; return !d.nTr ? h("<td/>").html(B(a, c, b, "display"))[0] : d.anCells[b] } function Gb(a, b) { for (var c, d = -1, e = -1, f = 0, g = a.aoData.length; f < g; f++)c = B(a, f, b, "display") + "", c = c.replace(Yb, ""), c = c.replace(/&nbsp;/g, " "), c.length > d && (d = c.length, e = f); return e } function v(a) { return null === a ? "0px" : "number" == typeof a ? 0 > a ? "0px" : a + "px" : a.match(/\d$/) ? a + "px" : a } function X(a) { var b, c, d = [], e = a.aoColumns, f, g, j, i; b = a.aaSortingFixed; c = h.isPlainObject(b); var m = []; f = function (a) { a.length && !h.isArray(a[0]) ? m.push(a) : h.merge(m, a) }; h.isArray(b) && f(b); c && b.pre && f(b.pre); f(a.aaSorting); c && b.post && f(b.post); for (a = 0; a < m.length; a++) { i = m[a][0]; f = e[i].aDataSort; b = 0; for (c = f.length; b < c; b++)g = f[b], j = e[g].sType || "string", m[a]._idx === k && (m[a]._idx = h.inArray(m[a][1], e[g].asSorting)), d.push({ src: i, col: g, dir: m[a][1], index: m[a]._idx, type: j, formatter: n.ext.type.order[j + "-pre"] }) } return d } function mb(a) { var b, c, d = [], e = n.ext.type.order, f = a.aoData, g = 0, j, i = a.aiDisplayMaster, h; Ga(a); h = X(a); b = 0; for (c = h.length; b < c; b++)j = h[b], j.formatter && g++, Hb(a, j.col); if ("ssp" != y(a) && 0 !== h.length) { b = 0; for (c = i.length; b < c; b++)d[i[b]] = b; g === h.length ? i.sort(function (a, b) { var c, e, g, j, i = h.length, k = f[a]._aSortData, n = f[b]._aSortData; for (g = 0; g < i; g++)if (j = h[g], c = k[j.col], e = n[j.col], c = c < e ? -1 : c > e ? 1 : 0, 0 !== c) return "asc" === j.dir ? c : -c; c = d[a]; e = d[b]; return c < e ? -1 : c > e ? 1 : 0 }) : i.sort(function (a, b) { var c, g, j, i, k = h.length, n = f[a]._aSortData, o = f[b]._aSortData; for (j = 0; j < k; j++)if (i = h[j], c = n[i.col], g = o[i.col], i = e[i.type + "-" + i.dir] || e["string-" + i.dir], c = i(c, g), 0 !== c) return c; c = d[a]; g = d[b]; return c < g ? -1 : c > g ? 1 : 0 }) } a.bSorted = !0 } function Ib(a) { for (var b, c, d = a.aoColumns, e = X(a), a = a.oLanguage.oAria, f = 0, g = d.length; f < g; f++) { c = d[f]; var j = c.asSorting; b = c.sTitle.replace(/<.*?>/g, ""); var i = c.nTh; i.removeAttribute("aria-sort"); c.bSortable && (0 < e.length && e[0].col == f ? (i.setAttribute("aria-sort", "asc" == e[0].dir ? "ascending" : "descending"), c = j[e[0].index + 1] || j[0]) : c = j[0], b += "asc" === c ? a.sSortAscending : a.sSortDescending); i.setAttribute("aria-label", b) } } function Va(a, b, c, d) { var e = a.aaSorting, f = a.aoColumns[b].asSorting, g = function (a, b) { var c = a._idx; c === k && (c = h.inArray(a[1], f)); return c + 1 < f.length ? c + 1 : b ? null : 0 }; "number" === typeof e[0] && (e = a.aaSorting = [e]); c && a.oFeatures.bSortMulti ? (c = h.inArray(b, D(e, "0")), -1 !== c ? (b = g(e[c], !0), null === b && 1 === e.length && (b = 0), null === b ? e.splice(c, 1) : (e[c][1] = f[b], e[c]._idx = b)) : (e.push([b, f[0], 0]), e[e.length - 1]._idx = 0)) : e.length && e[0][0] == b ? (b = g(e[0]), e.length = 1, e[0][1] = f[b], e[0]._idx = b) : (e.length = 0, e.push([b, f[0]]), e[0]._idx = 0); T(a); "function" == typeof d && d(a) } function Ma(a, b, c, d) { var e = a.aoColumns[c]; Wa(b, {}, function (b) { !1 !== e.bSortable && (a.oFeatures.bProcessing ? (C(a, !0), setTimeout(function () { Va(a, c, b.shiftKey, d); "ssp" !== y(a) && C(a, !1) }, 0)) : Va(a, c, b.shiftKey, d)) }) } function wa(a) {
        var b = a.aLastSort, c = a.oClasses.sSortColumn, d = X(a), e = a.oFeatures, f, g; if (e.bSort && e.bSortClasses) {
            e = 0; for (f = b.length; e < f; e++)g = b[e].src, h(D(a.aoData, "anCells", g)).removeClass(c + (2 > e ? e + 1 : 3)); e = 0; for (f = d.length; e < f; e++)g = d[e].src, h(D(a.aoData, "anCells", g)).addClass(c +
                (2 > e ? e + 1 : 3))
        } a.aLastSort = d
    } function Hb(a, b) { var c = a.aoColumns[b], d = n.ext.order[c.sSortDataType], e; d && (e = d.call(a.oInstance, a, b, ba(a, b))); for (var f, g = n.ext.type.order[c.sType + "-pre"], j = 0, i = a.aoData.length; j < i; j++)if (c = a.aoData[j], c._aSortData || (c._aSortData = []), !c._aSortData[b] || d) f = d ? e[j] : B(a, j, b, "sort"), c._aSortData[b] = g ? g(f) : f } function xa(a) { if (a.oFeatures.bStateSave && !a.bDestroying) { var b = { time: +new Date, start: a._iDisplayStart, length: a._iDisplayLength, order: h.extend(!0, [], a.aaSorting), search: Ab(a.oPreviousSearch), columns: h.map(a.aoColumns, function (b, d) { return { visible: b.bVisible, search: Ab(a.aoPreSearchCols[d]) } }) }; r(a, "aoStateSaveParams", "stateSaveParams", [a, b]); a.oSavedState = b; a.fnStateSaveCallback.call(a.oInstance, a, b) } } function Jb(a, b, c) { var d, e, f = a.aoColumns, b = function (b) { if (b && b.time) { var g = r(a, "aoStateLoadParams", "stateLoadParams", [a, b]); if (-1 === h.inArray(!1, g) && (g = a.iStateDuration, !(0 < g && b.time < +new Date - 1E3 * g) && !(b.columns && f.length !== b.columns.length))) { a.oLoadedState = h.extend(!0, {}, b); b.start !== k && (a._iDisplayStart = b.start, a.iInitDisplayStart = b.start); b.length !== k && (a._iDisplayLength = b.length); b.order !== k && (a.aaSorting = [], h.each(b.order, function (b, c) { a.aaSorting.push(c[0] >= f.length ? [0, c[1]] : c) })); b.search !== k && h.extend(a.oPreviousSearch, Bb(b.search)); if (b.columns) { d = 0; for (e = b.columns.length; d < e; d++)g = b.columns[d], g.visible !== k && (f[d].bVisible = g.visible), g.search !== k && h.extend(a.aoPreSearchCols[d], Bb(g.search)) } r(a, "aoStateLoaded", "stateLoaded", [a, b]) } } c() }; if (a.oFeatures.bStateSave) { var g = a.fnStateLoadCallback.call(a.oInstance, a, b); g !== k && b(g) } else c() } function ya(a) { var b = n.settings, a = h.inArray(a, D(b, "nTable")); return -1 !== a ? b[a] : null } function K(a, b, c, d) { c = "DataTables warning: " + (a ? "table id=" + a.sTableId + " - " : "") + c; d && (c += ". For more information about this error, please see http://datatables.net/tn/" + d); if (b) E.console && console.log && console.log(c); else if (b = n.ext, b = b.sErrMode || b.errMode, a && r(a, null, "error", [a, d, c]), "alert" == b) alert(c); else { if ("throw" == b) throw Error(c); "function" == typeof b && b(a, d, c) } } function F(a, b, c, d) { h.isArray(c) ? h.each(c, function (c, d) { h.isArray(d) ? F(a, b, d[0], d[1]) : F(a, b, d) }) : (d === k && (d = c), b[c] !== k && (a[d] = b[c])) } function Xa(a, b, c) { var d, e; for (e in b) b.hasOwnProperty(e) && (d = b[e], h.isPlainObject(d) ? (h.isPlainObject(a[e]) || (a[e] = {}), h.extend(!0, a[e], d)) : a[e] = c && "data" !== e && "aaData" !== e && h.isArray(d) ? d.slice() : d); return a } function Wa(a, b, c) { h(a).on("click.DT", b, function (b) { h(a).blur(); c(b) }).on("keypress.DT", b, function (a) { 13 === a.which && (a.preventDefault(), c(a)) }).on("selectstart.DT", function () { return !1 }) } function z(a, b, c, d) { c && a[b].push({ fn: c, sName: d }) } function r(a, b, c, d) { var e = []; b && (e = h.map(a[b].slice().reverse(), function (b) { return b.fn.apply(a.oInstance, d) })); null !== c && (b = h.Event(c + ".dt"), h(a.nTable).trigger(b, d), e.push(b.result)); return e } function Sa(a) { var b = a._iDisplayStart, c = a.fnDisplayEnd(), d = a._iDisplayLength; b >= c && (b = c - d); b -= b % d; if (-1 === d || 0 > b) b = 0; a._iDisplayStart = b } function Na(a, b) { var c = a.renderer, d = n.ext.renderer[b]; return h.isPlainObject(c) && c[b] ? d[c[b]] || d._ : "string" === typeof c ? d[c] || d._ : d._ } function y(a) { return a.oFeatures.bServerSide ? "ssp" : a.ajax || a.sAjaxSource ? "ajax" : "dom" } function ia(a, b) { var c = [], c = Kb.numbers_length, d = Math.floor(c / 2); b <= c ? c = Y(0, b) : a <= d ? (c = Y(0, c - 2), c.push("ellipsis"), c.push(b - 1)) : (a >= b - 1 - d ? c = Y(b - (c - 2), b) : (c = Y(a - d + 2, a + d - 1), c.push("ellipsis"), c.push(b - 1)), c.splice(0, 0, "ellipsis"), c.splice(0, 0, 0)); c.DT_el = "span"; return c } function Da(a) { h.each({ num: function (b) { return za(b, a) }, "num-fmt": function (b) { return za(b, a, Ya) }, "html-num": function (b) { return za(b, a, Aa) }, "html-num-fmt": function (b) { return za(b, a, Aa, Ya) } }, function (b, c) { x.type.order[b + a + "-pre"] = c; b.match(/^html\-/) && (x.type.search[b + a] = x.type.search.html) }) } function Lb(a) { return function () { var b = [ya(this[n.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments)); return n.ext.internal[a].apply(this, b) } } var n = function (a) { this.$ = function (a, b) { return this.api(!0).$(a, b) }; this._ = function (a, b) { return this.api(!0).rows(a, b).data() }; this.api = function (a) { return a ? new s(ya(this[x.iApiIndex])) : new s(this) }; this.fnAddData = function (a, b) { var c = this.api(!0), d = h.isArray(a) && (h.isArray(a[0]) || h.isPlainObject(a[0])) ? c.rows.add(a) : c.row.add(a); (b === k || b) && c.draw(); return d.flatten().toArray() }; this.fnAdjustColumnSizing = function (a) { var b = this.api(!0).columns.adjust(), c = b.settings()[0], d = c.oScroll; a === k || a ? b.draw(!1) : ("" !== d.sX || "" !== d.sY) && la(c) }; this.fnClearTable = function (a) { var b = this.api(!0).clear(); (a === k || a) && b.draw() }; this.fnClose = function (a) { this.api(!0).row(a).child.hide() }; this.fnDeleteRow = function (a, b, c) { var d = this.api(!0), a = d.rows(a), e = a.settings()[0], h = e.aoData[a[0][0]]; a.remove(); b && b.call(this, e, h); (c === k || c) && d.draw(); return h }; this.fnDestroy = function (a) { this.api(!0).destroy(a) }; this.fnDraw = function (a) { this.api(!0).draw(a) }; this.fnFilter = function (a, b, c, d, e, h) { e = this.api(!0); null === b || b === k ? e.search(a, c, d, h) : e.column(b).search(a, c, d, h); e.draw() }; this.fnGetData = function (a, b) { var c = this.api(!0); if (a !== k) { var d = a.nodeName ? a.nodeName.toLowerCase() : ""; return b !== k || "td" == d || "th" == d ? c.cell(a, b).data() : c.row(a).data() || null } return c.data().toArray() }; this.fnGetNodes = function (a) { var b = this.api(!0); return a !== k ? b.row(a).node() : b.rows().nodes().flatten().toArray() }; this.fnGetPosition = function (a) { var b = this.api(!0), c = a.nodeName.toUpperCase(); return "TR" == c ? b.row(a).index() : "TD" == c || "TH" == c ? (a = b.cell(a).index(), [a.row, a.columnVisible, a.column]) : null }; this.fnIsOpen = function (a) { return this.api(!0).row(a).child.isShown() }; this.fnOpen = function (a, b, c) { return this.api(!0).row(a).child(b, c).show().child()[0] }; this.fnPageChange = function (a, b) { var c = this.api(!0).page(a); (b === k || b) && c.draw(!1) }; this.fnSetColumnVis = function (a, b, c) { a = this.api(!0).column(a).visible(b); (c === k || c) && a.columns.adjust().draw() }; this.fnSettings = function () { return ya(this[x.iApiIndex]) }; this.fnSort = function (a) { this.api(!0).order(a).draw() }; this.fnSortListener = function (a, b, c) { this.api(!0).order.listener(a, b, c) }; this.fnUpdate = function (a, b, c, d, e) { var h = this.api(!0); c === k || null === c ? h.row(b).data(a) : h.cell(b, c).data(a); (e === k || e) && h.columns.adjust(); (d === k || d) && h.draw(); return 0 }; this.fnVersionCheck = x.fnVersionCheck; var b = this, c = a === k, d = this.length; c && (a = {}); this.oApi = this.internal = x.internal; for (var e in n.ext.internal) e && (this[e] = Lb(e)); this.each(function () { var e = {}, g = 1 < d ? Xa(e, a, !0) : a, j = 0, i, e = this.getAttribute("id"), m = !1, l = n.defaults, q = h(this); if ("table" != this.nodeName.toLowerCase()) K(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2); else { eb(l); fb(l.column); J(l, l, !0); J(l.column, l.column, !0); J(l, h.extend(g, q.data())); var t = n.settings, j = 0; for (i = t.length; j < i; j++) { var o = t[j]; if (o.nTable == this || o.nTHead && o.nTHead.parentNode == this || o.nTFoot && o.nTFoot.parentNode == this) { var s = g.bRetrieve !== k ? g.bRetrieve : l.bRetrieve; if (c || s) return o.oInstance; if (g.bDestroy !== k ? g.bDestroy : l.bDestroy) { o.oInstance.fnDestroy(); break } else { K(o, 0, "Cannot reinitialise DataTable", 3); return } } if (o.sTableId == this.id) { t.splice(j, 1); break } } if (null === e || "" === e) this.id = e = "DataTables_Table_" + n.ext._unique++; var p = h.extend(!0, {}, n.models.oSettings, { sDestroyWidth: q[0].style.width, sInstance: e, sTableId: e }); p.nTable = this; p.oApi = b.internal; p.oInit = g; t.push(p); p.oInstance = 1 === b.length ? b : q.dataTable(); eb(g); Ca(g.oLanguage); g.aLengthMenu && !g.iDisplayLength && (g.iDisplayLength = h.isArray(g.aLengthMenu[0]) ? g.aLengthMenu[0][0] : g.aLengthMenu[0]); g = Xa(h.extend(!0, {}, l), g); F(p.oFeatures, g, "bPaginate bLengthChange bFilter bSort bSortMulti bInfo bProcessing bAutoWidth bSortClasses bServerSide bDeferRender".split(" ")); F(p, g, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], ["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"]]); F(p.oScroll, g, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]); F(p.oLanguage, g, "fnInfoCallback"); z(p, "aoDrawCallback", g.fnDrawCallback, "user"); z(p, "aoServerParams", g.fnServerParams, "user"); z(p, "aoStateSaveParams", g.fnStateSaveParams, "user"); z(p, "aoStateLoadParams", g.fnStateLoadParams, "user"); z(p, "aoStateLoaded", g.fnStateLoaded, "user"); z(p, "aoRowCallback", g.fnRowCallback, "user"); z(p, "aoRowCreatedCallback", g.fnCreatedRow, "user"); z(p, "aoHeaderCallback", g.fnHeaderCallback, "user"); z(p, "aoFooterCallback", g.fnFooterCallback, "user"); z(p, "aoInitComplete", g.fnInitComplete, "user"); z(p, "aoPreDrawCallback", g.fnPreDrawCallback, "user"); p.rowIdFn = S(g.rowId); gb(p); var u = p.oClasses; h.extend(u, n.ext.classes, g.oClasses); q.addClass(u.sTable); p.iInitDisplayStart === k && (p.iInitDisplayStart = g.iDisplayStart, p._iDisplayStart = g.iDisplayStart); null !== g.iDeferLoading && (p.bDeferLoading = !0, e = h.isArray(g.iDeferLoading), p._iRecordsDisplay = e ? g.iDeferLoading[0] : g.iDeferLoading, p._iRecordsTotal = e ? g.iDeferLoading[1] : g.iDeferLoading); var v = p.oLanguage; h.extend(!0, v, g.oLanguage); v.sUrl && (h.ajax({ dataType: "json", url: v.sUrl, success: function (a) { Ca(a); J(l.oLanguage, a); h.extend(true, v, a); ha(p) }, error: function () { ha(p) } }), m = !0); null === g.asStripeClasses && (p.asStripeClasses = [u.sStripeOdd, u.sStripeEven]); var e = p.asStripeClasses, x = q.children("tbody").find("tr").eq(0); -1 !== h.inArray(!0, h.map(e, function (a) { return x.hasClass(a) })) && (h("tbody tr", this).removeClass(e.join(" ")), p.asDestroyStripes = e.slice()); e = []; t = this.getElementsByTagName("thead"); 0 !== t.length && (ea(p.aoHeader, t[0]), e = ra(p)); if (null === g.aoColumns) { t = []; j = 0; for (i = e.length; j < i; j++)t.push(null) } else t = g.aoColumns; j = 0; for (i = t.length; j < i; j++)Ea(p, e ? e[j] : null); ib(p, g.aoColumnDefs, t, function (a, b) { ka(p, a, b) }); if (x.length) { var w = function (a, b) { return a.getAttribute("data-" + b) !== null ? b : null }; h(x[0]).children("th, td").each(function (a, b) { var c = p.aoColumns[a]; if (c.mData === a) { var d = w(b, "sort") || w(b, "order"), e = w(b, "filter") || w(b, "search"); if (d !== null || e !== null) { c.mData = { _: a + ".display", sort: d !== null ? a + ".@data-" + d : k, type: d !== null ? a + ".@data-" + d : k, filter: e !== null ? a + ".@data-" + e : k }; ka(p, a) } } }) } var U = p.oFeatures, e = function () { if (g.aaSorting === k) { var a = p.aaSorting; j = 0; for (i = a.length; j < i; j++)a[j][1] = p.aoColumns[j].asSorting[0] } wa(p); U.bSort && z(p, "aoDrawCallback", function () { if (p.bSorted) { var a = X(p), b = {}; h.each(a, function (a, c) { b[c.src] = c.dir }); r(p, null, "order", [p, a, b]); Ib(p) } }); z(p, "aoDrawCallback", function () { (p.bSorted || y(p) === "ssp" || U.bDeferRender) && wa(p) }, "sc"); var a = q.children("caption").each(function () { this._captionSide = h(this).css("caption-side") }), b = q.children("thead"); b.length === 0 && (b = h("<thead/>").appendTo(q)); p.nTHead = b[0]; b = q.children("tbody"); b.length === 0 && (b = h("<tbody/>").appendTo(q)); p.nTBody = b[0]; b = q.children("tfoot"); if (b.length === 0 && a.length > 0 && (p.oScroll.sX !== "" || p.oScroll.sY !== "")) b = h("<tfoot/>").appendTo(q); if (b.length === 0 || b.children().length === 0) q.addClass(u.sNoFooter); else if (b.length > 0) { p.nTFoot = b[0]; ea(p.aoFooter, p.nTFoot) } if (g.aaData) for (j = 0; j < g.aaData.length; j++)O(p, g.aaData[j]); else (p.bDeferLoading || y(p) == "dom") && na(p, h(p.nTBody).children("tr")); p.aiDisplay = p.aiDisplayMaster.slice(); p.bInitialised = true; m === false && ha(p) }; g.bStateSave ? (U.bStateSave = !0, z(p, "aoDrawCallback", xa, "state_save"), Jb(p, g, e)) : e() } }); b = null; return this }, x, s, o, u, Za = {}, Mb = /[\r\n]/g, Aa = /<.*?>/g, Zb = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/, $b = RegExp("(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\|\\$|\\^|\\-)", "g"), Ya = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi, M = function (a) { return !a || !0 === a || "-" === a ? !0 : !1 }, Nb = function (a) { var b = parseInt(a, 10); return !isNaN(b) && isFinite(a) ? b : null }, Ob = function (a, b) { Za[b] || (Za[b] = RegExp(Qa(b), "g")); return "string" === typeof a && "." !== b ? a.replace(/\./g, "").replace(Za[b], ".") : a }, $a = function (a, b, c) { var d = "string" === typeof a; if (M(a)) return !0; b && d && (a = Ob(a, b)); c && d && (a = a.replace(Ya, "")); return !isNaN(parseFloat(a)) && isFinite(a) }, Pb = function (a, b, c) { return M(a) ? !0 : !(M(a) || "string" === typeof a) ? null : $a(a.replace(Aa, ""), b, c) ? !0 : null }, D = function (a, b, c) { var d = [], e = 0, f = a.length; if (c !== k) for (; e < f; e++)a[e] && a[e][b] && d.push(a[e][b][c]); else for (; e < f; e++)a[e] && d.push(a[e][b]); return d }, ja = function (a, b, c, d) { var e = [], f = 0, g = b.length; if (d !== k) for (; f < g; f++)a[b[f]][c] && e.push(a[b[f]][c][d]); else for (; f < g; f++)e.push(a[b[f]][c]); return e }, Y = function (a, b) { var c = [], d; b === k ? (b = 0, d = a) : (d = b, b = a); for (var e = b; e < d; e++)c.push(e); return c }, Qb = function (a) { for (var b = [], c = 0, d = a.length; c < d; c++)a[c] && b.push(a[c]); return b }, qa = function (a) { var b; a: { if (!(2 > a.length)) { b = a.slice().sort(); for (var c = b[0], d = 1, e = b.length; d < e; d++) { if (b[d] === c) { b = !1; break a } c = b[d] } } b = !0 } if (b) return a.slice(); b = []; var e = a.length, f, g = 0, d = 0; a: for (; d < e; d++) { c = a[d]; for (f = 0; f < g; f++)if (b[f] === c) continue a; b.push(c); g++ } return b }; n.util = { throttle: function (a, b) { var c = b !== k ? b : 200, d, e; return function () { var b = this, g = +new Date, j = arguments; d && g < d + c ? (clearTimeout(e), e = setTimeout(function () { d = k; a.apply(b, j) }, c)) : (d = g, a.apply(b, j)) } }, escapeRegex: function (a) { return a.replace($b, "\\$1") } }; var A = function (a, b, c) { a[b] !== k && (a[c] = a[b]) }, ca = /\[.*?\]$/, W = /\(\)$/, Qa = n.util.escapeRegex, va = h("<div>")[0], Wb = va.textContent !== k, Yb = /<.*?>/g, Oa = n.util.throttle, Rb = [], w = Array.prototype, ac = function (a) { var b, c, d = n.settings, e = h.map(d, function (a) { return a.nTable }); if (a) { if (a.nTable && a.oApi) return [a]; if (a.nodeName && "table" === a.nodeName.toLowerCase()) return b = h.inArray(a, e), -1 !== b ? [d[b]] : null; if (a && "function" === typeof a.settings) return a.settings().toArray(); "string" === typeof a ? c = h(a) : a instanceof h && (c = a) } else return []; if (c) return c.map(function () { b = h.inArray(this, e); return -1 !== b ? d[b] : null }).toArray() }; s = function (a, b) {
        if (!(this instanceof
            s)) return new s(a, b); var c = [], d = function (a) { (a = ac(a)) && (c = c.concat(a)) }; if (h.isArray(a)) for (var e = 0, f = a.length; e < f; e++)d(a[e]); else d(a); this.context = qa(c); b && h.merge(this, b); this.selector = { rows: null, cols: null, opts: null }; s.extend(this, this, Rb)
    }; n.Api = s; h.extend(s.prototype, { any: function () { return 0 !== this.count() }, concat: w.concat, context: [], count: function () { return this.flatten().length }, each: function (a) { for (var b = 0, c = this.length; b < c; b++)a.call(this, this[b], b, this); return this }, eq: function (a) { var b = this.context; return b.length > a ? new s(b[a], this[a]) : null }, filter: function (a) { var b = []; if (w.filter) b = w.filter.call(this, a, this); else for (var c = 0, d = this.length; c < d; c++)a.call(this, this[c], c, this) && b.push(this[c]); return new s(this.context, b) }, flatten: function () { var a = []; return new s(this.context, a.concat.apply(a, this.toArray())) }, join: w.join, indexOf: w.indexOf || function (a, b) { for (var c = b || 0, d = this.length; c < d; c++)if (this[c] === a) return c; return -1 }, iterator: function (a, b, c, d) { var e = [], f, g, j, h, m, l = this.context, n, o, u = this.selector; "string" === typeof a && (d = c, c = b, b = a, a = !1); g = 0; for (j = l.length; g < j; g++) { var r = new s(l[g]); if ("table" === b) f = c.call(r, l[g], g), f !== k && e.push(f); else if ("columns" === b || "rows" === b) f = c.call(r, l[g], this[g], g), f !== k && e.push(f); else if ("column" === b || "column-rows" === b || "row" === b || "cell" === b) { o = this[g]; "column-rows" === b && (n = Ba(l[g], u.opts)); h = 0; for (m = o.length; h < m; h++)f = o[h], f = "cell" === b ? c.call(r, l[g], f.row, f.column, g, h) : c.call(r, l[g], f, g, h, n), f !== k && e.push(f) } } return e.length || d ? (a = new s(l, a ? e.concat.apply([], e) : e), b = a.selector, b.rows = u.rows, b.cols = u.cols, b.opts = u.opts, a) : this }, lastIndexOf: w.lastIndexOf || function (a, b) { return this.indexOf.apply(this.toArray.reverse(), arguments) }, length: 0, map: function (a) { var b = []; if (w.map) b = w.map.call(this, a, this); else for (var c = 0, d = this.length; c < d; c++)b.push(a.call(this, this[c], c)); return new s(this.context, b) }, pluck: function (a) { return this.map(function (b) { return b[a] }) }, pop: w.pop, push: w.push, reduce: w.reduce || function (a, b) { return hb(this, a, b, 0, this.length, 1) }, reduceRight: w.reduceRight || function (a, b) { return hb(this, a, b, this.length - 1, -1, -1) }, reverse: w.reverse, selector: null, shift: w.shift, slice: function () { return new s(this.context, this) }, sort: w.sort, splice: w.splice, toArray: function () { return w.slice.call(this) }, to$: function () { return h(this) }, toJQuery: function () { return h(this) }, unique: function () { return new s(this.context, qa(this)) }, unshift: w.unshift }); s.extend = function (a, b, c) { if (c.length && b && (b instanceof s || b.__dt_wrapper)) { var d, e, f, g = function (a, b, c) { return function () { var d = b.apply(a, arguments); s.extend(d, d, c.methodExt); return d } }; d = 0; for (e = c.length; d < e; d++)f = c[d], b[f.name] = "function" === typeof f.val ? g(a, f.val, f) : h.isPlainObject(f.val) ? {} : f.val, b[f.name].__dt_wrapper = !0, s.extend(a, b[f.name], f.propExt) } }; s.register = o = function (a, b) { if (h.isArray(a)) for (var c = 0, d = a.length; c < d; c++)s.register(a[c], b); else for (var e = a.split("."), f = Rb, g, j, c = 0, d = e.length; c < d; c++) { g = (j = -1 !== e[c].indexOf("()")) ? e[c].replace("()", "") : e[c]; var i; a: { i = 0; for (var m = f.length; i < m; i++)if (f[i].name === g) { i = f[i]; break a } i = null } i || (i = { name: g, val: {}, methodExt: [], propExt: [] }, f.push(i)); c === d - 1 ? i.val = b : f = j ? i.methodExt : i.propExt } }; s.registerPlural = u = function (a, b, c) { s.register(a, c); s.register(b, function () { var a = c.apply(this, arguments); return a === this ? this : a instanceof s ? a.length ? h.isArray(a[0]) ? new s(a.context, a[0]) : a[0] : k : a }) }; o("tables()", function (a) { var b; if (a) { b = s; var c = this.context; if ("number" === typeof a) a = [c[a]]; else var d = h.map(c, function (a) { return a.nTable }), a = h(d).filter(a).map(function () { var a = h.inArray(this, d); return c[a] }).toArray(); b = new b(a) } else b = this; return b }); o("table()", function (a) { var a = this.tables(a), b = a.context; return b.length ? new s(b[0]) : a }); u("tables().nodes()", "table().node()", function () { return this.iterator("table", function (a) { return a.nTable }, 1) }); u("tables().body()", "table().body()", function () { return this.iterator("table", function (a) { return a.nTBody }, 1) }); u("tables().header()", "table().header()", function () { return this.iterator("table", function (a) { return a.nTHead }, 1) }); u("tables().footer()", "table().footer()", function () { return this.iterator("table", function (a) { return a.nTFoot }, 1) }); u("tables().containers()", "table().container()", function () { return this.iterator("table", function (a) { return a.nTableWrapper }, 1) }); o("draw()", function (a) { return this.iterator("table", function (b) { "page" === a ? P(b) : ("string" === typeof a && (a = "full-hold" === a ? !1 : !0), T(b, !1 === a)) }) }); o("page()", function (a) { return a === k ? this.page.info().page : this.iterator("table", function (b) { Ta(b, a) }) }); o("page.info()", function () { if (0 === this.context.length) return k; var a = this.context[0], b = a._iDisplayStart, c = a.oFeatures.bPaginate ? a._iDisplayLength : -1, d = a.fnRecordsDisplay(), e = -1 === c; return { page: e ? 0 : Math.floor(b / c), pages: e ? 1 : Math.ceil(d / c), start: b, end: a.fnDisplayEnd(), length: c, recordsTotal: a.fnRecordsTotal(), recordsDisplay: d, serverSide: "ssp" === y(a) } }); o("page.len()", function (a) { return a === k ? 0 !== this.context.length ? this.context[0]._iDisplayLength : k : this.iterator("table", function (b) { Ra(b, a) }) }); var Sb = function (a, b, c) { if (c) { var d = new s(a); d.one("draw", function () { c(d.ajax.json()) }) } if ("ssp" == y(a)) T(a, b); else { C(a, !0); var e = a.jqXHR; e && 4 !== e.readyState && e.abort(); sa(a, [], function (c) { oa(a); for (var c = ta(a, c), d = 0, e = c.length; d < e; d++)O(a, c[d]); T(a, b); C(a, !1) }) } }; o("ajax.json()", function () { var a = this.context; if (0 < a.length) return a[0].json }); o("ajax.params()", function () { var a = this.context; if (0 < a.length) return a[0].oAjaxData }); o("ajax.reload()", function (a, b) { return this.iterator("table", function (c) { Sb(c, !1 === b, a) }) }); o("ajax.url()", function (a) { var b = this.context; if (a === k) { if (0 === b.length) return k; b = b[0]; return b.ajax ? h.isPlainObject(b.ajax) ? b.ajax.url : b.ajax : b.sAjaxSource } return this.iterator("table", function (b) { h.isPlainObject(b.ajax) ? b.ajax.url = a : b.ajax = a }) }); o("ajax.url().load()", function (a, b) { return this.iterator("table", function (c) { Sb(c, !1 === b, a) }) }); var ab = function (a, b, c, d, e) { var f = [], g, j, i, m, l, n; i = typeof b; if (!b || "string" === i || "function" === i || b.length === k) b = [b]; i = 0; for (m = b.length; i < m; i++) { j = b[i] && b[i].split && !b[i].match(/[\[\(:]/) ? b[i].split(",") : [b[i]]; l = 0; for (n = j.length; l < n; l++)(g = c("string" === typeof j[l] ? h.trim(j[l]) : j[l])) && g.length && (f = f.concat(g)) } a = x.selector[a]; if (a.length) { i = 0; for (m = a.length; i < m; i++)f = a[i](d, e, f) } return qa(f) }, bb = function (a) { a || (a = {}); a.filter && a.search === k && (a.search = a.filter); return h.extend({ search: "none", order: "current", page: "all" }, a) }, cb = function (a) { for (var b = 0, c = a.length; b < c; b++)if (0 < a[b].length) return a[0] = a[b], a[0].length = 1, a.length = 1, a.context = [a.context[b]], a; a.length = 0; return a }, Ba = function (a, b) { var c, d, e, f = [], g = a.aiDisplay; e = a.aiDisplayMaster; var j = b.search; c = b.order; d = b.page; if ("ssp" == y(a)) return "removed" === j ? [] : Y(0, e.length); if ("current" == d) { c = a._iDisplayStart; for (d = a.fnDisplayEnd(); c < d; c++)f.push(g[c]) } else if ("current" == c || "applied" == c) if ("none" == j) f = e.slice(); else if ("applied" == j) f = g.slice(); else { if ("removed" == j) { var i = {}; c = 0; for (d = g.length; c < d; c++)i[g[c]] = null; f = h.map(e, function (a) { return !i.hasOwnProperty(a) ? a : null }) } } else if ("index" == c || "original" == c) { c = 0; for (d = a.aoData.length; c < d; c++)"none" == j ? f.push(c) : (e = h.inArray(c, g), (-1 === e && "removed" == j || 0 <= e && "applied" == j) && f.push(c)) } return f }; o("rows()", function (a, b) { a === k ? a = "" : h.isPlainObject(a) && (b = a, a = ""); var b = bb(b), c = this.iterator("table", function (c) { var e = b, f; return ab("row", a, function (a) { var b = Nb(a), i = c.aoData; if (b !== null && !e) return [b]; f || (f = Ba(c, e)); if (b !== null && h.inArray(b, f) !== -1) return [b]; if (a === null || a === k || a === "") return f; if (typeof a === "function") return h.map(f, function (b) { var c = i[b]; return a(b, c._aData, c.nTr) ? b : null }); if (a.nodeName) { var b = a._DT_RowIndex, m = a._DT_CellIndex; if (b !== k) return i[b] && i[b].nTr === a ? [b] : []; if (m) return i[m.row] && i[m.row].nTr === a ? [m.row] : []; b = h(a).closest("*[data-dt-row]"); return b.length ? [b.data("dt-row")] : [] } if (typeof a === "string" && a.charAt(0) === "#") { b = c.aIds[a.replace(/^#/, "")]; if (b !== k) return [b.idx] } b = Qb(ja(c.aoData, f, "nTr")); return h(b).filter(a).map(function () { return this._DT_RowIndex }).toArray() }, c, e) }, 1); c.selector.rows = a; c.selector.opts = b; return c }); o("rows().nodes()", function () { return this.iterator("row", function (a, b) { return a.aoData[b].nTr || k }, 1) }); o("rows().data()", function () { return this.iterator(!0, "rows", function (a, b) { return ja(a.aoData, b, "_aData") }, 1) }); u("rows().cache()", "row().cache()", function (a) { return this.iterator("row", function (b, c) { var d = b.aoData[c]; return "search" === a ? d._aFilterData : d._aSortData }, 1) }); u("rows().invalidate()", "row().invalidate()", function (a) { return this.iterator("row", function (b, c) { da(b, c, a) }) }); u("rows().indexes()", "row().index()", function () { return this.iterator("row", function (a, b) { return b }, 1) }); u("rows().ids()", "row().id()", function (a) { for (var b = [], c = this.context, d = 0, e = c.length; d < e; d++)for (var f = 0, g = this[d].length; f < g; f++) { var h = c[d].rowIdFn(c[d].aoData[this[d][f]]._aData); b.push((!0 === a ? "#" : "") + h) } return new s(c, b) }); u("rows().remove()", "row().remove()", function () { var a = this; this.iterator("row", function (b, c, d) { var e = b.aoData, f = e[c], g, h, i, m, l; e.splice(c, 1); g = 0; for (h = e.length; g < h; g++)if (i = e[g], l = i.anCells, null !== i.nTr && (i.nTr._DT_RowIndex = g), null !== l) { i = 0; for (m = l.length; i < m; i++)l[i]._DT_CellIndex.row = g } pa(b.aiDisplayMaster, c); pa(b.aiDisplay, c); pa(a[d], c, !1); 0 < b._iRecordsDisplay && b._iRecordsDisplay--; Sa(b); c = b.rowIdFn(f._aData); c !== k && delete b.aIds[c] }); this.iterator("table", function (a) { for (var c = 0, d = a.aoData.length; c < d; c++)a.aoData[c].idx = c }); return this }); o("rows.add()", function (a) { var b = this.iterator("table", function (b) { var c, f, g, h = []; f = 0; for (g = a.length; f < g; f++)c = a[f], c.nodeName && "TR" === c.nodeName.toUpperCase() ? h.push(na(b, c)[0]) : h.push(O(b, c)); return h }, 1), c = this.rows(-1); c.pop(); h.merge(c, b); return c }); o("row()", function (a, b) { return cb(this.rows(a, b)) }); o("row().data()", function (a) { var b = this.context; if (a === k) return b.length && this.length ? b[0].aoData[this[0]]._aData : k; var c = b[0].aoData[this[0]]; c._aData = a; h.isArray(a) && c.nTr.id && N(b[0].rowId)(a, c.nTr.id); da(b[0], this[0], "data"); return this }); o("row().node()", function () { var a = this.context; return a.length && this.length ? a[0].aoData[this[0]].nTr || null : null }); o("row.add()", function (a) { a instanceof h && a.length && (a = a[0]); var b = this.iterator("table", function (b) { return a.nodeName && "TR" === a.nodeName.toUpperCase() ? na(b, a)[0] : O(b, a) }); return this.row(b[0]) }); var db = function (a, b) { var c = a.context; if (c.length && (c = c[0].aoData[b !== k ? b : a[0]]) && c._details) c._details.remove(), c._detailsShow = k, c._details = k }, Tb = function (a, b) { var c = a.context; if (c.length && a.length) { var d = c[0].aoData[a[0]]; if (d._details) { (d._detailsShow = b) ? d._details.insertAfter(d.nTr) : d._details.detach(); var e = c[0], f = new s(e), g = e.aoData; f.off("draw.dt.DT_details column-visibility.dt.DT_details destroy.dt.DT_details"); 0 < D(g, "_details").length && (f.on("draw.dt.DT_details", function (a, b) { e === b && f.rows({ page: "current" }).eq(0).each(function (a) { a = g[a]; a._detailsShow && a._details.insertAfter(a.nTr) }) }), f.on("column-visibility.dt.DT_details", function (a, b) { if (e === b) for (var c, d = V(b), f = 0, h = g.length; f < h; f++)c = g[f], c._details && c._details.children("td[colspan]").attr("colspan", d) }), f.on("destroy.dt.DT_details", function (a, b) { if (e === b) for (var c = 0, d = g.length; c < d; c++)g[c]._details && db(f, c) })) } } }; o("row().child()", function (a, b) { var c = this.context; if (a === k) return c.length && this.length ? c[0].aoData[this[0]]._details : k; if (!0 === a) this.child.show(); else if (!1 === a) db(this); else if (c.length && this.length) { var d = c[0], c = c[0].aoData[this[0]], e = [], f = function (a, b) { if (h.isArray(a) || a instanceof h) for (var c = 0, k = a.length; c < k; c++)f(a[c], b); else a.nodeName && "tr" === a.nodeName.toLowerCase() ? e.push(a) : (c = h("<tr><td/></tr>").addClass(b), h("td", c).addClass(b).html(a)[0].colSpan = V(d), e.push(c[0])) }; f(a, b); c._details && c._details.detach(); c._details = h(e); c._detailsShow && c._details.insertAfter(c.nTr) } return this }); o(["row().child.show()", "row().child().show()"], function () { Tb(this, !0); return this }); o(["row().child.hide()", "row().child().hide()"], function () { Tb(this, !1); return this }); o(["row().child.remove()", "row().child().remove()"], function () { db(this); return this }); o("row().child.isShown()", function () { var a = this.context; return a.length && this.length ? a[0].aoData[this[0]]._detailsShow || !1 : !1 }); var bc = /^([^:]+):(name|visIdx|visible)$/, Ub = function (a, b, c, d, e) { for (var c = [], d = 0, f = e.length; d < f; d++)c.push(B(a, e[d], b)); return c }; o("columns()", function (a, b) { a === k ? a = "" : h.isPlainObject(a) && (b = a, a = ""); var b = bb(b), c = this.iterator("table", function (c) { var e = a, f = b, g = c.aoColumns, j = D(g, "sName"), i = D(g, "nTh"); return ab("column", e, function (a) { var b = Nb(a); if (a === "") return Y(g.length); if (b !== null) return [b >= 0 ? b : g.length + b]; if (typeof a === "function") { var e = Ba(c, f); return h.map(g, function (b, f) { return a(f, Ub(c, f, 0, 0, e), i[f]) ? f : null }) } var k = typeof a === "string" ? a.match(bc) : ""; if (k) switch (k[2]) { case "visIdx": case "visible": b = parseInt(k[1], 10); if (b < 0) { var n = h.map(g, function (a, b) { return a.bVisible ? b : null }); return [n[n.length + b]] } return [aa(c, b)]; case "name": return h.map(j, function (a, b) { return a === k[1] ? b : null }); default: return [] }if (a.nodeName && a._DT_CellIndex) return [a._DT_CellIndex.column]; b = h(i).filter(a).map(function () { return h.inArray(this, i) }).toArray(); if (b.length || !a.nodeName) return b; b = h(a).closest("*[data-dt-column]"); return b.length ? [b.data("dt-column")] : [] }, c, f) }, 1); c.selector.cols = a; c.selector.opts = b; return c }); u("columns().header()", "column().header()", function () { return this.iterator("column", function (a, b) { return a.aoColumns[b].nTh }, 1) }); u("columns().footer()", "column().footer()", function () { return this.iterator("column", function (a, b) { return a.aoColumns[b].nTf }, 1) }); u("columns().data()", "column().data()", function () { return this.iterator("column-rows", Ub, 1) }); u("columns().dataSrc()", "column().dataSrc()", function () { return this.iterator("column", function (a, b) { return a.aoColumns[b].mData }, 1) }); u("columns().cache()", "column().cache()", function (a) { return this.iterator("column-rows", function (b, c, d, e, f) { return ja(b.aoData, f, "search" === a ? "_aFilterData" : "_aSortData", c) }, 1) }); u("columns().nodes()", "column().nodes()", function () { return this.iterator("column-rows", function (a, b, c, d, e) { return ja(a.aoData, e, "anCells", b) }, 1) }); u("columns().visible()", "column().visible()", function (a, b) { var c = this.iterator("column", function (b, c) { if (a === k) return b.aoColumns[c].bVisible; var f = b.aoColumns, g = f[c], j = b.aoData, i, m, l; if (a !== k && g.bVisible !== a) { if (a) { var n = h.inArray(!0, D(f, "bVisible"), c + 1); i = 0; for (m = j.length; i < m; i++)l = j[i].nTr, f = j[i].anCells, l && l.insertBefore(f[c], f[n] || null) } else h(D(b.aoData, "anCells", c)).detach(); g.bVisible = a; fa(b, b.aoHeader); fa(b, b.aoFooter); b.aiDisplay.length || h(b.nTBody).find("td[colspan]").attr("colspan", V(b)); xa(b) } }); a !== k && (this.iterator("column", function (c, e) { r(c, null, "column-visibility", [c, e, a, b]) }), (b === k || b) && this.columns.adjust()); return c }); u("columns().indexes()", "column().index()", function (a) { return this.iterator("column", function (b, c) { return "visible" === a ? ba(b, c) : c }, 1) }); o("columns.adjust()", function () { return this.iterator("table", function (a) { $(a) }, 1) }); o("column.index()", function (a, b) { if (0 !== this.context.length) { var c = this.context[0]; if ("fromVisible" === a || "toData" === a) return aa(c, b); if ("fromData" === a || "toVisible" === a) return ba(c, b) } }); o("column()", function (a, b) { return cb(this.columns(a, b)) }); o("cells()", function (a, b, c) { h.isPlainObject(a) && (a.row === k ? (c = a, a = null) : (c = b, b = null)); h.isPlainObject(b) && (c = b, b = null); if (null === b || b === k) return this.iterator("table", function (b) { var d = a, e = bb(c), f = b.aoData, g = Ba(b, e), j = Qb(ja(f, g, "anCells")), i = h([].concat.apply([], j)), l, m = b.aoColumns.length, n, o, u, s, r, v; return ab("cell", d, function (a) { var c = typeof a === "function"; if (a === null || a === k || c) { n = []; o = 0; for (u = g.length; o < u; o++) { l = g[o]; for (s = 0; s < m; s++) { r = { row: l, column: s }; if (c) { v = f[l]; a(r, B(b, l, s), v.anCells ? v.anCells[s] : null) && n.push(r) } else n.push(r) } } return n } if (h.isPlainObject(a)) return a.column !== k && a.row !== k && h.inArray(a.row, g) !== -1 ? [a] : []; c = i.filter(a).map(function (a, b) { return { row: b._DT_CellIndex.row, column: b._DT_CellIndex.column } }).toArray(); if (c.length || !a.nodeName) return c; v = h(a).closest("*[data-dt-row]"); return v.length ? [{ row: v.data("dt-row"), column: v.data("dt-column") }] : [] }, b, e) }); var d = this.columns(b), e = this.rows(a), f, g, j, i, m; this.iterator("table", function (a, b) { f = []; g = 0; for (j = e[b].length; g < j; g++) { i = 0; for (m = d[b].length; i < m; i++)f.push({ row: e[b][g], column: d[b][i] }) } }, 1); var l = this.cells(f, c); h.extend(l.selector, { cols: b, rows: a, opts: c }); return l }); u("cells().nodes()", "cell().node()", function () { return this.iterator("cell", function (a, b, c) { return (a = a.aoData[b]) && a.anCells ? a.anCells[c] : k }, 1) }); o("cells().data()", function () { return this.iterator("cell", function (a, b, c) { return B(a, b, c) }, 1) }); u("cells().cache()", "cell().cache()", function (a) { a = "search" === a ? "_aFilterData" : "_aSortData"; return this.iterator("cell", function (b, c, d) { return b.aoData[c][a][d] }, 1) }); u("cells().render()", "cell().render()", function (a) { return this.iterator("cell", function (b, c, d) { return B(b, c, d, a) }, 1) }); u("cells().indexes()", "cell().index()", function () { return this.iterator("cell", function (a, b, c) { return { row: b, column: c, columnVisible: ba(a, c) } }, 1) }); u("cells().invalidate()", "cell().invalidate()", function (a) { return this.iterator("cell", function (b, c, d) { da(b, c, a, d) }) }); o("cell()", function (a, b, c) { return cb(this.cells(a, b, c)) }); o("cell().data()", function (a) { var b = this.context, c = this[0]; if (a === k) return b.length && c.length ? B(b[0], c[0].row, c[0].column) : k; jb(b[0], c[0].row, c[0].column, a); da(b[0], c[0].row, "data", c[0].column); return this }); o("order()", function (a, b) { var c = this.context; if (a === k) return 0 !== c.length ? c[0].aaSorting : k; "number" === typeof a ? a = [[a, b]] : a.length && !h.isArray(a[0]) && (a = Array.prototype.slice.call(arguments)); return this.iterator("table", function (b) { b.aaSorting = a.slice() }) }); o("order.listener()", function (a, b, c) { return this.iterator("table", function (d) { Ma(d, a, b, c) }) }); o("order.fixed()", function (a) { if (!a) { var b = this.context, b = b.length ? b[0].aaSortingFixed : k; return h.isArray(b) ? { pre: b } : b } return this.iterator("table", function (b) { b.aaSortingFixed = h.extend(!0, {}, a) }) }); o(["columns().order()", "column().order()"], function (a) { var b = this; return this.iterator("table", function (c, d) { var e = []; h.each(b[d], function (b, c) { e.push([c, a]) }); c.aaSorting = e }) }); o("search()", function (a, b, c, d) { var e = this.context; return a === k ? 0 !== e.length ? e[0].oPreviousSearch.sSearch : k : this.iterator("table", function (e) { e.oFeatures.bFilter && ga(e, h.extend({}, e.oPreviousSearch, { sSearch: a + "", bRegex: null === b ? !1 : b, bSmart: null === c ? !0 : c, bCaseInsensitive: null === d ? !0 : d }), 1) }) }); u("columns().search()", "column().search()", function (a, b, c, d) { return this.iterator("column", function (e, f) { var g = e.aoPreSearchCols; if (a === k) return g[f].sSearch; e.oFeatures.bFilter && (h.extend(g[f], { sSearch: a + "", bRegex: null === b ? !1 : b, bSmart: null === c ? !0 : c, bCaseInsensitive: null === d ? !0 : d }), ga(e, e.oPreviousSearch, 1)) }) }); o("state()", function () { return this.context.length ? this.context[0].oSavedState : null }); o("state.clear()", function () { return this.iterator("table", function (a) { a.fnStateSaveCallback.call(a.oInstance, a, {}) }) }); o("state.loaded()", function () { return this.context.length ? this.context[0].oLoadedState : null }); o("state.save()", function () { return this.iterator("table", function (a) { xa(a) }) }); n.versionCheck = n.fnVersionCheck = function (a) { for (var b = n.version.split("."), a = a.split("."), c, d, e = 0, f = a.length; e < f; e++)if (c = parseInt(b[e], 10) || 0, d = parseInt(a[e], 10) || 0, c !== d) return c > d; return !0 }; n.isDataTable = n.fnIsDataTable = function (a) { var b = h(a).get(0), c = !1; if (a instanceof n.Api) return !0; h.each(n.settings, function (a, e) { var f = e.nScrollHead ? h("table", e.nScrollHead)[0] : null, g = e.nScrollFoot ? h("table", e.nScrollFoot)[0] : null; if (e.nTable === b || f === b || g === b) c = !0 }); return c }; n.tables = n.fnTables = function (a) { var b = !1; h.isPlainObject(a) && (b = a.api, a = a.visible); var c = h.map(n.settings, function (b) { if (!a || a && h(b.nTable).is(":visible")) return b.nTable }); return b ? new s(c) : c }; n.camelToHungarian = J; o("$()", function (a, b) { var c = this.rows(b).nodes(), c = h(c); return h([].concat(c.filter(a).toArray(), c.find(a).toArray())) }); h.each(["on", "one", "off"], function (a, b) { o(b + "()", function () { var a = Array.prototype.slice.call(arguments); a[0] = h.map(a[0].split(/\s/), function (a) { return !a.match(/\.dt\b/) ? a + ".dt" : a }).join(" "); var d = h(this.tables().nodes()); d[b].apply(d, a); return this }) }); o("clear()", function () { return this.iterator("table", function (a) { oa(a) }) }); o("settings()", function () { return new s(this.context, this.context) }); o("init()", function () { var a = this.context; return a.length ? a[0].oInit : null }); o("data()", function () { return this.iterator("table", function (a) { return D(a.aoData, "_aData") }).flatten() }); o("destroy()", function (a) { a = a || !1; return this.iterator("table", function (b) { var c = b.nTableWrapper.parentNode, d = b.oClasses, e = b.nTable, f = b.nTBody, g = b.nTHead, j = b.nTFoot, i = h(e), f = h(f), k = h(b.nTableWrapper), l = h.map(b.aoData, function (a) { return a.nTr }), o; b.bDestroying = !0; r(b, "aoDestroyCallback", "destroy", [b]); a || (new s(b)).columns().visible(!0); k.off(".DT").find(":not(tbody *)").off(".DT"); h(E).off(".DT-" + b.sInstance); e != g.parentNode && (i.children("thead").detach(), i.append(g)); j && e != j.parentNode && (i.children("tfoot").detach(), i.append(j)); b.aaSorting = []; b.aaSortingFixed = []; wa(b); h(l).removeClass(b.asStripeClasses.join(" ")); h("th, td", g).removeClass(d.sSortable + " " + d.sSortableAsc + " " + d.sSortableDesc + " " + d.sSortableNone); f.children().detach(); f.append(l); g = a ? "remove" : "detach"; i[g](); k[g](); !a && c && (c.insertBefore(e, b.nTableReinsertBefore), i.css("width", b.sDestroyWidth).removeClass(d.sTable), (o = b.asDestroyStripes.length) && f.children().each(function (a) { h(this).addClass(b.asDestroyStripes[a % o]) })); c = h.inArray(b, n.settings); -1 !== c && n.settings.splice(c, 1) }) }); h.each(["column", "row", "cell"], function (a, b) { o(b + "s().every()", function (a) { var d = this.selector.opts, e = this; return this.iterator(b, function (f, g, h, i, m) { a.call(e[b](g, "cell" === b ? h : d, "cell" === b ? d : k), g, h, i, m) }) }) }); o("i18n()", function (a, b, c) { var d = this.context[0], a = S(a)(d.oLanguage); a === k && (a = b); c !== k && h.isPlainObject(a) && (a = a[c] !== k ? a[c] : a._); return a.replace("%d", c) }); n.version = "1.10.18"; n.settings = []; n.models = {}; n.models.oSearch = { bCaseInsensitive: !0, sSearch: "", bRegex: !1, bSmart: !0 }; n.models.oRow = { nTr: null, anCells: null, _aData: [], _aSortData: null, _aFilterData: null, _sFilterRow: null, _sRowStripe: "", src: null, idx: -1 }; n.models.oColumn = { idx: null, aDataSort: null, asSorting: null, bSearchable: null, bSortable: null, bVisible: null, _sManualType: null, _bAttrSrc: !1, fnCreatedCell: null, fnGetData: null, fnSetData: null, mData: null, mRender: null, nTh: null, nTf: null, sClass: null, sContentPadding: null, sDefaultContent: null, sName: null, sSortDataType: "std", sSortingClass: null, sSortingClassJUI: null, sTitle: null, sType: null, sWidth: null, sWidthOrig: null }; n.defaults = {
        aaData: null, aaSorting: [[0, "asc"]], aaSortingFixed: [], ajax: null, aLengthMenu: [10, 25, 50, 100], aoColumns: null, aoColumnDefs: null, aoSearchCols: [], asStripeClasses: null, bAutoWidth: !0, bDeferRender: !1, bDestroy: !1, bFilter: !0, bInfo: !0, bLengthChange: !0, bPaginate: !0, bProcessing: !1, bRetrieve: !1, bScrollCollapse: !1, bServerSide: !1, bSort: !0, bSortMulti: !0, bSortCellsTop: !1, bSortClasses: !0, bStateSave: !1, fnCreatedRow: null, fnDrawCallback: null, fnFooterCallback: null, fnFormatNumber: function (a) { return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands) }, fnHeaderCallback: null, fnInfoCallback: null, fnInitComplete: null, fnPreDrawCallback: null, fnRowCallback: null, fnServerData: null, fnServerParams: null, fnStateLoadCallback: function (a) {
            try {
                return JSON.parse((-1 === a.iStateDuration ? sessionStorage : localStorage).getItem("DataTables_" +
                    a.sInstance + "_" + location.pathname))
            } catch (b) { }
        }, fnStateLoadParams: null, fnStateLoaded: null, fnStateSaveCallback: function (a, b) { try { (-1 === a.iStateDuration ? sessionStorage : localStorage).setItem("DataTables_" + a.sInstance + "_" + location.pathname, JSON.stringify(b)) } catch (c) { } }, fnStateSaveParams: null, iStateDuration: 7200, iDeferLoading: null, iDisplayLength: 10, iDisplayStart: 0, iTabIndex: 0, oClasses: {}, oLanguage: { oAria: { sSortAscending: ": activate to sort column ascending", sSortDescending: ": activate to sort column descending" }, oPaginate: { sFirst: "First", sLast: "Last", sNext: "Next", sPrevious: "Previous" }, sEmptyTable: "No data available in table", sInfo: "Showing _START_ to _END_ of _TOTAL_ entries", sInfoEmpty: "Showing 0 to 0 of 0 entries", sInfoFiltered: "(filtered from _MAX_ total entries)", sInfoPostFix: "", sDecimal: "", sThousands: ",", sLengthMenu: "Show _MENU_ entries", sLoadingRecords: "Loading...", sProcessing: "Processing...", sSearch: "Search:", sSearchPlaceholder: "", sUrl: "", sZeroRecords: "No matching records found" }, oSearch: h.extend({}, n.models.oSearch), sAjaxDataProp: "data", sAjaxSource: null, sDom: "lfrtip", searchDelay: null, sPaginationType: "simple_numbers", sScrollX: "", sScrollXInner: "", sScrollY: "", sServerMethod: "GET", renderer: null, rowId: "DT_RowId"
    }; Z(n.defaults); n.defaults.column = { aDataSort: null, iDataSort: -1, asSorting: ["asc", "desc"], bSearchable: !0, bSortable: !0, bVisible: !0, fnCreatedCell: null, mData: null, mRender: null, sCellType: "td", sClass: "", sContentPadding: "", sDefaultContent: null, sName: "", sSortDataType: "std", sTitle: null, sType: null, sWidth: null }; Z(n.defaults.column); n.models.oSettings = { oFeatures: { bAutoWidth: null, bDeferRender: null, bFilter: null, bInfo: null, bLengthChange: null, bPaginate: null, bProcessing: null, bServerSide: null, bSort: null, bSortMulti: null, bSortClasses: null, bStateSave: null }, oScroll: { bCollapse: null, iBarWidth: 0, sX: null, sXInner: null, sY: null }, oLanguage: { fnInfoCallback: null }, oBrowser: { bScrollOversize: !1, bScrollbarLeft: !1, bBounding: !1, barWidth: 0 }, ajax: null, aanFeatures: [], aoData: [], aiDisplay: [], aiDisplayMaster: [], aIds: {}, aoColumns: [], aoHeader: [], aoFooter: [], oPreviousSearch: {}, aoPreSearchCols: [], aaSorting: null, aaSortingFixed: [], asStripeClasses: null, asDestroyStripes: [], sDestroyWidth: 0, aoRowCallback: [], aoHeaderCallback: [], aoFooterCallback: [], aoDrawCallback: [], aoRowCreatedCallback: [], aoPreDrawCallback: [], aoInitComplete: [], aoStateSaveParams: [], aoStateLoadParams: [], aoStateLoaded: [], sTableId: "", nTable: null, nTHead: null, nTFoot: null, nTBody: null, nTableWrapper: null, bDeferLoading: !1, bInitialised: !1, aoOpenRows: [], sDom: null, searchDelay: null, sPaginationType: "two_button", iStateDuration: 0, aoStateSave: [], aoStateLoad: [], oSavedState: null, oLoadedState: null, sAjaxSource: null, sAjaxDataProp: null, bAjaxDataGet: !0, jqXHR: null, json: k, oAjaxData: k, fnServerData: null, aoServerParams: [], sServerMethod: null, fnFormatNumber: null, aLengthMenu: null, iDraw: 0, bDrawing: !1, iDrawError: -1, _iDisplayLength: 10, _iDisplayStart: 0, _iRecordsTotal: 0, _iRecordsDisplay: 0, oClasses: {}, bFiltered: !1, bSorted: !1, bSortCellsTop: null, oInit: null, aoDestroyCallback: [], fnRecordsTotal: function () { return "ssp" == y(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length }, fnRecordsDisplay: function () { return "ssp" == y(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length }, fnDisplayEnd: function () { var a = this._iDisplayLength, b = this._iDisplayStart, c = b + a, d = this.aiDisplay.length, e = this.oFeatures, f = e.bPaginate; return e.bServerSide ? !1 === f || -1 === a ? b + d : Math.min(b + a, this._iRecordsDisplay) : !f || c > d || -1 === a ? d : c }, oInstance: null, sInstance: null, iTabIndex: 0, nScrollHead: null, nScrollFoot: null, aLastSort: [], oPlugins: {}, rowIdFn: null, rowId: null }; n.ext = x = { buttons: {}, classes: {}, build: "bs/dt-1.10.18/af-2.3.0/b-1.5.2/cr-1.5.0/fc-3.2.5/fh-3.1.4/r-2.2.2", errMode: "alert", feature: [], search: [], selector: { cell: [], column: [], row: [] }, internal: {}, legacy: { ajax: null }, pager: {}, renderer: { pageButton: {}, header: {} }, order: {}, type: { detect: [], search: {}, order: {} }, _unique: 0, fnVersionCheck: n.fnVersionCheck, iApiIndex: 0, oJUIClasses: {}, sVersion: n.version }; h.extend(x, { afnFiltering: x.search, aTypes: x.type.detect, ofnSearch: x.type.search, oSort: x.type.order, afnSortData: x.order, aoFeatures: x.feature, oApi: x.internal, oStdClasses: x.classes, oPagination: x.pager }); h.extend(n.ext.classes, { sTable: "dataTable", sNoFooter: "no-footer", sPageButton: "paginate_button", sPageButtonActive: "current", sPageButtonDisabled: "disabled", sStripeOdd: "odd", sStripeEven: "even", sRowEmpty: "dataTables_empty", sWrapper: "dataTables_wrapper", sFilter: "dataTables_filter", sInfo: "dataTables_info", sPaging: "dataTables_paginate paging_", sLength: "dataTables_length", sProcessing: "dataTables_processing", sSortAsc: "sorting_asc", sSortDesc: "sorting_desc", sSortable: "sorting", sSortableAsc: "sorting_asc_disabled", sSortableDesc: "sorting_desc_disabled", sSortableNone: "sorting_disabled", sSortColumn: "sorting_", sFilterInput: "", sLengthSelect: "", sScrollWrapper: "dataTables_scroll", sScrollHead: "dataTables_scrollHead", sScrollHeadInner: "dataTables_scrollHeadInner", sScrollBody: "dataTables_scrollBody", sScrollFoot: "dataTables_scrollFoot", sScrollFootInner: "dataTables_scrollFootInner", sHeaderTH: "", sFooterTH: "", sSortJUIAsc: "", sSortJUIDesc: "", sSortJUI: "", sSortJUIAscAllowed: "", sSortJUIDescAllowed: "", sSortJUIWrapper: "", sSortIcon: "", sJUIHeader: "", sJUIFooter: "" }); var Kb = n.ext.pager; h.extend(Kb, { simple: function () { return ["previous", "next"] }, full: function () { return ["first", "previous", "next", "last"] }, numbers: function (a, b) { return [ia(a, b)] }, simple_numbers: function (a, b) { return ["previous", ia(a, b), "next"] }, full_numbers: function (a, b) { return ["first", "previous", ia(a, b), "next", "last"] }, first_last_numbers: function (a, b) { return ["first", ia(a, b), "last"] }, _numbers: ia, numbers_length: 7 }); h.extend(!0, n.ext.renderer, {
        pageButton: {
            _: function (a, b, c, d, e, f) {
                var g = a.oClasses, j = a.oLanguage.oPaginate, i = a.oLanguage.oAria.paginate || {}, m, l, n = 0, o = function (b, d) { var k, s, u, r, v = function (b) { Ta(a, b.data.action, true) }; k = 0; for (s = d.length; k < s; k++) { r = d[k]; if (h.isArray(r)) { u = h("<" + (r.DT_el || "div") + "/>").appendTo(b); o(u, r) } else { m = null; l = ""; switch (r) { case "ellipsis": b.append('<span class="ellipsis">&#x2026;</span>'); break; case "first": m = j.sFirst; l = r + (e > 0 ? "" : " " + g.sPageButtonDisabled); break; case "previous": m = j.sPrevious; l = r + (e > 0 ? "" : " " + g.sPageButtonDisabled); break; case "next": m = j.sNext; l = r + (e < f - 1 ? "" : " " + g.sPageButtonDisabled); break; case "last": m = j.sLast; l = r + (e < f - 1 ? "" : " " + g.sPageButtonDisabled); break; default: m = r + 1; l = e === r ? g.sPageButtonActive : "" }if (m !== null) { u = h("<a>", { "class": g.sPageButton + " " + l, "aria-controls": a.sTableId, "aria-label": i[r], "data-dt-idx": n, tabindex: a.iTabIndex, id: c === 0 && typeof r === "string" ? a.sTableId + "_" + r : null }).html(m).appendTo(b); Wa(u, { action: r }, v); n++ } } } }, s; try { s = h(b).find(H.activeElement).data("dt-idx") } catch (u) { } o(h(b).empty(), d); s !== k && h(b).find("[data-dt-idx=" +
                    s + "]").focus()
            }
        }
    }); h.extend(n.ext.type.detect, [function (a, b) { var c = b.oLanguage.sDecimal; return $a(a, c) ? "num" + c : null }, function (a) { if (a && !(a instanceof Date) && !Zb.test(a)) return null; var b = Date.parse(a); return null !== b && !isNaN(b) || M(a) ? "date" : null }, function (a, b) { var c = b.oLanguage.sDecimal; return $a(a, c, !0) ? "num-fmt" + c : null }, function (a, b) { var c = b.oLanguage.sDecimal; return Pb(a, c) ? "html-num" + c : null }, function (a, b) { var c = b.oLanguage.sDecimal; return Pb(a, c, !0) ? "html-num-fmt" + c : null }, function (a) { return M(a) || "string" === typeof a && -1 !== a.indexOf("<") ? "html" : null }]); h.extend(n.ext.type.search, { html: function (a) { return M(a) ? a : "string" === typeof a ? a.replace(Mb, " ").replace(Aa, "") : "" }, string: function (a) { return M(a) ? a : "string" === typeof a ? a.replace(Mb, " ") : a } }); var za = function (a, b, c, d) { if (0 !== a && (!a || "-" === a)) return -Infinity; b && (a = Ob(a, b)); a.replace && (c && (a = a.replace(c, "")), d && (a = a.replace(d, ""))); return 1 * a }; h.extend(x.type.order, { "date-pre": function (a) { a = Date.parse(a); return isNaN(a) ? -Infinity : a }, "html-pre": function (a) { return M(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + "" }, "string-pre": function (a) { return M(a) ? "" : "string" === typeof a ? a.toLowerCase() : !a.toString ? "" : a.toString() }, "string-asc": function (a, b) { return a < b ? -1 : a > b ? 1 : 0 }, "string-desc": function (a, b) { return a < b ? 1 : a > b ? -1 : 0 } }); Da(""); h.extend(!0, n.ext.renderer, { header: { _: function (a, b, c, d) { h(a.nTable).on("order.dt.DT", function (e, f, g, h) { if (a === f) { e = c.idx; b.removeClass(c.sSortingClass + " " + d.sSortAsc + " " + d.sSortDesc).addClass(h[e] == "asc" ? d.sSortAsc : h[e] == "desc" ? d.sSortDesc : c.sSortingClass) } }) }, jqueryui: function (a, b, c, d) { h("<div/>").addClass(d.sSortJUIWrapper).append(b.contents()).append(h("<span/>").addClass(d.sSortIcon + " " + c.sSortingClassJUI)).appendTo(b); h(a.nTable).on("order.dt.DT", function (e, f, g, h) { if (a === f) { e = c.idx; b.removeClass(d.sSortAsc + " " + d.sSortDesc).addClass(h[e] == "asc" ? d.sSortAsc : h[e] == "desc" ? d.sSortDesc : c.sSortingClass); b.find("span." + d.sSortIcon).removeClass(d.sSortJUIAsc + " " + d.sSortJUIDesc + " " + d.sSortJUI + " " + d.sSortJUIAscAllowed + " " + d.sSortJUIDescAllowed).addClass(h[e] == "asc" ? d.sSortJUIAsc : h[e] == "desc" ? d.sSortJUIDesc : c.sSortingClassJUI) } }) } } }); var Vb = function (a) { return "string" === typeof a ? a.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : a }; n.render = { number: function (a, b, c, d, e) { return { display: function (f) { if ("number" !== typeof f && "string" !== typeof f) return f; var g = 0 > f ? "-" : "", h = parseFloat(f); if (isNaN(h)) return Vb(f); h = h.toFixed(c); f = Math.abs(h); h = parseInt(f, 10); f = c ? b + (f - h).toFixed(c).substring(2) : ""; return g + (d || "") + h.toString().replace(/\B(?=(\d{3})+(?!\d))/g, a) + f + (e || "") } } }, text: function () { return { display: Vb } } }; h.extend(n.ext.internal, { _fnExternApiFunc: Lb, _fnBuildAjax: sa, _fnAjaxUpdate: lb, _fnAjaxParameters: ub, _fnAjaxUpdateDraw: vb, _fnAjaxDataSrc: ta, _fnAddColumn: Ea, _fnColumnOptions: ka, _fnAdjustColumnSizing: $, _fnVisibleToColumnIndex: aa, _fnColumnIndexToVisible: ba, _fnVisbleColumns: V, _fnGetColumns: ma, _fnColumnTypes: Ga, _fnApplyColumnDefs: ib, _fnHungarianMap: Z, _fnCamelToHungarian: J, _fnLanguageCompat: Ca, _fnBrowserDetect: gb, _fnAddData: O, _fnAddTr: na, _fnNodeToDataIndex: function (a, b) { return b._DT_RowIndex !== k ? b._DT_RowIndex : null }, _fnNodeToColumnIndex: function (a, b, c) { return h.inArray(c, a.aoData[b].anCells) }, _fnGetCellData: B, _fnSetCellData: jb, _fnSplitObjNotation: Ja, _fnGetObjectDataFn: S, _fnSetObjectDataFn: N, _fnGetDataMaster: Ka, _fnClearTable: oa, _fnDeleteIndex: pa, _fnInvalidate: da, _fnGetRowElements: Ia, _fnCreateTr: Ha, _fnBuildHead: kb, _fnDrawHead: fa, _fnDraw: P, _fnReDraw: T, _fnAddOptionsHtml: nb, _fnDetectHeader: ea, _fnGetUniqueThs: ra, _fnFeatureHtmlFilter: pb, _fnFilterComplete: ga, _fnFilterCustom: yb, _fnFilterColumn: xb, _fnFilter: wb, _fnFilterCreateSearch: Pa, _fnEscapeRegex: Qa, _fnFilterData: zb, _fnFeatureHtmlInfo: sb, _fnUpdateInfo: Cb, _fnInfoMacros: Db, _fnInitialise: ha, _fnInitComplete: ua, _fnLengthChange: Ra, _fnFeatureHtmlLength: ob, _fnFeatureHtmlPaginate: tb, _fnPageChange: Ta, _fnFeatureHtmlProcessing: qb, _fnProcessingDisplay: C, _fnFeatureHtmlTable: rb, _fnScrollDraw: la, _fnApplyToChildren: I, _fnCalculateColumnWidths: Fa, _fnThrottle: Oa, _fnConvertToWidth: Eb, _fnGetWidestNode: Fb, _fnGetMaxLenString: Gb, _fnStringToCss: v, _fnSortFlatten: X, _fnSort: mb, _fnSortAria: Ib, _fnSortListener: Va, _fnSortAttachListener: Ma, _fnSortingClasses: wa, _fnSortData: Hb, _fnSaveState: xa, _fnLoadState: Jb, _fnSettingsFromNode: ya, _fnLog: K, _fnMap: F, _fnBindAction: Wa, _fnCallbackReg: z, _fnCallbackFire: r, _fnLengthOverflow: Sa, _fnRenderer: Na, _fnDataSource: y, _fnRowAttributes: La, _fnExtend: Xa, _fnCalculateEnd: function () { } }); h.fn.dataTable = n; n.$ = h; h.fn.dataTableSettings = n.settings; h.fn.dataTableExt = n.ext; h.fn.DataTable = function (a) { return h(this).dataTable(a).api() }; h.each(n, function (a, b) { h.fn.DataTable[a] = b }); return h.fn.dataTable
});/*!
 DataTables Bootstrap 3 integration
 ©2011-2015 SpryMedia Ltd - datatables.net/license
*/(function (b) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (a) { return b(a, window, document) }) : "object" === typeof exports ? module.exports = function (a, d) { a || (a = window); if (!d || !d.fn.dataTable) d = require("datatables.net")(a, d).$; return b(d, a, a.document) } : b(jQuery, window, document) })(function (b, a, d, m) { var f = b.fn.dataTable; b.extend(!0, f.defaults, { dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>", renderer: "bootstrap" }); b.extend(f.ext.classes, { sWrapper: "dataTables_wrapper form-inline dt-bootstrap", sFilterInput: "form-control input-sm", sLengthSelect: "form-control input-sm", sProcessing: "dataTables_processing panel panel-default" }); f.ext.renderer.pageButton.bootstrap = function (a, h, r, s, j, n) { var o = new f.Api(a), t = a.oClasses, k = a.oLanguage.oPaginate, u = a.oLanguage.oAria.paginate || {}, e, g, p = 0, q = function (d, f) { var l, h, i, c, m = function (a) { a.preventDefault(); !b(a.currentTarget).hasClass("disabled") && o.page() != a.data.action && o.page(a.data.action).draw("page") }; l = 0; for (h = f.length; l < h; l++)if (c = f[l], b.isArray(c)) q(d, c); else { g = e = ""; switch (c) { case "ellipsis": e = "&#x2026;"; g = "disabled"; break; case "first": e = k.sFirst; g = c + (0 < j ? "" : " disabled"); break; case "previous": e = k.sPrevious; g = c + (0 < j ? "" : " disabled"); break; case "next": e = k.sNext; g = c + (j < n - 1 ? "" : " disabled"); break; case "last": e = k.sLast; g = c + (j < n - 1 ? "" : " disabled"); break; default: e = c + 1, g = j === c ? "active" : "" }e && (i = b("<li>", { "class": t.sPageButton + " " + g, id: 0 === r && "string" === typeof c ? a.sTableId + "_" + c : null }).append(b("<a>", { href: "#", "aria-controls": a.sTableId, "aria-label": u[c], "data-dt-idx": p, tabindex: a.iTabIndex }).html(e)).appendTo(d), a.oApi._fnBindAction(i, { action: c }, m), p++) } }, i; try { i = b(h).find(d.activeElement).data("dt-idx") } catch (v) { } q(b(h).empty().html('<ul class="pagination"/>').children("ul"), s); i !== m && b(h).find("[data-dt-idx=" + i + "]").focus() }; return f });/*!
 AutoFill 2.3.0
 ©2008-2018 SpryMedia Ltd - datatables.net/license
*/(function (f) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (j) { return f(j, window, document) }) : "object" === typeof exports ? module.exports = function (j, k) { j || (j = window); if (!k || !k.fn.dataTable) k = require("datatables.net")(j, k).$; return f(k, j, j.document) } : f(jQuery, window, document) })(function (f, j, k, q) { var l = f.fn.dataTable, s = 0, h = function (b, c) { if (!l.versionCheck || !l.versionCheck("1.10.8")) throw "Warning: AutoFill requires DataTables 1.10.8 or greater"; this.c = f.extend(!0, {}, l.defaults.autoFill, h.defaults, c); this.s = { dt: new l.Api(b), namespace: ".autoFill" + s++, scroll: {}, scrollInterval: null, handle: { height: 0, width: 0 }, enabled: !1 }; this.dom = { handle: f('<div class="dt-autofill-handle"/>'), select: { top: f('<div class="dt-autofill-select top"/>'), right: f('<div class="dt-autofill-select right"/>'), bottom: f('<div class="dt-autofill-select bottom"/>'), left: f('<div class="dt-autofill-select left"/>') }, background: f('<div class="dt-autofill-background"/>'), list: f('<div class="dt-autofill-list">' + this.s.dt.i18n("autoFill.info", "") + "<ul/></div>"), dtScroll: null, offsetParent: null }; this._constructor() }; f.extend(h.prototype, { enabled: function () { return this.s.enabled }, enable: function (b) { var c = this; if (!1 === b) return this.disable(); this.s.enabled = !0; this._focusListener(); this.dom.handle.on("mousedown", function (a) { c._mousedown(a); return !1 }); return this }, disable: function () { this.s.enabled = !1; this._focusListenerRemove(); return this }, _constructor: function () { var b = this, c = this.s.dt, a = f("div.dataTables_scrollBody", this.s.dt.table().container()); c.settings()[0].autoFill = this; a.length && (this.dom.dtScroll = a, "static" === a.css("position") && a.css("position", "relative")); !1 !== this.c.enable && this.enable(); c.on("destroy.autoFill", function () { b._focusListenerRemove() }) }, _attach: function (b) { var c = this.s.dt, a = c.cell(b).index(), d = this.dom.handle, e = this.s.handle; if (!a || -1 === c.columns(this.c.columns).indexes().indexOf(a.column)) this._detach(); else { this.dom.offsetParent || (this.dom.offsetParent = f(c.table().node()).offsetParent()); if (!e.height || !e.width) d.appendTo("body"), e.height = d.outerHeight(), e.width = d.outerWidth(); c = this._getPosition(b, this.dom.offsetParent); this.dom.attachedTo = b; d.css({ top: c.top + b.offsetHeight - e.height, left: c.left + b.offsetWidth - e.width }).appendTo(this.dom.offsetParent) } }, _actionSelector: function (b) { var c = this, a = this.s.dt, d = h.actions, e = []; f.each(d, function (c, d) { d.available(a, b) && e.push(c) }); if (1 === e.length && !1 === this.c.alwaysAsk) { var i = d[e[0]].execute(a, b); this._update(i, b) } else { var g = this.dom.list.children("ul").empty(); e.push("cancel"); f.each(e, function (e, i) { g.append(f("<li/>").append('<div class="dt-autofill-question">' + d[i].option(a, b) + "<div>").append(f('<div class="dt-autofill-button">').append(f('<button class="' + h.classes.btn + '">' + a.i18n("autoFill.button", "&gt;") + "</button>").on("click", function () { var e = d[i].execute(a, b, f(this).closest("li")); c._update(e, b); c.dom.background.remove(); c.dom.list.remove() })))) }); this.dom.background.appendTo("body"); this.dom.list.appendTo("body"); this.dom.list.css("margin-top", -1 * (this.dom.list.outerHeight() / 2)) } }, _detach: function () { this.dom.attachedTo = null; this.dom.handle.detach() }, _drawSelection: function (b) { var c = this.s.dt, a = this.s.start, d = f(this.dom.start), e = { row: this.c.vertical ? c.rows({ page: "current" }).nodes().indexOf(b.parentNode) : a.row, column: this.c.horizontal ? f(b).index() : a.column }, b = c.column.index("toData", e.column), i = f(c.cell(":eq(" + e.row + ")", b).node()); if (c.cell(i).any() && -1 !== c.columns(this.c.columns).indexes().indexOf(b)) { this.s.end = e; var g, c = a.row < e.row ? d : i; g = a.row < e.row ? i : d; b = a.column < e.column ? d : i; d = a.column < e.column ? i : d; c = this._getPosition(c).top; b = this._getPosition(b).left; a = this._getPosition(g).top + g.outerHeight() - c; d = this._getPosition(d).left + d.outerWidth() - b; e = this.dom.select; e.top.css({ top: c, left: b, width: d }); e.left.css({ top: c, left: b, height: a }); e.bottom.css({ top: c + a, left: b, width: d }); e.right.css({ top: c, left: b + d, height: a }) } }, _editor: function (b) { var c = this.s.dt, a = this.c.editor; if (a) { for (var d = {}, e = [], f = a.fields(), g = 0, k = b.length; g < k; g++)for (var h = 0, j = b[g].length; h < j; h++) { var m = b[g][h], n = c.settings()[0].aoColumns[m.index.column], o = n.editField; if (o === q) for (var n = n.mData, l = 0, p = f.length; l < p; l++) { var r = a.field(f[l]); if (r.dataSrc() === n) { o = r.name(); break } } if (!o) throw "Could not automatically determine field data. Please see https://datatables.net/tn/11"; d[o] || (d[o] = {}); n = c.row(m.index.row).id(); d[o][n] = m.set; e.push(m.index) } a.bubble(e, !1).multiSet(d).submit() } }, _emitEvent: function (b, c) { this.s.dt.iterator("table", function (a) { f(a.nTable).triggerHandler(b + ".dt", c) }) }, _focusListener: function () { var b = this, c = this.s.dt, a = this.s.namespace, d = null !== this.c.focus ? this.c.focus : c.init().keys || c.settings()[0].keytable ? "focus" : "hover"; if ("focus" === d) c.on("key-focus.autoFill", function (a, c, d) { b._attach(d.node()) }).on("key-blur.autoFill", function () { b._detach() }); else if ("click" === d) f(c.table().body()).on("click" + a, "td, th", function () { b._attach(this) }), f(k.body).on("click" + a, function (a) { f(a.target).parents().filter(c.table().body()).length || b._detach() }); else f(c.table().body()).on("mouseenter" + a, "td, th", function () { b._attach(this) }).on("mouseleave" + a, function (a) { f(a.relatedTarget).hasClass("dt-autofill-handle") || b._detach() }) }, _focusListenerRemove: function () { var b = this.s.dt; b.off(".autoFill"); f(b.table().body()).off(this.s.namespace); f(k.body).off(this.s.namespace) }, _getPosition: function (b, c) { var a = f(b), d, e, i = 0, g = 0; c || (c = f(f(this.s.dt.table().node())[0].offsetParent)); do { e = a.position(); d = f(a[0].offsetParent); i += e.top + d.scrollTop(); g += e.left + d.scrollLeft(); i += 1 * parseInt(d.css("margin-top")); i += 1 * parseInt(d.css("border-top-width")); if ("body" === a.get(0).nodeName.toLowerCase()) break; a = d } while (d.get(0) !== c.get(0)); return { top: i, left: g } }, _mousedown: function (b) { var c = this, a = this.s.dt; this.dom.start = this.dom.attachedTo; this.s.start = { row: a.rows({ page: "current" }).nodes().indexOf(f(this.dom.start).parent()[0]), column: f(this.dom.start).index() }; f(k.body).on("mousemove.autoFill", function (a) { c._mousemove(a) }).on("mouseup.autoFill", function (a) { c._mouseup(a) }); var d = this.dom.select, a = f(a.table().node()).offsetParent(); d.top.appendTo(a); d.left.appendTo(a); d.right.appendTo(a); d.bottom.appendTo(a); this._drawSelection(this.dom.start, b); this.dom.handle.css("display", "none"); b = this.dom.dtScroll; this.s.scroll = { windowHeight: f(j).height(), windowWidth: f(j).width(), dtTop: b ? b.offset().top : null, dtLeft: b ? b.offset().left : null, dtHeight: b ? b.outerHeight() : null, dtWidth: b ? b.outerWidth() : null } }, _mousemove: function (b) { var c = b.target.nodeName.toLowerCase(); "td" !== c && "th" !== c || (this._drawSelection(b.target, b), this._shiftScroll(b)) }, _mouseup: function (b) { f(k.body).off(".autoFill"); var c = this, a = this.s.dt, d = this.dom.select; d.top.remove(); d.left.remove(); d.right.remove(); d.bottom.remove(); this.dom.handle.css("display", "block"); var d = this.s.start, e = this.s.end; if (!(d.row === e.row && d.column === e.column)) { var i = a.cell(":eq(" + d.row + ")", d.column + ":visible", { page: "current" }); if (f("div.DTE", i.node()).length) { var g = a.editor(); g.on("submitSuccess.kt", function () { g.off(".kt"); c._mouseup(b) }).on("submitComplete.kt preSubmitCancelled.kt", function () { g.off(".kt") }); g.submit() } else { for (var h = this._range(d.row, e.row), d = this._range(d.column, e.column), e = [], j = a.settings()[0], l = j.aoColumns, m = 0; m < h.length; m++)e.push(f.map(d, function (b) { var b = a.cell(":eq(" + h[m] + ")", b + ":visible", { page: "current" }), c = b.data(), d = b.index(), e = l[d.column].editField; e !== q && (c = j.oApi._fnGetObjectDataFn(e)(a.row(d.row).data())); return { cell: b, data: c, label: b.data(), index: d } })); this._actionSelector(e); clearInterval(this.s.scrollInterval); this.s.scrollInterval = null } } }, _range: function (b, c) { var a = [], d; if (b <= c) for (d = b; d <= c; d++)a.push(d); else for (d = b; d >= c; d--)a.push(d); return a }, _shiftScroll: function (b) { var c = this, a = this.s.scroll, d = !1, e = b.pageY - k.body.scrollTop, f = b.pageX - k.body.scrollLeft, g, h, j, l; 65 > e ? g = -5 : e > a.windowHeight - 65 && (g = 5); 65 > f ? h = -5 : f > a.windowWidth - 65 && (h = 5); null !== a.dtTop && b.pageY < a.dtTop + 65 ? j = -5 : null !== a.dtTop && b.pageY > a.dtTop + a.dtHeight - 65 && (j = 5); null !== a.dtLeft && b.pageX < a.dtLeft + 65 ? l = -5 : null !== a.dtLeft && b.pageX > a.dtLeft + a.dtWidth - 65 && (l = 5); g || h || j || l ? (a.windowVert = g, a.windowHoriz = h, a.dtVert = j, a.dtHoriz = l, d = !0) : this.s.scrollInterval && (clearInterval(this.s.scrollInterval), this.s.scrollInterval = null); !this.s.scrollInterval && d && (this.s.scrollInterval = setInterval(function () { if (a.windowVert) k.body.scrollTop = k.body.scrollTop + a.windowVert; if (a.windowHoriz) k.body.scrollLeft = k.body.scrollLeft + a.windowHoriz; if (a.dtVert || a.dtHoriz) { var b = c.dom.dtScroll[0]; if (a.dtVert) b.scrollTop = b.scrollTop + a.dtVert; if (a.dtHoriz) b.scrollLeft = b.scrollLeft + a.dtHoriz } }, 20)) }, _update: function (b, c) { if (!1 !== b) { var a = this.s.dt, d; this._emitEvent("preAutoFill", [a, c]); this._editor(c); if (null !== this.c.update ? this.c.update : !this.c.editor) { for (var e = 0, f = c.length; e < f; e++)for (var g = 0, h = c[e].length; g < h; g++)d = c[e][g], d.cell.data(d.set); a.draw(!1) } this._emitEvent("autoFill", [a, c]) } } }); h.actions = { increment: { available: function (b, c) { var a = c[0][0].label; return !isNaN(a - parseFloat(a)) }, option: function (b) { return b.i18n("autoFill.increment", 'Increment / decrement each cell by: <input type="number" value="1">') }, execute: function (b, c, a) { for (var b = 1 * c[0][0].data, a = 1 * f("input", a).val(), d = 0, e = c.length; d < e; d++)for (var i = 0, g = c[d].length; i < g; i++)c[d][i].set = b, b += a } }, fill: { available: function () { return !0 }, option: function (b, c) { return b.i18n("autoFill.fill", "Fill all cells with <i>" + c[0][0].label + "</i>") }, execute: function (b, c) { for (var a = c[0][0].data, d = 0, e = c.length; d < e; d++)for (var f = 0, g = c[d].length; f < g; f++)c[d][f].set = a } }, fillHorizontal: { available: function (b, c) { return 1 < c.length && 1 < c[0].length }, option: function (b) { return b.i18n("autoFill.fillHorizontal", "Fill cells horizontally") }, execute: function (b, c) { for (var a = 0, d = c.length; a < d; a++)for (var e = 0, f = c[a].length; e < f; e++)c[a][e].set = c[a][0].data } }, fillVertical: { available: function (b, c) { return 1 < c.length && 1 < c[0].length }, option: function (b) { return b.i18n("autoFill.fillVertical", "Fill cells vertically") }, execute: function (b, c) { for (var a = 0, d = c.length; a < d; a++)for (var e = 0, f = c[a].length; e < f; e++)c[a][e].set = c[0][e].data } }, cancel: { available: function () { return !1 }, option: function (b) { return b.i18n("autoFill.cancel", "Cancel") }, execute: function () { return !1 } } }; h.version = "2.3.0"; h.defaults = { alwaysAsk: !1, focus: null, columns: "", enable: !0, update: null, editor: null, vertical: !0, horizontal: !0 }; h.classes = { btn: "btn" }; var p = f.fn.dataTable.Api; p.register("autoFill()", function () { return this }); p.register("autoFill().enabled()", function () { var b = this.context[0]; return b.autoFill ? b.autoFill.enabled() : !1 }); p.register("autoFill().enable()", function (b) { return this.iterator("table", function (c) { c.autoFill && c.autoFill.enable(b) }) }); p.register("autoFill().disable()", function () { return this.iterator("table", function (b) { b.autoFill && b.autoFill.disable() }) }); f(k).on("preInit.dt.autofill", function (b, c) { if ("dt" === b.namespace) { var a = c.oInit.autoFill, d = l.defaults.autoFill; if (a || d) d = f.extend({}, a, d), !1 !== a && new h(c, d) } }); l.AutoFill = h; return l.AutoFill = h });/*!
 Bootstrap integration for DataTables' AutoFill
 ©2015 SpryMedia Ltd - datatables.net/license
*/(function (a) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net-bs", "datatables.net-autofill"], function (b) { return a(b, window, document) }) : "object" === typeof exports ? module.exports = function (b, c) { b || (b = window); if (!c || !c.fn.dataTable) c = require("datatables.net-bs")(b, c).$; c.fn.dataTable.AutoFill || require("datatables.net-autofill")(b, c); return a(c, b, b.document) } : a(jQuery, window, document) })(function (a) { a = a.fn.dataTable; a.AutoFill.classes.btn = "btn btn-primary"; return a });/*!
 Buttons for DataTables 1.5.2
 ©2016-2018 SpryMedia Ltd - datatables.net/license
*/(function (d) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (n) { return d(n, window, document) }) : "object" === typeof exports ? module.exports = function (n, o) { n || (n = window); if (!o || !o.fn.dataTable) o = require("datatables.net")(n, o).$; return d(o, n, n.document) } : d(jQuery, window, document) })(function (d, n, o, m) {
    var i = d.fn.dataTable, x = 0, y = 0, k = i.ext.buttons, l = function (a, b) { "undefined" === typeof b && (b = {}); !0 === b && (b = {}); d.isArray(b) && (b = { buttons: b }); this.c = d.extend(!0, {}, l.defaults, b); b.buttons && (this.c.buttons = b.buttons); this.s = { dt: new i.Api(a), buttons: [], listenKeys: "", namespace: "dtb" + x++ }; this.dom = { container: d("<" + this.c.dom.container.tag + "/>").addClass(this.c.dom.container.className) }; this._constructor() }; d.extend(l.prototype, { action: function (a, b) { var c = this._nodeToButton(a); if (b === m) return c.conf.action; c.conf.action = b; return this }, active: function (a, b) { var c = this._nodeToButton(a), e = this.c.dom.button.active, c = d(c.node); if (b === m) return c.hasClass(e); c.toggleClass(e, b === m ? !0 : b); return this }, add: function (a, b) { var c = this.s.buttons; if ("string" === typeof b) { for (var e = b.split("-"), c = this.s, d = 0, h = e.length - 1; d < h; d++)c = c.buttons[1 * e[d]]; c = c.buttons; b = 1 * e[e.length - 1] } this._expandButton(c, a, !1, b); this._draw(); return this }, container: function () { return this.dom.container }, disable: function (a) { a = this._nodeToButton(a); d(a.node).addClass(this.c.dom.button.disabled); return this }, destroy: function () { d("body").off("keyup." + this.s.namespace); var a = this.s.buttons.slice(), b, c; b = 0; for (c = a.length; b < c; b++)this.remove(a[b].node); this.dom.container.remove(); a = this.s.dt.settings()[0]; b = 0; for (c = a.length; b < c; b++)if (a.inst === this) { a.splice(b, 1); break } return this }, enable: function (a, b) { if (!1 === b) return this.disable(a); var c = this._nodeToButton(a); d(c.node).removeClass(this.c.dom.button.disabled); return this }, name: function () { return this.c.name }, node: function (a) { a = this._nodeToButton(a); return d(a.node) }, processing: function (a, b) { var c = this._nodeToButton(a); if (b === m) return d(c.node).hasClass("processing"); d(c.node).toggleClass("processing", b); return this }, remove: function (a) { var b = this._nodeToButton(a), c = this._nodeToHost(a), e = this.s.dt; if (b.buttons.length) for (var g = b.buttons.length - 1; 0 <= g; g--)this.remove(b.buttons[g].node); b.conf.destroy && b.conf.destroy.call(e.button(a), e, d(a), b.conf); this._removeKey(b.conf); d(b.node).remove(); a = d.inArray(b, c); c.splice(a, 1); return this }, text: function (a, b) { var c = this._nodeToButton(a), e = this.c.dom.collection.buttonLiner, e = c.inCollection && e && e.tag ? e.tag : this.c.dom.buttonLiner.tag, g = this.s.dt, h = d(c.node), f = function (a) { return "function" === typeof a ? a(g, h, c.conf) : a }; if (b === m) return f(c.conf.text); c.conf.text = b; e ? h.children(e).html(f(b)) : h.html(f(b)); return this }, _constructor: function () { var a = this, b = this.s.dt, c = b.settings()[0], e = this.c.buttons; c._buttons || (c._buttons = []); c._buttons.push({ inst: this, name: this.c.name }); for (var g = 0, h = e.length; g < h; g++)this.add(e[g]); b.on("destroy", function (b, e) { e === c && a.destroy() }); d("body").on("keyup." + this.s.namespace, function (b) { if (!o.activeElement || o.activeElement === o.body) { var c = String.fromCharCode(b.keyCode).toLowerCase(); a.s.listenKeys.toLowerCase().indexOf(c) !== -1 && a._keypress(c, b) } }) }, _addKey: function (a) { a.key && (this.s.listenKeys += d.isPlainObject(a.key) ? a.key.key : a.key) }, _draw: function (a, b) { a || (a = this.dom.container, b = this.s.buttons); a.children().detach(); for (var c = 0, e = b.length; c < e; c++)a.append(b[c].inserter), a.append(" "), b[c].buttons && b[c].buttons.length && this._draw(b[c].collection, b[c].buttons) }, _expandButton: function (a, b, c, e) { for (var g = this.s.dt, h = 0, b = !d.isArray(b) ? [b] : b, f = 0, q = b.length; f < q; f++) { var j = this._resolveExtends(b[f]); if (j) if (d.isArray(j)) this._expandButton(a, j, c, e); else { var p = this._buildButton(j, c); if (p) { e !== m ? (a.splice(e, 0, p), e++) : a.push(p); if (p.conf.buttons) { var u = this.c.dom.collection; p.collection = d("<" + u.tag + "/>").addClass(u.className).attr("role", "menu"); p.conf._collection = p.collection; this._expandButton(p.buttons, p.conf.buttons, !0, e) } j.init && j.init.call(g.button(p.node), g, d(p.node), j); h++ } } } }, _buildButton: function (a, b) { var c = this.c.dom.button, e = this.c.dom.buttonLiner, g = this.c.dom.collection, h = this.s.dt, f = function (b) { return "function" === typeof b ? b(h, j, a) : b }; b && g.button && (c = g.button); b && g.buttonLiner && (e = g.buttonLiner); if (a.available && !a.available(h, a)) return !1; var q = function (a, b, c, e) { e.action.call(b.button(c), a, b, c, e); d(b.table().node()).triggerHandler("buttons-action.dt", [b.button(c), b, c, e]) }, g = a.tag || c.tag, j = d("<" + g + "/>").addClass(c.className).attr("tabindex", this.s.dt.settings()[0].iTabIndex).attr("aria-controls", this.s.dt.table().node().id).on("click.dtb", function (b) { b.preventDefault(); !j.hasClass(c.disabled) && a.action && q(b, h, j, a); j.blur() }).on("keyup.dtb", function (b) { b.keyCode === 13 && !j.hasClass(c.disabled) && a.action && q(b, h, j, a) }); "a" === g.toLowerCase() && j.attr("href", "#"); "button" === g.toLowerCase() && j.attr("type", "button"); e.tag ? (g = d("<" + e.tag + "/>").html(f(a.text)).addClass(e.className), "a" === e.tag.toLowerCase() && g.attr("href", "#"), j.append(g)) : j.html(f(a.text)); !1 === a.enabled && j.addClass(c.disabled); a.className && j.addClass(a.className); a.titleAttr && j.attr("title", f(a.titleAttr)); a.attr && j.attr(a.attr); a.namespace || (a.namespace = ".dt-button-" + y++); e = (e = this.c.dom.buttonContainer) && e.tag ? d("<" + e.tag + "/>").addClass(e.className).append(j) : j; this._addKey(a); return { conf: a, node: j.get(0), inserter: e, buttons: [], inCollection: b, collection: null } }, _nodeToButton: function (a, b) { b || (b = this.s.buttons); for (var c = 0, e = b.length; c < e; c++) { if (b[c].node === a) return b[c]; if (b[c].buttons.length) { var d = this._nodeToButton(a, b[c].buttons); if (d) return d } } }, _nodeToHost: function (a, b) { b || (b = this.s.buttons); for (var c = 0, e = b.length; c < e; c++) { if (b[c].node === a) return b; if (b[c].buttons.length) { var d = this._nodeToHost(a, b[c].buttons); if (d) return d } } }, _keypress: function (a, b) { if (!b._buttonsHandled) { var c = function (e) { for (var g = 0, h = e.length; g < h; g++) { var f = e[g].conf, q = e[g].node; if (f.key) if (f.key === a) b._buttonsHandled = !0, d(q).click(); else if (d.isPlainObject(f.key) && f.key.key === a && (!f.key.shiftKey || b.shiftKey)) if (!f.key.altKey || b.altKey) if (!f.key.ctrlKey || b.ctrlKey) if (!f.key.metaKey || b.metaKey) b._buttonsHandled = !0, d(q).click(); e[g].buttons.length && c(e[g].buttons) } }; c(this.s.buttons) } }, _removeKey: function (a) { if (a.key) { var b = d.isPlainObject(a.key) ? a.key.key : a.key, a = this.s.listenKeys.split(""), b = d.inArray(b, a); a.splice(b, 1); this.s.listenKeys = a.join("") } }, _resolveExtends: function (a) { for (var b = this.s.dt, c, e, g = function (c) { for (var e = 0; !d.isPlainObject(c) && !d.isArray(c);) { if (c === m) return; if ("function" === typeof c) { if (c = c(b, a), !c) return !1 } else if ("string" === typeof c) { if (!k[c]) throw "Unknown button type: " + c; c = k[c] } e++; if (30 < e) throw "Buttons: Too many iterations"; } return d.isArray(c) ? c : d.extend({}, c) }, a = g(a); a && a.extend;) { if (!k[a.extend]) throw "Cannot extend unknown button type: " + a.extend; var h = g(k[a.extend]); if (d.isArray(h)) return h; if (!h) return !1; c = h.className; a = d.extend({}, h, a); c && a.className !== c && (a.className = c + " " + a.className); var f = a.postfixButtons; if (f) { a.buttons || (a.buttons = []); c = 0; for (e = f.length; c < e; c++)a.buttons.push(f[c]); a.postfixButtons = null } if (f = a.prefixButtons) { a.buttons || (a.buttons = []); c = 0; for (e = f.length; c < e; c++)a.buttons.splice(c, 0, f[c]); a.prefixButtons = null } a.extend = h.extend } return a } }); l.background = function (a, b, c) { c === m && (c = 400); a ? d("<div/>").addClass(b).css("display", "none").appendTo("body").fadeIn(c) : d("body > div." + b).fadeOut(c, function () { d(this).removeClass(b).remove() }) }; l.instanceSelector = function (a, b) { if (!a) return d.map(b, function (a) { return a.inst }); var c = [], e = d.map(b, function (a) { return a.name }), g = function (a) { if (d.isArray(a)) for (var f = 0, q = a.length; f < q; f++)g(a[f]); else "string" === typeof a ? -1 !== a.indexOf(",") ? g(a.split(",")) : (a = d.inArray(d.trim(a), e), -1 !== a && c.push(b[a].inst)) : "number" === typeof a && c.push(b[a].inst) }; g(a); return c }; l.buttonSelector = function (a, b) {
        for (var c = [], e = function (a, b, c) { for (var d, g, f = 0, h = b.length; f < h; f++)if (d = b[f]) g = c !== m ? c + f : f + "", a.push({ node: d.node, name: d.conf.name, idx: g }), d.buttons && e(a, d.buttons, g + "-") }, g = function (a, b) {
            var f, h, i = []; e(i, b.s.buttons); f = d.map(i, function (a) { return a.node }); if (d.isArray(a) || a instanceof
                d) { f = 0; for (h = a.length; f < h; f++)g(a[f], b) } else if (null === a || a === m || "*" === a) { f = 0; for (h = i.length; f < h; f++)c.push({ inst: b, node: i[f].node }) } else if ("number" === typeof a) c.push({ inst: b, node: b.s.buttons[a].node }); else if ("string" === typeof a) if (-1 !== a.indexOf(",")) { i = a.split(","); f = 0; for (h = i.length; f < h; f++)g(d.trim(i[f]), b) } else if (a.match(/^\d+(\-\d+)*$/)) f = d.map(i, function (a) { return a.idx }), c.push({ inst: b, node: i[d.inArray(a, f)].node }); else if (-1 !== a.indexOf(":name")) { var k = a.replace(":name", ""); f = 0; for (h = i.length; f < h; f++)i[f].name === k && c.push({ inst: b, node: i[f].node }) } else d(f).filter(a).each(function () { c.push({ inst: b, node: this }) }); else "object" === typeof a && a.nodeName && (i = d.inArray(a, f), -1 !== i && c.push({ inst: b, node: f[i] }))
        }, h = 0, f = a.length; h < f; h++)g(b, a[h]); return c
    }; l.defaults = { buttons: ["copy", "excel", "csv", "pdf", "print"], name: "main", tabIndex: 0, dom: { container: { tag: "div", className: "dt-buttons" }, collection: { tag: "div", className: "dt-button-collection" }, button: { tag: "button", className: "dt-button", active: "active", disabled: "disabled" }, buttonLiner: { tag: "span", className: "" } } }; l.version = "1.5.2"; d.extend(k, { collection: { text: function (a) { return a.i18n("buttons.collection", "Collection") }, className: "buttons-collection", action: function (a, b, c, e) { var g = d(c).parents("div.dt-button-collection"), a = c.position(), h = d(b.table().container()), f = !1, i = c; g.length && (f = d(".dt-button-collection").position(), i = g, d("body").trigger("click.dtb-collection")); i.parents("body")[0] !== o.body && (i = o.body.lastChild); e._collection.addClass(e.collectionLayout).css("display", "none").insertAfter(i).fadeIn(e.fade); g = e._collection.css("position"); f && "absolute" === g ? e._collection.css({ top: f.top, left: f.left }) : "absolute" === g ? (e._collection.css({ top: a.top + c.outerHeight(), left: a.left }), f = h.offset().top + h.height(), f = a.top + c.outerHeight() + e._collection.outerHeight() - f, g = a.top - e._collection.outerHeight(), g = h.offset().top - g, (f > g || e.dropup) && e._collection.css("top", a.top - e._collection.outerHeight() - 5), f = a.left + e._collection.outerWidth(), h = h.offset().left + h.width(), f > h && e._collection.css("left", a.left - (f - h)), c = c.offset().left + e._collection.outerWidth(), c > d(n).width() && e._collection.css("left", a.left - (c - d(n).width()))) : (c = e._collection.height() / 2, c > d(n).height() / 2 && (c = d(n).height() / 2), e._collection.css("marginTop", -1 * c)); e.background && l.background(!0, e.backgroundClassName, e.fade); var j = function () { e._collection.fadeOut(e.fade, function () { e._collection.detach() }); d("div.dt-button-background").off("click.dtb-collection"); l.background(false, e.backgroundClassName, e.fade); d("body").off(".dtb-collection"); b.off("buttons-action.b-internal") }; setTimeout(function () { d("div.dt-button-background").on("click.dtb-collection", function () { }); d("body").on("click.dtb-collection", function (a) { var b = d.fn.addBack ? "addBack" : "andSelf"; d(a.target).parents()[b]().filter(e._collection).length || j() }).on("keyup.dtb-collection", function (a) { a.keyCode === 27 && j() }); if (e.autoClose) b.on("buttons-action.b-internal", function () { j() }) }, 10) }, background: !0, collectionLayout: "", backgroundClassName: "dt-button-background", autoClose: !1, fade: 400, attr: { "aria-haspopup": !0 } }, copy: function (a, b) { if (k.copyHtml5) return "copyHtml5"; if (k.copyFlash && k.copyFlash.available(a, b)) return "copyFlash" }, csv: function (a, b) { if (k.csvHtml5 && k.csvHtml5.available(a, b)) return "csvHtml5"; if (k.csvFlash && k.csvFlash.available(a, b)) return "csvFlash" }, excel: function (a, b) { if (k.excelHtml5 && k.excelHtml5.available(a, b)) return "excelHtml5"; if (k.excelFlash && k.excelFlash.available(a, b)) return "excelFlash" }, pdf: function (a, b) { if (k.pdfHtml5 && k.pdfHtml5.available(a, b)) return "pdfHtml5"; if (k.pdfFlash && k.pdfFlash.available(a, b)) return "pdfFlash" }, pageLength: function (a) { var a = a.settings()[0].aLengthMenu, b = d.isArray(a[0]) ? a[0] : a, c = d.isArray(a[0]) ? a[1] : a, e = function (a) { return a.i18n("buttons.pageLength", { "-1": "Show all rows", _: "Show %d rows" }, a.page.len()) }; return { extend: "collection", text: e, className: "buttons-page-length", autoClose: !0, buttons: d.map(b, function (a, b) { return { text: c[b], className: "button-page-length", action: function (b, c) { c.page.len(a).draw() }, init: function (b, c, e) { var d = this, c = function () { d.active(b.page.len() === a) }; b.on("length.dt" + e.namespace, c); c() }, destroy: function (a, b, c) { a.off("length.dt" + c.namespace) } } }), init: function (a, b, c) { var d = this; a.on("length.dt" + c.namespace, function () { d.text(e(a)) }) }, destroy: function (a, b, c) { a.off("length.dt" + c.namespace) } } } }); i.Api.register("buttons()", function (a, b) { b === m && (b = a, a = m); this.selector.buttonGroup = a; var c = this.iterator(!0, "table", function (c) { if (c._buttons) return l.buttonSelector(l.instanceSelector(a, c._buttons), b) }, !0); c._groupSelector = a; return c }); i.Api.register("button()", function (a, b) { var c = this.buttons(a, b); 1 < c.length && c.splice(1, c.length); return c }); i.Api.registerPlural("buttons().active()", "button().active()", function (a) { return a === m ? this.map(function (a) { return a.inst.active(a.node) }) : this.each(function (b) { b.inst.active(b.node, a) }) }); i.Api.registerPlural("buttons().action()", "button().action()", function (a) { return a === m ? this.map(function (a) { return a.inst.action(a.node) }) : this.each(function (b) { b.inst.action(b.node, a) }) }); i.Api.register(["buttons().enable()", "button().enable()"], function (a) { return this.each(function (b) { b.inst.enable(b.node, a) }) }); i.Api.register(["buttons().disable()", "button().disable()"], function () { return this.each(function (a) { a.inst.disable(a.node) }) }); i.Api.registerPlural("buttons().nodes()", "button().node()", function () { var a = d(); d(this.each(function (b) { a = a.add(b.inst.node(b.node)) })); return a }); i.Api.registerPlural("buttons().processing()", "button().processing()", function (a) { return a === m ? this.map(function (a) { return a.inst.processing(a.node) }) : this.each(function (b) { b.inst.processing(b.node, a) }) }); i.Api.registerPlural("buttons().text()", "button().text()", function (a) { return a === m ? this.map(function (a) { return a.inst.text(a.node) }) : this.each(function (b) { b.inst.text(b.node, a) }) }); i.Api.registerPlural("buttons().trigger()", "button().trigger()", function () { return this.each(function (a) { a.inst.node(a.node).trigger("click") }) }); i.Api.registerPlural("buttons().containers()", "buttons().container()", function () { var a = d(), b = this._groupSelector; this.iterator(!0, "table", function (c) { if (c._buttons) for (var c = l.instanceSelector(b, c._buttons), d = 0, g = c.length; d < g; d++)a = a.add(c[d].container()) }); return a }); i.Api.register("button().add()", function (a, b) { var c = this.context; c.length && (c = l.instanceSelector(this._groupSelector, c[0]._buttons), c.length && c[0].add(b, a)); return this.button(this._groupSelector, a) }); i.Api.register("buttons().destroy()", function () { this.pluck("inst").unique().each(function (a) { a.destroy() }); return this }); i.Api.registerPlural("buttons().remove()", "buttons().remove()", function () { this.each(function (a) { a.inst.remove(a.node) }); return this }); var r; i.Api.register("buttons.info()", function (a, b, c) { var e = this; if (!1 === a) return d("#datatables_buttons_info").fadeOut(function () { d(this).remove() }), clearTimeout(r), r = null, this; r && clearTimeout(r); d("#datatables_buttons_info").length && d("#datatables_buttons_info").remove(); d('<div id="datatables_buttons_info" class="dt-button-info"/>').html(a ? "<h2>" + a + "</h2>" : "").append(d("<div/>")["string" === typeof b ? "html" : "append"](b)).css("display", "none").appendTo("body").fadeIn(); c !== m && 0 !== c && (r = setTimeout(function () { e.buttons.info(!1) }, c)); return this }); i.Api.register("buttons.exportData()", function (a) { if (this.context.length) { var b = new i.Api(this.context[0]), c = d.extend(!0, {}, { rows: null, columns: "", modifier: { search: "applied", order: "applied" }, orthogonal: "display", stripHtml: !0, stripNewlines: !0, decodeEntities: !0, trim: !0, format: { header: function (a) { return e(a) }, footer: function (a) { return e(a) }, body: function (a) { return e(a) } }, customizeData: null }, a), e = function (a) { if ("string" !== typeof a) return a; a = a.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ""); a = a.replace(/<!\-\-.*?\-\->/g, ""); c.stripHtml && (a = a.replace(/<[^>]*>/g, "")); c.trim && (a = a.replace(/^\s+|\s+$/g, "")); c.stripNewlines && (a = a.replace(/\n/g, " ")); c.decodeEntities && (v.innerHTML = a, a = v.value); return a }, a = b.columns(c.columns).indexes().map(function (a) { var d = b.column(a).header(); return c.format.header(d.innerHTML, a, d) }).toArray(), g = b.table().footer() ? b.columns(c.columns).indexes().map(function (a) { var d = b.column(a).footer(); return c.format.footer(d ? d.innerHTML : "", a, d) }).toArray() : null, h = d.extend({}, c.modifier); b.select && "function" === typeof b.select.info && h.selected === m && b.rows(c.rows, d.extend({ selected: !0 }, h)).any() && d.extend(h, { selected: !0 }); for (var h = b.rows(c.rows, h).indexes().toArray(), f = b.cells(h, c.columns), h = f.render(c.orthogonal).toArray(), f = f.nodes().toArray(), k = a.length, j = [], l = 0, n = 0, o = 0 < k ? h.length / k : 0; n < o; n++) { for (var r = [k], s = 0; s < k; s++)r[s] = c.format.body(h[l], n, s, f[l]), l++; j[n] = r } a = { header: a, footer: g, body: j }; c.customizeData && c.customizeData(a); return a } }); i.Api.register("buttons.exportInfo()", function (a) { a || (a = {}); var b; var c = a; b = "*" === c.filename && "*" !== c.title && c.title !== m && null !== c.title && "" !== c.title ? c.title : c.filename; "function" === typeof b && (b = b()); b === m || null === b ? b = null : (-1 !== b.indexOf("*") && (b = d.trim(b.replace("*", d("head > title").text()))), b = b.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, ""), (c = t(c.extension)) || (c = ""), b += c); c = t(a.title); c = null === c ? null : -1 !== c.indexOf("*") ? c.replace("*", d("head > title").text() || "Exported data") : c; return { filename: b, title: c, messageTop: w(this, a.message || a.messageTop, "top"), messageBottom: w(this, a.messageBottom, "bottom") } }); var t = function (a) { return null === a || a === m ? null : "function" === typeof a ? a() : a }, w = function (a, b, c) { b = t(b); if (null === b) return null; a = d("caption", a.table().container()).eq(0); return "*" === b ? a.css("caption-side") !== c ? null : a.length ? a.text() : "" : b }, v = d("<textarea/>")[0]; d.fn.dataTable.Buttons = l; d.fn.DataTable.Buttons = l; d(o).on("init.dt plugin-init.dt", function (a, b) { if ("dt" === a.namespace) { var c = b.oInit.buttons || i.defaults.buttons; c && !b._buttons && (new l(b, c)).container() } }); i.ext.feature.push({ fnInit: function (a) { var a = new i.Api(a), b = a.init().buttons || i.defaults.buttons; return (new l(a, b)).container() }, cFeature: "B" }); return l
});/*!
 Bootstrap integration for DataTables' Buttons
 ©2016 SpryMedia Ltd - datatables.net/license
*/(function (c) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net-bs", "datatables.net-buttons"], function (a) { return c(a, window, document) }) : "object" === typeof exports ? module.exports = function (a, b) { a || (a = window); if (!b || !b.fn.dataTable) b = require("datatables.net-bs")(a, b).$; b.fn.dataTable.Buttons || require("datatables.net-buttons")(a, b); return c(b, a, a.document) } : c(jQuery, window, document) })(function (c) { var a = c.fn.dataTable; c.extend(!0, a.Buttons.defaults, { dom: { container: { className: "dt-buttons btn-group" }, button: { className: "btn btn-default" }, collection: { tag: "ul", className: "dt-button-collection dropdown-menu", button: { tag: "li", className: "dt-button", active: "active", disabled: "disabled" }, buttonLiner: { tag: "a", className: "" } } } }); a.ext.buttons.collection.text = function (a) { return a.i18n("buttons.collection", 'Collection <span class="caret"/>') }; return a.Buttons });/*!
 ColReorder 1.5.0
 ©2010-2018 SpryMedia Ltd - datatables.net/license
*/(function (e) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (o) { return e(o, window, document) }) : "object" === typeof exports ? module.exports = function (o, l) { o || (o = window); if (!l || !l.fn.dataTable) l = require("datatables.net")(o, l).$; return e(l, o, o.document) } : e(jQuery, window, document) })(function (e, o, l, r) {
    function q(a) { for (var b = [], c = 0, f = a.length; c < f; c++)b[a[c]] = c; return b } function p(a, b, c) { b = a.splice(b, 1)[0]; a.splice(c, 0, b) } function s(a, b, c) { for (var f = [], e = 0, d = a.childNodes.length; e < d; e++)1 == a.childNodes[e].nodeType && f.push(a.childNodes[e]); b = f[b]; null !== c ? a.insertBefore(b, f[c]) : a.appendChild(b) } var t = e.fn.dataTable; e.fn.dataTableExt.oApi.fnColReorder = function (a, b, c, f, g) {
        var d, h, j, m, i, l = a.aoColumns.length, k; i = function (a, b, c) { if (a[b] && "function" !== typeof a[b]) { var d = a[b].split("."), f = d.shift(); isNaN(1 * f) || (a[b] = c[1 * f] + "." + d.join(".")) } }; if (b != c) if (0 > b || b >= l) this.oApi._fnLog(a, 1, "ColReorder 'from' index is out of bounds: " + b); else if (0 > c || c >= l) this.oApi._fnLog(a, 1, "ColReorder 'to' index is out of bounds: " +
            c); else { j = []; d = 0; for (h = l; d < h; d++)j[d] = d; p(j, b, c); var n = q(j); d = 0; for (h = a.aaSorting.length; d < h; d++)a.aaSorting[d][0] = n[a.aaSorting[d][0]]; if (null !== a.aaSortingFixed) { d = 0; for (h = a.aaSortingFixed.length; d < h; d++)a.aaSortingFixed[d][0] = n[a.aaSortingFixed[d][0]] } d = 0; for (h = l; d < h; d++) { k = a.aoColumns[d]; j = 0; for (m = k.aDataSort.length; j < m; j++)k.aDataSort[j] = n[k.aDataSort[j]]; k.idx = n[k.idx] } e.each(a.aLastSort, function (b, c) { a.aLastSort[b].src = n[c.src] }); d = 0; for (h = l; d < h; d++)k = a.aoColumns[d], "number" == typeof k.mData ? k.mData = n[k.mData] : e.isPlainObject(k.mData) && (i(k.mData, "_", n), i(k.mData, "filter", n), i(k.mData, "sort", n), i(k.mData, "type", n)); if (a.aoColumns[b].bVisible) { i = this.oApi._fnColumnIndexToVisible(a, b); m = null; for (d = c < b ? c : c + 1; null === m && d < l;)m = this.oApi._fnColumnIndexToVisible(a, d), d++; j = a.nTHead.getElementsByTagName("tr"); d = 0; for (h = j.length; d < h; d++)s(j[d], i, m); if (null !== a.nTFoot) { j = a.nTFoot.getElementsByTagName("tr"); d = 0; for (h = j.length; d < h; d++)s(j[d], i, m) } d = 0; for (h = a.aoData.length; d < h; d++)null !== a.aoData[d].nTr && s(a.aoData[d].nTr, i, m) } p(a.aoColumns, b, c); d = 0; for (h = l; d < h; d++)a.oApi._fnColumnOptions(a, d, {}); p(a.aoPreSearchCols, b, c); d = 0; for (h = a.aoData.length; d < h; d++) { m = a.aoData[d]; if (k = m.anCells) { p(k, b, c); j = 0; for (i = k.length; j < i; j++)k[j] && k[j]._DT_CellIndex && (k[j]._DT_CellIndex.column = j) } "dom" !== m.src && e.isArray(m._aData) && p(m._aData, b, c) } d = 0; for (h = a.aoHeader.length; d < h; d++)p(a.aoHeader[d], b, c); if (null !== a.aoFooter) { d = 0; for (h = a.aoFooter.length; d < h; d++)p(a.aoFooter[d], b, c) } (g || g === r) && e.fn.dataTable.Api(a).rows().invalidate(); d = 0; for (h = l; d < h; d++)e(a.aoColumns[d].nTh).off(".DT"), this.oApi._fnSortAttachListener(a, a.aoColumns[d].nTh, d); e(a.oInstance).trigger("column-reorder.dt", [a, { from: b, to: c, mapping: n, drop: f, iFrom: b, iTo: c, aiInvertMapping: n }]) }
    }; var i = function (a, b) { var c = (new e.fn.dataTable.Api(a)).settings()[0]; if (c._colReorder) return c._colReorder; !0 === b && (b = {}); var f = e.fn.dataTable.camelToHungarian; f && (f(i.defaults, i.defaults, !0), f(i.defaults, b || {})); this.s = { dt: null, enable: null, init: e.extend(!0, {}, i.defaults, b), fixed: 0, fixedRight: 0, reorderCallback: null, mouse: { startX: -1, startY: -1, offsetX: -1, offsetY: -1, target: -1, targetIndex: -1, fromIndex: -1 }, aoTargets: [] }; this.dom = { drag: null, pointer: null }; this.s.enable = this.s.init.bEnable; this.s.dt = c; this.s.dt._colReorder = this; this._fnConstruct(); return this }; e.extend(i.prototype, {
        fnEnable: function (a) { if (!1 === a) return fnDisable(); this.s.enable = !0 }, fnDisable: function () { this.s.enable = !1 }, fnReset: function () { this._fnOrderColumns(this.fnOrder()); return this }, fnGetCurrentOrder: function () { return this.fnOrder() }, fnOrder: function (a, b) { var c = [], f, g, d = this.s.dt.aoColumns; if (a === r) { f = 0; for (g = d.length; f < g; f++)c.push(d[f]._ColReorder_iOrigCol); return c } if (b) { d = this.fnOrder(); f = 0; for (g = a.length; f < g; f++)c.push(e.inArray(a[f], d)); a = c } this._fnOrderColumns(q(a)); return this }, fnTranspose: function (a, b) { b || (b = "toCurrent"); var c = this.fnOrder(), f = this.s.dt.aoColumns; return "toCurrent" === b ? !e.isArray(a) ? e.inArray(a, c) : e.map(a, function (a) { return e.inArray(a, c) }) : !e.isArray(a) ? f[a]._ColReorder_iOrigCol : e.map(a, function (a) { return f[a]._ColReorder_iOrigCol }) }, _fnConstruct: function () { var a = this, b = this.s.dt.aoColumns.length, c = this.s.dt.nTable, f; this.s.init.iFixedColumns && (this.s.fixed = this.s.init.iFixedColumns); this.s.init.iFixedColumnsLeft && (this.s.fixed = this.s.init.iFixedColumnsLeft); this.s.fixedRight = this.s.init.iFixedColumnsRight ? this.s.init.iFixedColumnsRight : 0; this.s.init.fnReorderCallback && (this.s.reorderCallback = this.s.init.fnReorderCallback); for (f = 0; f < b; f++)f > this.s.fixed - 1 && f < b - this.s.fixedRight && this._fnMouseListener(f, this.s.dt.aoColumns[f].nTh), this.s.dt.aoColumns[f]._ColReorder_iOrigCol = f; this.s.dt.oApi._fnCallbackReg(this.s.dt, "aoStateSaveParams", function (b, c) { a._fnStateSave.call(a, c) }, "ColReorder_State"); var g = null; this.s.init.aiOrder && (g = this.s.init.aiOrder.slice()); this.s.dt.oLoadedState && ("undefined" != typeof this.s.dt.oLoadedState.ColReorder && this.s.dt.oLoadedState.ColReorder.length == this.s.dt.aoColumns.length) && (g = this.s.dt.oLoadedState.ColReorder); if (g) if (a.s.dt._bInitComplete) b = q(g), a._fnOrderColumns.call(a, b); else { var d = !1; e(c).on("draw.dt.colReorder", function () { if (!a.s.dt._bInitComplete && !d) { d = true; var b = q(g); a._fnOrderColumns.call(a, b) } }) } else this._fnSetColumnIndexes(); e(c).on("destroy.dt.colReorder", function () { e(c).off("destroy.dt.colReorder draw.dt.colReorder"); e.each(a.s.dt.aoColumns, function (a, b) { e(b.nTh).off(".ColReorder"); e(b.nTh).removeAttr("data-column-index") }); a.s.dt._colReorder = null; a.s = null }) }, _fnOrderColumns: function (a) { var b = !1; if (a.length != this.s.dt.aoColumns.length) this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, "ColReorder - array reorder does not match known number of columns. Skipping."); else { for (var c = 0, f = a.length; c < f; c++) { var g = e.inArray(c, a); c != g && (p(a, g, c), this.s.dt.oInstance.fnColReorder(g, c, !0, !1), b = !0) } this._fnSetColumnIndexes(); b && (e.fn.dataTable.Api(this.s.dt).rows().invalidate(), ("" !== this.s.dt.oScroll.sX || "" !== this.s.dt.oScroll.sY) && this.s.dt.oInstance.fnAdjustColumnSizing(!1), this.s.dt.oInstance.oApi._fnSaveState(this.s.dt), null !== this.s.reorderCallback && this.s.reorderCallback.call(this)) } }, _fnStateSave: function (a) { var b, c, f, g = this.s.dt.aoColumns; a.ColReorder = []; if (a.aaSorting) { for (b = 0; b < a.aaSorting.length; b++)a.aaSorting[b][0] = g[a.aaSorting[b][0]]._ColReorder_iOrigCol; var d = e.extend(!0, [], a.aoSearchCols); b = 0; for (c = g.length; b < c; b++)f = g[b]._ColReorder_iOrigCol, a.aoSearchCols[f] = d[b], a.abVisCols[f] = g[b].bVisible, a.ColReorder.push(f) } else if (a.order) { for (b = 0; b < a.order.length; b++)a.order[b][0] = g[a.order[b][0]]._ColReorder_iOrigCol; d = e.extend(!0, [], a.columns); b = 0; for (c = g.length; b < c; b++)f = g[b]._ColReorder_iOrigCol, a.columns[f] = d[b], a.ColReorder.push(f) } }, _fnMouseListener: function (a, b) { var c = this; e(b).on("mousedown.ColReorder", function (a) { c.s.enable && c._fnMouseDown.call(c, a, b) }).on("touchstart.ColReorder", function (a) { c.s.enable && c._fnMouseDown.call(c, a, b) }) }, _fnMouseDown: function (a, b) { var c = this, f = e(a.target).closest("th, td").offset(), g = parseInt(e(b).attr("data-column-index"), 10); g !== r && (this.s.mouse.startX = this._fnCursorPosition(a, "pageX"), this.s.mouse.startY = this._fnCursorPosition(a, "pageY"), this.s.mouse.offsetX = this._fnCursorPosition(a, "pageX") - f.left, this.s.mouse.offsetY = this._fnCursorPosition(a, "pageY") - f.top, this.s.mouse.target = this.s.dt.aoColumns[g].nTh, this.s.mouse.targetIndex = g, this.s.mouse.fromIndex = g, this._fnRegions(), e(l).on("mousemove.ColReorder touchmove.ColReorder", function (a) { c._fnMouseMove.call(c, a) }).on("mouseup.ColReorder touchend.ColReorder", function (a) { c._fnMouseUp.call(c, a) })) }, _fnMouseMove: function (a) {
            if (null === this.dom.drag) {
                if (5 > Math.pow(Math.pow(this._fnCursorPosition(a, "pageX") - this.s.mouse.startX, 2) + Math.pow(this._fnCursorPosition(a, "pageY") -
                    this.s.mouse.startY, 2), 0.5)) return; this._fnCreateDragNode()
            } this.dom.drag.css({ left: this._fnCursorPosition(a, "pageX") - this.s.mouse.offsetX, top: this._fnCursorPosition(a, "pageY") - this.s.mouse.offsetY }); for (var b = !1, c = this.s.mouse.toIndex, f = 1, e = this.s.aoTargets.length; f < e; f++)if (this._fnCursorPosition(a, "pageX") < this.s.aoTargets[f - 1].x + (this.s.aoTargets[f].x - this.s.aoTargets[f - 1].x) / 2) { this.dom.pointer.css("left", this.s.aoTargets[f - 1].x); this.s.mouse.toIndex = this.s.aoTargets[f - 1].to; b = !0; break } b || (this.dom.pointer.css("left", this.s.aoTargets[this.s.aoTargets.length - 1].x), this.s.mouse.toIndex = this.s.aoTargets[this.s.aoTargets.length - 1].to); this.s.init.bRealtime && c !== this.s.mouse.toIndex && (this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex), this.s.mouse.fromIndex = this.s.mouse.toIndex, ("" !== this.s.dt.oScroll.sX || "" !== this.s.dt.oScroll.sY) && this.s.dt.oInstance.fnAdjustColumnSizing(!1), this._fnRegions())
        }, _fnMouseUp: function () { e(l).off(".ColReorder"); null !== this.dom.drag && (this.dom.drag.remove(), this.dom.pointer.remove(), this.dom.drag = null, this.dom.pointer = null, this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex, !0), this._fnSetColumnIndexes(), ("" !== this.s.dt.oScroll.sX || "" !== this.s.dt.oScroll.sY) && this.s.dt.oInstance.fnAdjustColumnSizing(!1), this.s.dt.oInstance.oApi._fnSaveState(this.s.dt), null !== this.s.reorderCallback && this.s.reorderCallback.call(this)) }, _fnRegions: function () { var a = this.s.dt.aoColumns; this.s.aoTargets.splice(0, this.s.aoTargets.length); this.s.aoTargets.push({ x: e(this.s.dt.nTable).offset().left, to: 0 }); for (var b = 0, c = this.s.aoTargets[0].x, f = 0, g = a.length; f < g; f++)f != this.s.mouse.fromIndex && b++, a[f].bVisible && "none" !== a[f].nTh.style.display && (c += e(a[f].nTh).outerWidth(), this.s.aoTargets.push({ x: c, to: b })); 0 !== this.s.fixedRight && this.s.aoTargets.splice(this.s.aoTargets.length - this.s.fixedRight); 0 !== this.s.fixed && this.s.aoTargets.splice(0, this.s.fixed) }, _fnCreateDragNode: function () { var a = "" !== this.s.dt.oScroll.sX || "" !== this.s.dt.oScroll.sY, b = this.s.dt.aoColumns[this.s.mouse.targetIndex].nTh, c = b.parentNode, f = c.parentNode, g = f.parentNode, d = e(b).clone(); this.dom.drag = e(g.cloneNode(!1)).addClass("DTCR_clonedTable").append(e(f.cloneNode(!1)).append(e(c.cloneNode(!1)).append(d[0]))).css({ position: "absolute", top: 0, left: 0, width: e(b).outerWidth(), height: e(b).outerHeight() }).appendTo("body"); this.dom.pointer = e("<div></div>").addClass("DTCR_pointer").css({ position: "absolute", top: a ? e("div.dataTables_scroll", this.s.dt.nTableWrapper).offset().top : e(this.s.dt.nTable).offset().top, height: a ? e("div.dataTables_scroll", this.s.dt.nTableWrapper).height() : e(this.s.dt.nTable).height() }).appendTo("body") }, _fnSetColumnIndexes: function () { e.each(this.s.dt.aoColumns, function (a, b) { e(b.nTh).attr("data-column-index", a) }) }, _fnCursorPosition: function (a, b) { return -1 !== a.type.indexOf("touch") ? a.originalEvent.touches[0][b] : a[b] }
    }); i.defaults = { aiOrder: null, bEnable: !0, bRealtime: !0, iFixedColumnsLeft: 0, iFixedColumnsRight: 0, fnReorderCallback: null }; i.version = "1.5.0"; e.fn.dataTable.ColReorder = i; e.fn.DataTable.ColReorder = i; "function" == typeof e.fn.dataTable && "function" == typeof e.fn.dataTableExt.fnVersionCheck && e.fn.dataTableExt.fnVersionCheck("1.10.8") ? e.fn.dataTableExt.aoFeatures.push({ fnInit: function (a) { var b = a.oInstance; a._colReorder ? b.oApi._fnLog(a, 1, "ColReorder attempted to initialise twice. Ignoring second") : (b = a.oInit, new i(a, b.colReorder || b.oColReorder || {})); return null }, cFeature: "R", sFeature: "ColReorder" }) : alert("Warning: ColReorder requires DataTables 1.10.8 or greater - www.datatables.net/download"); e(l).on("preInit.dt.colReorder", function (a, b) { if ("dt" === a.namespace) { var c = b.oInit.colReorder, f = t.defaults.colReorder; if (c || f) f = e.extend({}, c, f), !1 !== c && new i(b, f) } }); e.fn.dataTable.Api.register("colReorder.reset()", function () { return this.iterator("table", function (a) { a._colReorder.fnReset() }) }); e.fn.dataTable.Api.register("colReorder.order()", function (a, b) { return a ? this.iterator("table", function (c) { c._colReorder.fnOrder(a, b) }) : this.context.length ? this.context[0]._colReorder.fnOrder() : null }); e.fn.dataTable.Api.register("colReorder.transpose()", function (a, b) { return this.context.length && this.context[0]._colReorder ? this.context[0]._colReorder.fnTranspose(a, b) : a }); e.fn.dataTable.Api.register("colReorder.move()", function (a, b, c, e) { this.context.length && this.context[0]._colReorder.s.dt.oInstance.fnColReorder(a, b, c, e); return this }); e.fn.dataTable.Api.register("colReorder.enable()", function (a) { return this.iterator("table", function (b) { b._colReorder && b._colReorder.fnEnable(a) }) }); e.fn.dataTable.Api.register("colReorder.disable()", function () { return this.iterator("table", function (a) { a._colReorder && a._colReorder.fnDisable() }) }); return i
});/*!
 FixedColumns 3.2.5
 ©2010-2018 SpryMedia Ltd - datatables.net/license
*/(function (d) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (p) { return d(p, window, document) }) : "object" === typeof exports ? module.exports = function (p, r) { p || (p = window); if (!r || !r.fn.dataTable) r = require("datatables.net")(p, r).$; return d(r, p, p.document) } : d(jQuery, window, document) })(function (d, p, r, t) {
    var s = d.fn.dataTable, u, m = function (a, b) { var c = this; if (this instanceof m) { if (b === t || !0 === b) b = {}; var e = d.fn.dataTable.camelToHungarian; e && (e(m.defaults, m.defaults, !0), e(m.defaults, b)); e = (new d.fn.dataTable.Api(a)).settings()[0]; this.s = { dt: e, iTableColumns: e.aoColumns.length, aiOuterWidths: [], aiInnerWidths: [], rtl: "rtl" === d(e.nTable).css("direction") }; this.dom = { scroller: null, header: null, body: null, footer: null, grid: { wrapper: null, dt: null, left: { wrapper: null, head: null, body: null, foot: null }, right: { wrapper: null, head: null, body: null, foot: null } }, clone: { left: { header: null, body: null, footer: null }, right: { header: null, body: null, footer: null } } }; if (e._oFixedColumns) throw "FixedColumns already initialised on this table"; e._oFixedColumns = this; e._bInitComplete ? this._fnConstruct(b) : e.oApi._fnCallbackReg(e, "aoInitComplete", function () { c._fnConstruct(b) }, "FixedColumns") } else alert("FixedColumns warning: FixedColumns must be initialised with the 'new' keyword.") }; d.extend(m.prototype, {
        fnUpdate: function () { this._fnDraw(!0) }, fnRedrawLayout: function () { this._fnColCalc(); this._fnGridLayout(); this.fnUpdate() }, fnRecalculateHeight: function (a) { delete a._DTTC_iHeight; a.style.height = "auto" }, fnSetRowHeight: function (a, b) { a.style.height = b + "px" }, fnGetPosition: function (a) { var b = this.s.dt.oInstance; if (d(a).parents(".DTFC_Cloned").length) { if ("tr" === a.nodeName.toLowerCase()) return a = d(a).index(), b.fnGetPosition(d("tr", this.s.dt.nTBody)[a]); var c = d(a).index(), a = d(a.parentNode).index(); return [b.fnGetPosition(d("tr", this.s.dt.nTBody)[a]), c, b.oApi._fnVisibleToColumnIndex(this.s.dt, c)] } return b.fnGetPosition(a) }, _fnConstruct: function (a) {
            var b = this; if ("function" != typeof this.s.dt.oInstance.fnVersionCheck || !0 !== this.s.dt.oInstance.fnVersionCheck("1.8.0")) alert("FixedColumns " +
                m.VERSION + " required DataTables 1.8.0 or later. Please upgrade your DataTables installation"); else if ("" === this.s.dt.oScroll.sX) this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, "FixedColumns is not needed (no x-scrolling in DataTables enabled), so no action will be taken. Use 'FixedHeader' for column fixing when scrolling is not enabled"); else {
                    this.s = d.extend(!0, this.s, m.defaults, a); a = this.s.dt.oClasses; this.dom.grid.dt = d(this.s.dt.nTable).parents("div." + a.sScrollWrapper)[0]; this.dom.scroller = d("div." +
                        a.sScrollBody, this.dom.grid.dt)[0]; this._fnColCalc(); this._fnGridSetup(); var c, e = !1; d(this.s.dt.nTableWrapper).on("mousedown.DTFC", function (a) { 0 === a.button && (e = !0, d(r).one("mouseup", function () { e = !1 })) }); d(this.dom.scroller).on("mouseover.DTFC touchstart.DTFC", function () { e || (c = "main") }).on("scroll.DTFC", function (a) { !c && a.originalEvent && (c = "main"); if ("main" === c && (0 < b.s.iLeftColumns && (b.dom.grid.left.liner.scrollTop = b.dom.scroller.scrollTop), 0 < b.s.iRightColumns)) b.dom.grid.right.liner.scrollTop = b.dom.scroller.scrollTop }); var f = "onwheel" in r.createElement("div") ? "wheel.DTFC" : "mousewheel.DTFC"; if (0 < b.s.iLeftColumns) d(b.dom.grid.left.liner).on("mouseover.DTFC touchstart.DTFC", function () { e || (c = "left") }).on("scroll.DTFC", function (a) { !c && a.originalEvent && (c = "left"); "left" === c && (b.dom.scroller.scrollTop = b.dom.grid.left.liner.scrollTop, 0 < b.s.iRightColumns && (b.dom.grid.right.liner.scrollTop = b.dom.grid.left.liner.scrollTop)) }).on(f, function (a) { b.dom.scroller.scrollLeft -= "wheel" === a.type ? -a.originalEvent.deltaX : a.originalEvent.wheelDeltaX }); if (0 < b.s.iRightColumns) d(b.dom.grid.right.liner).on("mouseover.DTFC touchstart.DTFC", function () { e || (c = "right") }).on("scroll.DTFC", function (a) { !c && a.originalEvent && (c = "right"); "right" === c && (b.dom.scroller.scrollTop = b.dom.grid.right.liner.scrollTop, 0 < b.s.iLeftColumns && (b.dom.grid.left.liner.scrollTop = b.dom.grid.right.liner.scrollTop)) }).on(f, function (a) { b.dom.scroller.scrollLeft -= "wheel" === a.type ? -a.originalEvent.deltaX : a.originalEvent.wheelDeltaX }); d(p).on("resize.DTFC", function () { b._fnGridLayout.call(b) }); var g = !0, h = d(this.s.dt.nTable); h.on("draw.dt.DTFC", function () { b._fnColCalc(); b._fnDraw.call(b, g); g = !1 }).on("column-sizing.dt.DTFC", function () { b._fnColCalc(); b._fnGridLayout(b) }).on("column-visibility.dt.DTFC", function (a, c, d, e, f) { if (f === t || f) b._fnColCalc(), b._fnGridLayout(b), b._fnDraw(!0) }).on("select.dt.DTFC deselect.dt.DTFC", function (a) { "dt" === a.namespace && b._fnDraw(!1) }).on("destroy.dt.DTFC", function () { h.off(".DTFC"); d(b.dom.scroller).off(".DTFC"); d(p).off(".DTFC"); d(b.s.dt.nTableWrapper).off(".DTFC"); d(b.dom.grid.left.liner).off(".DTFC " + f); d(b.dom.grid.left.wrapper).remove(); d(b.dom.grid.right.liner).off(".DTFC " + f); d(b.dom.grid.right.wrapper).remove() }); this._fnGridLayout(); this.s.dt.oInstance.fnDraw(!1)
                }
        }, _fnColCalc: function () { var a = this, b = 0, c = 0; this.s.aiInnerWidths = []; this.s.aiOuterWidths = []; d.each(this.s.dt.aoColumns, function (e, f) { var g = d(f.nTh), h; if (g.filter(":visible").length) { var i = g.outerWidth(); 0 === a.s.aiOuterWidths.length && (h = d(a.s.dt.nTable).css("border-left-width"), i += "string" === typeof h && -1 === h.indexOf("px") ? 1 : parseInt(h, 10)); a.s.aiOuterWidths.length === a.s.dt.aoColumns.length - 1 && (h = d(a.s.dt.nTable).css("border-right-width"), i += "string" === typeof h && -1 === h.indexOf("px") ? 1 : parseInt(h, 10)); a.s.aiOuterWidths.push(i); a.s.aiInnerWidths.push(g.width()); e < a.s.iLeftColumns && (b += i); a.s.iTableColumns - a.s.iRightColumns <= e && (c += i) } else a.s.aiInnerWidths.push(0), a.s.aiOuterWidths.push(0) }); this.s.iLeftWidth = b; this.s.iRightWidth = c }, _fnGridSetup: function () { var a = this._fnDTOverflow(), b; this.dom.body = this.s.dt.nTable; this.dom.header = this.s.dt.nTHead.parentNode; this.dom.header.parentNode.parentNode.style.position = "relative"; var c = d('<div class="DTFC_ScrollWrapper" style="position:relative; clear:both;"><div class="DTFC_LeftWrapper" style="position:absolute; top:0; left:0;" aria-hidden="true"><div class="DTFC_LeftHeadWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div><div class="DTFC_LeftBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_LeftBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_LeftFootWrapper" style="position:relative; top:0; left:0; overflow:hidden;"></div></div><div class="DTFC_RightWrapper" style="position:absolute; top:0; right:0;" aria-hidden="true"><div class="DTFC_RightHeadWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightHeadBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div><div class="DTFC_RightBodyWrapper" style="position:relative; top:0; left:0; overflow:hidden;"><div class="DTFC_RightBodyLiner" style="position:relative; top:0; left:0; overflow-y:scroll;"></div></div><div class="DTFC_RightFootWrapper" style="position:relative; top:0; left:0;"><div class="DTFC_RightFootBlocker DTFC_Blocker" style="position:absolute; top:0; bottom:0;"></div></div></div></div>')[0], e = c.childNodes[0], f = c.childNodes[1]; this.dom.grid.dt.parentNode.insertBefore(c, this.dom.grid.dt); c.appendChild(this.dom.grid.dt); this.dom.grid.wrapper = c; 0 < this.s.iLeftColumns && (this.dom.grid.left.wrapper = e, this.dom.grid.left.head = e.childNodes[0], this.dom.grid.left.body = e.childNodes[1], this.dom.grid.left.liner = d("div.DTFC_LeftBodyLiner", c)[0], c.appendChild(e)); 0 < this.s.iRightColumns && (this.dom.grid.right.wrapper = f, this.dom.grid.right.head = f.childNodes[0], this.dom.grid.right.body = f.childNodes[1], this.dom.grid.right.liner = d("div.DTFC_RightBodyLiner", c)[0], f.style.right = a.bar + "px", b = d("div.DTFC_RightHeadBlocker", c)[0], b.style.width = a.bar + "px", b.style.right = -a.bar + "px", this.dom.grid.right.headBlock = b, b = d("div.DTFC_RightFootBlocker", c)[0], b.style.width = a.bar + "px", b.style.right = -a.bar + "px", this.dom.grid.right.footBlock = b, c.appendChild(f)); if (this.s.dt.nTFoot && (this.dom.footer = this.s.dt.nTFoot.parentNode, 0 < this.s.iLeftColumns && (this.dom.grid.left.foot = e.childNodes[2]), 0 < this.s.iRightColumns)) this.dom.grid.right.foot = f.childNodes[2]; this.s.rtl && d("div.DTFC_RightHeadBlocker", c).css({ left: -a.bar + "px", right: "" }) }, _fnGridLayout: function () { var a = this, b = this.dom.grid; d(b.wrapper).width(); var c = this.s.dt.nTable.parentNode.offsetHeight, e = this.s.dt.nTable.parentNode.parentNode.offsetHeight, f = this._fnDTOverflow(), g = this.s.iLeftWidth, h = this.s.iRightWidth, i = "rtl" === d(this.dom.body).css("direction"), j = function (b, c) { f.bar ? a._firefoxScrollError() ? 34 < d(b).height() && (b.style.width = c + f.bar + "px") : b.style.width = c + f.bar + "px" : (b.style.width = c + 20 + "px", b.style.paddingRight = "20px", b.style.boxSizing = "border-box") }; f.x && (c -= f.bar); b.wrapper.style.height = e + "px"; 0 < this.s.iLeftColumns && (e = b.left.wrapper, e.style.width = g + "px", e.style.height = "1px", i ? (e.style.left = "", e.style.right = 0) : (e.style.left = 0, e.style.right = ""), b.left.body.style.height = c + "px", b.left.foot && (b.left.foot.style.top = (f.x ? f.bar : 0) + "px"), j(b.left.liner, g), b.left.liner.style.height = c + "px", b.left.liner.style.maxHeight = c + "px"); 0 < this.s.iRightColumns && (e = b.right.wrapper, e.style.width = h + "px", e.style.height = "1px", this.s.rtl ? (e.style.left = f.y ? f.bar + "px" : 0, e.style.right = "") : (e.style.left = "", e.style.right = f.y ? f.bar + "px" : 0), b.right.body.style.height = c + "px", b.right.foot && (b.right.foot.style.top = (f.x ? f.bar : 0) + "px"), j(b.right.liner, h), b.right.liner.style.height = c + "px", b.right.liner.style.maxHeight = c + "px", b.right.headBlock.style.display = f.y ? "block" : "none", b.right.footBlock.style.display = f.y ? "block" : "none") }, _fnDTOverflow: function () { var a = this.s.dt.nTable, b = a.parentNode, c = { x: !1, y: !1, bar: this.s.dt.oScroll.iBarWidth }; a.offsetWidth > b.clientWidth && (c.x = !0); a.offsetHeight > b.clientHeight && (c.y = !0); return c }, _fnDraw: function (a) { this._fnGridLayout(); this._fnCloneLeft(a); this._fnCloneRight(a); null !== this.s.fnDrawCallback && this.s.fnDrawCallback.call(this, this.dom.clone.left, this.dom.clone.right); d(this).trigger("draw.dtfc", { leftClone: this.dom.clone.left, rightClone: this.dom.clone.right }) }, _fnCloneRight: function (a) { if (!(0 >= this.s.iRightColumns)) { var b, c = []; for (b = this.s.iTableColumns - this.s.iRightColumns; b < this.s.iTableColumns; b++)this.s.dt.aoColumns[b].bVisible && c.push(b); this._fnClone(this.dom.clone.right, this.dom.grid.right, c, a) } }, _fnCloneLeft: function (a) { if (!(0 >= this.s.iLeftColumns)) { var b, c = []; for (b = 0; b < this.s.iLeftColumns; b++)this.s.dt.aoColumns[b].bVisible && c.push(b); this._fnClone(this.dom.clone.left, this.dom.grid.left, c, a) } }, _fnCopyLayout: function (a, b, c) { for (var e = [], f = [], g = [], h = 0, i = a.length; h < i; h++) { var j = []; j.nTr = d(a[h].nTr).clone(c, !1)[0]; for (var l = 0, o = this.s.iTableColumns; l < o; l++)if (-1 !== d.inArray(l, b)) { var q = d.inArray(a[h][l].cell, g); -1 === q ? (q = d(a[h][l].cell).clone(c, !1)[0], f.push(q), g.push(a[h][l].cell), j.push({ cell: q, unique: a[h][l].unique })) : j.push({ cell: f[q], unique: a[h][l].unique }) } e.push(j) } return e }, _fnClone: function (a, b, c, e) { var f = this, g, h, i, j, l, o, q, n, m, k = this.s.dt; if (e) { d(a.header).remove(); a.header = d(this.dom.header).clone(!0, !1)[0]; a.header.className += " DTFC_Cloned"; a.header.style.width = "100%"; b.head.appendChild(a.header); n = this._fnCopyLayout(k.aoHeader, c, !0); j = d(">thead", a.header); j.empty(); g = 0; for (h = n.length; g < h; g++)j[0].appendChild(n[g].nTr); k.oApi._fnDrawHead(k, n, !0) } else { n = this._fnCopyLayout(k.aoHeader, c, !1); m = []; k.oApi._fnDetectHeader(m, d(">thead", a.header)[0]); g = 0; for (h = n.length; g < h; g++) { i = 0; for (j = n[g].length; i < j; i++)m[g][i].cell.className = n[g][i].cell.className, d("span.DataTables_sort_icon", m[g][i].cell).each(function () { this.className = d("span.DataTables_sort_icon", n[g][i].cell)[0].className }) } } this._fnEqualiseHeights("thead", this.dom.header, a.header); "auto" == this.s.sHeightMatch && d(">tbody>tr", f.dom.body).css("height", "auto"); null !== a.body && (d(a.body).remove(), a.body = null); a.body = d(this.dom.body).clone(!0)[0]; a.body.className += " DTFC_Cloned"; a.body.style.paddingBottom = k.oScroll.iBarWidth + "px"; a.body.style.marginBottom = 2 * k.oScroll.iBarWidth + "px"; null !== a.body.getAttribute("id") && a.body.removeAttribute("id"); d(">thead>tr", a.body).empty(); d(">tfoot", a.body).remove(); var p = d("tbody", a.body)[0]; d(p).empty(); if (0 < k.aiDisplay.length) { h = d(">thead>tr", a.body)[0]; for (q = 0; q < c.length; q++)l = c[q], o = d(k.aoColumns[l].nTh).clone(!0)[0], o.innerHTML = "", j = o.style, j.paddingTop = "0", j.paddingBottom = "0", j.borderTopWidth = "0", j.borderBottomWidth = "0", j.height = 0, j.width = f.s.aiInnerWidths[l] + "px", h.appendChild(o); d(">tbody>tr", f.dom.body).each(function (a) { var a = f.s.dt.oFeatures.bServerSide === false ? f.s.dt.aiDisplay[f.s.dt._iDisplayStart + a] : a, b = f.s.dt.aoData[a].anCells || d(this).children("td, th"), e = this.cloneNode(false); e.removeAttribute("id"); e.setAttribute("data-dt-row", a); for (q = 0; q < c.length; q++) { l = c[q]; if (b.length > 0) { o = d(b[l]).clone(true, true)[0]; o.removeAttribute("id"); o.setAttribute("data-dt-row", a); o.setAttribute("data-dt-column", l); e.appendChild(o) } } p.appendChild(e) }) } else d(">tbody>tr", f.dom.body).each(function () { o = this.cloneNode(true); o.className = o.className + " DTFC_NoData"; d("td", o).html(""); p.appendChild(o) }); a.body.style.width = "100%"; a.body.style.margin = "0"; a.body.style.padding = "0"; k.oScroller !== t && (h = k.oScroller.dom.force, b.forcer ? b.forcer.style.height = h.style.height : (b.forcer = h.cloneNode(!0), b.liner.appendChild(b.forcer))); b.liner.appendChild(a.body); this._fnEqualiseHeights("tbody", f.dom.body, a.body); if (null !== k.nTFoot) { if (e) { null !== a.footer && a.footer.parentNode.removeChild(a.footer); a.footer = d(this.dom.footer).clone(!0, !0)[0]; a.footer.className += " DTFC_Cloned"; a.footer.style.width = "100%"; b.foot.appendChild(a.footer); n = this._fnCopyLayout(k.aoFooter, c, !0); b = d(">tfoot", a.footer); b.empty(); g = 0; for (h = n.length; g < h; g++)b[0].appendChild(n[g].nTr); k.oApi._fnDrawHead(k, n, !0) } else { n = this._fnCopyLayout(k.aoFooter, c, !1); b = []; k.oApi._fnDetectHeader(b, d(">tfoot", a.footer)[0]); g = 0; for (h = n.length; g < h; g++) { i = 0; for (j = n[g].length; i < j; i++)b[g][i].cell.className = n[g][i].cell.className } } this._fnEqualiseHeights("tfoot", this.dom.footer, a.footer) } b = k.oApi._fnGetUniqueThs(k, d(">thead", a.header)[0]); d(b).each(function (a) { l = c[a]; this.style.width = f.s.aiInnerWidths[l] + "px" }); null !== f.s.dt.nTFoot && (b = k.oApi._fnGetUniqueThs(k, d(">tfoot", a.footer)[0]), d(b).each(function (a) { l = c[a]; this.style.width = f.s.aiInnerWidths[l] + "px" })) }, _fnGetTrNodes: function (a) { for (var b = [], c = 0, d = a.childNodes.length; c < d; c++)"TR" == a.childNodes[c].nodeName.toUpperCase() && b.push(a.childNodes[c]); return b }, _fnEqualiseHeights: function (a, b, c) { if (!("none" == this.s.sHeightMatch && "thead" !== a && "tfoot" !== a)) { var e, f, g = b.getElementsByTagName(a)[0], c = c.getElementsByTagName(a)[0], a = d(">" + a + ">tr:eq(0)", b).children(":first"); a.outerHeight(); a.height(); for (var g = this._fnGetTrNodes(g), b = this._fnGetTrNodes(c), h = [], c = 0, a = b.length; c < a; c++)e = g[c].offsetHeight, f = b[c].offsetHeight, e = f > e ? f : e, "semiauto" == this.s.sHeightMatch && (g[c]._DTTC_iHeight = e), h.push(e); c = 0; for (a = b.length; c < a; c++)b[c].style.height = h[c] + "px", g[c].style.height = h[c] + "px" } }, _firefoxScrollError: function () { if (u === t) { var a = d("<div/>").css({ position: "absolute", top: 0, left: 0, height: 10, width: 50, overflow: "scroll" }).appendTo("body"); u = a[0].clientWidth === a[0].offsetWidth && 0 !== this._fnDTOverflow().bar; a.remove() } return u }
    }); m.defaults = { iLeftColumns: 1, iRightColumns: 0, fnDrawCallback: null, sHeightMatch: "semiauto" }; m.version = "3.2.5"; s.Api.register("fixedColumns()", function () { return this }); s.Api.register("fixedColumns().update()", function () { return this.iterator("table", function (a) { a._oFixedColumns && a._oFixedColumns.fnUpdate() }) }); s.Api.register("fixedColumns().relayout()", function () { return this.iterator("table", function (a) { a._oFixedColumns && a._oFixedColumns.fnRedrawLayout() }) }); s.Api.register("rows().recalcHeight()", function () { return this.iterator("row", function (a, b) { a._oFixedColumns && a._oFixedColumns.fnRecalculateHeight(this.row(b).node()) }) }); s.Api.register("fixedColumns().rowIndex()", function (a) { a = d(a); return a.parents(".DTFC_Cloned").length ? this.rows({ page: "current" }).indexes()[a.index()] : this.row(a).index() }); s.Api.register("fixedColumns().cellIndex()", function (a) { a = d(a); if (a.parents(".DTFC_Cloned").length) { var b = a.parent().index(), b = this.rows({ page: "current" }).indexes()[b], a = a.parents(".DTFC_LeftWrapper").length ? a.index() : this.columns().flatten().length - this.context[0]._oFixedColumns.s.iRightColumns + a.index(); return { row: b, column: this.column.index("toData", a), columnVisible: a } } return this.cell(a).index() }); d(r).on("init.dt.fixedColumns", function (a, b) { if ("dt" === a.namespace) { var c = b.oInit.fixedColumns, e = s.defaults.fixedColumns; if (c || e) e = d.extend({}, c, e), !1 !== c && new m(b, e) } }); d.fn.dataTable.FixedColumns = m; return d.fn.DataTable.FixedColumns = m
});/*!
 FixedHeader 3.1.4
 ©2009-2018 SpryMedia Ltd - datatables.net/license
*/(function (d) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (g) { return d(g, window, document) }) : "object" === typeof exports ? module.exports = function (g, i) { g || (g = window); if (!i || !i.fn.dataTable) i = require("datatables.net")(g, i).$; return d(i, g, g.document) } : d(jQuery, window, document) })(function (d, g, i, k) {
    var j = d.fn.dataTable, l = 0, h = function (a, b) { if (!(this instanceof h)) throw "FixedHeader must be initialised with the 'new' keyword."; !0 === b && (b = {}); a = new j.Api(a); this.c = d.extend(!0, {}, h.defaults, b); this.s = { dt: a, position: { theadTop: 0, tbodyTop: 0, tfootTop: 0, tfootBottom: 0, width: 0, left: 0, tfootHeight: 0, theadHeight: 0, windowHeight: d(g).height(), visible: !0 }, headerMode: null, footerMode: null, autoWidth: a.settings()[0].oFeatures.bAutoWidth, namespace: ".dtfc" + l++, scrollLeft: { header: -1, footer: -1 }, enable: !0 }; this.dom = { floatingHeader: null, thead: d(a.table().header()), tbody: d(a.table().body()), tfoot: d(a.table().footer()), header: { host: null, floating: null, placeholder: null }, footer: { host: null, floating: null, placeholder: null } }; this.dom.header.host = this.dom.thead.parent(); this.dom.footer.host = this.dom.tfoot.parent(); var e = a.settings()[0]; if (e._fixedHeader) throw "FixedHeader already initialised on table " + e.nTable.id; e._fixedHeader = this; this._constructor() }; d.extend(h.prototype, {
        enable: function (a) { this.s.enable = a; this.c.header && this._modeChange("in-place", "header", !0); this.c.footer && this.dom.tfoot.length && this._modeChange("in-place", "footer", !0); this.update() }, headerOffset: function (a) { a !== k && (this.c.headerOffset = a, this.update()); return this.c.headerOffset }, footerOffset: function (a) { a !== k && (this.c.footerOffset = a, this.update()); return this.c.footerOffset }, update: function () { this._positions(); this._scroll(!0) }, _constructor: function () { var a = this, b = this.s.dt; d(g).on("scroll" + this.s.namespace, function () { a._scroll() }).on("resize" + this.s.namespace, j.util.throttle(function () { a.s.position.windowHeight = d(g).height(); a.update() }, 50)); var e = d(".fh-fixedHeader"); !this.c.headerOffset && e.length && (this.c.headerOffset = e.outerHeight()); e = d(".fh-fixedFooter"); !this.c.footerOffset && e.length && (this.c.footerOffset = e.outerHeight()); b.on("column-reorder.dt.dtfc column-visibility.dt.dtfc draw.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc", function () { a.update() }); b.on("destroy.dtfc", function () { a.c.header && a._modeChange("in-place", "header", true); a.c.footer && a.dom.tfoot.length && a._modeChange("in-place", "footer", true); b.off(".dtfc"); d(g).off(a.s.namespace) }); this._positions(); this._scroll() }, _clone: function (a, b) { var e = this.s.dt, c = this.dom[a], f = "header" === a ? this.dom.thead : this.dom.tfoot; !b && c.floating ? c.floating.removeClass("fixedHeader-floating fixedHeader-locked") : (c.floating && (c.placeholder.remove(), this._unsize(a), c.floating.children().detach(), c.floating.remove()), c.floating = d(e.table().node().cloneNode(!1)).css("table-layout", "fixed").attr("aria-hidden", "true").removeAttr("id").append(f).appendTo("body"), c.placeholder = f.clone(!1), c.placeholder.find("*[id]").removeAttr("id"), c.host.prepend(c.placeholder), this._matchWidths(c.placeholder, c.floating)) }, _matchWidths: function (a, b) { var e = function (b) { return d(b, a).map(function () { return d(this).width() }).toArray() }, c = function (a, c) { d(a, b).each(function (a) { d(this).css({ width: c[a], minWidth: c[a] }) }) }, f = e("th"), e = e("td"); c("th", f); c("td", e) }, _unsize: function (a) { var b = this.dom[a].floating; b && ("footer" === a || "header" === a && !this.s.autoWidth) ? d("th, td", b).css({ width: "", minWidth: "" }) : b && "header" === a && d("th, td", b).css("min-width", "") }, _horizontal: function (a, b) { var e = this.dom[a], c = this.s.position, d = this.s.scrollLeft; e.floating && d[a] !== b && (e.floating.css("left", c.left - b), d[a] = b) }, _modeChange: function (a, b, e) { var c = this.dom[b], f = this.s.position, g = this.dom["footer" === b ? "tfoot" : "thead"], h = d.contains(g[0], i.activeElement) ? i.activeElement : null; h && h.blur(); if ("in-place" === a) { if (c.placeholder && (c.placeholder.remove(), c.placeholder = null), this._unsize(b), "header" === b ? c.host.prepend(g) : c.host.append(g), c.floating) c.floating.remove(), c.floating = null } else "in" === a ? (this._clone(b, e), c.floating.addClass("fixedHeader-floating").css("header" === b ? "top" : "bottom", this.c[b + "Offset"]).css("left", f.left + "px").css("width", f.width + "px"), "footer" === b && c.floating.css("top", "")) : "below" === a ? (this._clone(b, e), c.floating.addClass("fixedHeader-locked").css("top", f.tfootTop - f.theadHeight).css("left", f.left + "px").css("width", f.width + "px")) : "above" === a && (this._clone(b, e), c.floating.addClass("fixedHeader-locked").css("top", f.tbodyTop).css("left", f.left + "px").css("width", f.width + "px")); h && h !== i.activeElement && setTimeout(function () { h.focus() }, 10); this.s.scrollLeft.header = -1; this.s.scrollLeft.footer = -1; this.s[b + "Mode"] = a }, _positions: function () { var a = this.s.dt.table(), b = this.s.position, e = this.dom, a = d(a.node()), c = a.children("thead"), f = a.children("tfoot"), e = e.tbody; b.visible = a.is(":visible"); b.width = a.outerWidth(); b.left = a.offset().left; b.theadTop = c.offset().top; b.tbodyTop = e.offset().top; b.theadHeight = b.tbodyTop - b.theadTop; f.length ? (b.tfootTop = f.offset().top, b.tfootBottom = b.tfootTop + f.outerHeight(), b.tfootHeight = b.tfootBottom - b.tfootTop) : (b.tfootTop = b.tbodyTop + e.outerHeight(), b.tfootBottom = b.tfootTop, b.tfootHeight = b.tfootTop) }, _scroll: function (a) {
            var b = d(i).scrollTop(), e = d(i).scrollLeft(), c = this.s.position, f; if (this.s.enable && (this.c.header && (f = !c.visible || b <= c.theadTop - this.c.headerOffset ? "in-place" : b <= c.tfootTop - c.theadHeight - this.c.headerOffset ? "in" : "below", (a || f !== this.s.headerMode) && this._modeChange(f, "header", a), this._horizontal("header", e)), this.c.footer && this.dom.tfoot.length)) b = !c.visible || b + c.windowHeight >= c.tfootBottom + this.c.footerOffset ? "in-place" : c.windowHeight +
                b > c.tbodyTop + c.tfootHeight + this.c.footerOffset ? "in" : "above", (a || b !== this.s.footerMode) && this._modeChange(b, "footer", a), this._horizontal("footer", e)
        }
    }); h.version = "3.1.4"; h.defaults = { header: !0, footer: !1, headerOffset: 0, footerOffset: 0 }; d.fn.dataTable.FixedHeader = h; d.fn.DataTable.FixedHeader = h; d(i).on("init.dt.dtfh", function (a, b) { if ("dt" === a.namespace) { var e = b.oInit.fixedHeader, c = j.defaults.fixedHeader; if ((e || c) && !b._fixedHeader) c = d.extend({}, c, e), !1 !== e && new h(b, c) } }); j.Api.register("fixedHeader()", function () { }); j.Api.register("fixedHeader.adjust()", function () { return this.iterator("table", function (a) { (a = a._fixedHeader) && a.update() }) }); j.Api.register("fixedHeader.enable()", function (a) { return this.iterator("table", function (b) { b = b._fixedHeader; a = a !== k ? a : !0; b && a !== b.s.enable && b.enable(a) }) }); j.Api.register("fixedHeader.disable()", function () { return this.iterator("table", function (a) { (a = a._fixedHeader) && a.s.enable && a.enable(!1) }) }); d.each(["header", "footer"], function (a, b) { j.Api.register("fixedHeader." + b + "Offset()", function (a) { var c = this.context; return a === k ? c.length && c[0]._fixedHeader ? c[0]._fixedHeader[b + "Offset"]() : k : this.iterator("table", function (c) { if (c = c._fixedHeader) c[b + "Offset"](a) }) }) }); return h
});/*!
 Responsive 2.2.2
 2014-2018 SpryMedia Ltd - datatables.net/license
*/(function (d) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (l) { return d(l, window, document) }) : "object" === typeof exports ? module.exports = function (l, j) { l || (l = window); if (!j || !j.fn.dataTable) j = require("datatables.net")(l, j).$; return d(j, l, l.document) } : d(jQuery, window, document) })(function (d, l, j, q) { function t(a, b, c) { var e = b + "-" + c; if (n[e]) return n[e]; for (var d = [], a = a.cell(b, c).node().childNodes, b = 0, c = a.length; b < c; b++)d.push(a[b]); return n[e] = d } function r(a, b, d) { var e = b + "-" + d; if (n[e]) { for (var a = a.cell(b, d).node(), d = n[e][0].parentNode.childNodes, b = [], f = 0, g = d.length; f < g; f++)b.push(d[f]); d = 0; for (f = b.length; d < f; d++)a.appendChild(b[d]); n[e] = q } } var o = d.fn.dataTable, i = function (a, b) { if (!o.versionCheck || !o.versionCheck("1.10.10")) throw "DataTables Responsive requires DataTables 1.10.10 or newer"; this.s = { dt: new o.Api(a), columns: [], current: [] }; this.s.dt.settings()[0].responsive || (b && "string" === typeof b.details ? b.details = { type: b.details } : b && !1 === b.details ? b.details = { type: !1 } : b && !0 === b.details && (b.details = { type: "inline" }), this.c = d.extend(!0, {}, i.defaults, o.defaults.responsive, b), a.responsive = this, this._constructor()) }; d.extend(i.prototype, { _constructor: function () { var a = this, b = this.s.dt, c = b.settings()[0], e = d(l).width(); b.settings()[0]._responsive = this; d(l).on("resize.dtr orientationchange.dtr", o.util.throttle(function () { var b = d(l).width(); b !== e && (a._resize(), e = b) })); c.oApi._fnCallbackReg(c, "aoRowCreatedCallback", function (e) { -1 !== d.inArray(!1, a.s.current) && d(">td, >th", e).each(function (e) { e = b.column.index("toData", e); !1 === a.s.current[e] && d(this).css("display", "none") }) }); b.on("destroy.dtr", function () { b.off(".dtr"); d(b.table().body()).off(".dtr"); d(l).off("resize.dtr orientationchange.dtr"); d.each(a.s.current, function (b, e) { !1 === e && a._setColumnVis(b, !0) }) }); this.c.breakpoints.sort(function (a, b) { return a.width < b.width ? 1 : a.width > b.width ? -1 : 0 }); this._classLogic(); this._resizeAuto(); c = this.c.details; !1 !== c.type && (a._detailsInit(), b.on("column-visibility.dtr", function () { a._timer && clearTimeout(a._timer); a._timer = setTimeout(function () { a._timer = null; a._classLogic(); a._resizeAuto(); a._resize(); a._redrawChildren() }, 100) }), b.on("draw.dtr", function () { a._redrawChildren() }), d(b.table().node()).addClass("dtr-" + c.type)); b.on("column-reorder.dtr", function () { a._classLogic(); a._resizeAuto(); a._resize() }); b.on("column-sizing.dtr", function () { a._resizeAuto(); a._resize() }); b.on("preXhr.dtr", function () { var e = []; b.rows().every(function () { this.child.isShown() && e.push(this.id(true)) }); b.one("draw.dtr", function () { a._resizeAuto(); a._resize(); b.rows(e).every(function () { a._detailsDisplay(this, false) }) }) }); b.on("init.dtr", function () { a._resizeAuto(); a._resize(); d.inArray(false, a.s.current) && b.columns.adjust() }); this._resize() }, _columnsVisiblity: function (a) { var b = this.s.dt, c = this.s.columns, e, f, g = c.map(function (a, b) { return { columnIdx: b, priority: a.priority } }).sort(function (a, b) { return a.priority !== b.priority ? a.priority - b.priority : a.columnIdx - b.columnIdx }), h = d.map(c, function (e, c) { return !1 === b.column(c).visible() ? "not-visible" : e.auto && null === e.minWidth ? !1 : !0 === e.auto ? "-" : -1 !== d.inArray(a, e.includeIn) }), m = 0; e = 0; for (f = h.length; e < f; e++)!0 === h[e] && (m += c[e].minWidth); e = b.settings()[0].oScroll; e = e.sY || e.sX ? e.iBarWidth : 0; m = b.table().container().offsetWidth - e - m; e = 0; for (f = h.length; e < f; e++)c[e].control && (m -= c[e].minWidth); var s = !1; e = 0; for (f = g.length; e < f; e++) { var k = g[e].columnIdx; "-" === h[k] && (!c[k].control && c[k].minWidth) && (s || 0 > m - c[k].minWidth ? (s = !0, h[k] = !1) : h[k] = !0, m -= c[k].minWidth) } g = !1; e = 0; for (f = c.length; e < f; e++)if (!c[e].control && !c[e].never && !1 === h[e]) { g = !0; break } e = 0; for (f = c.length; e < f; e++)c[e].control && (h[e] = g), "not-visible" === h[e] && (h[e] = !1); -1 === d.inArray(!0, h) && (h[0] = !0); return h }, _classLogic: function () { var a = this, b = this.c.breakpoints, c = this.s.dt, e = c.columns().eq(0).map(function (a) { var b = this.column(a), e = b.header().className, a = c.settings()[0].aoColumns[a].responsivePriority; a === q && (b = d(b.header()).data("priority"), a = b !== q ? 1 * b : 1E4); return { className: e, includeIn: [], auto: !1, control: !1, never: e.match(/\bnever\b/) ? !0 : !1, priority: a } }), f = function (a, b) { var c = e[a].includeIn; -1 === d.inArray(b, c) && c.push(b) }, g = function (d, c, g, k) { if (g) if ("max-" === g) { k = a._find(c).width; c = 0; for (g = b.length; c < g; c++)b[c].width <= k && f(d, b[c].name) } else if ("min-" === g) { k = a._find(c).width; c = 0; for (g = b.length; c < g; c++)b[c].width >= k && f(d, b[c].name) } else { if ("not-" === g) { c = 0; for (g = b.length; c < g; c++)-1 === b[c].name.indexOf(k) && f(d, b[c].name) } } else e[d].includeIn.push(c) }; e.each(function (a, e) { for (var c = a.className.split(" "), f = !1, i = 0, l = c.length; i < l; i++) { var j = d.trim(c[i]); if ("all" === j) { f = !0; a.includeIn = d.map(b, function (a) { return a.name }); return } if ("none" === j || a.never) { f = !0; return } if ("control" === j) { f = !0; a.control = !0; return } d.each(b, function (a, b) { var d = b.name.split("-"), c = j.match(RegExp("(min\\-|max\\-|not\\-)?(" + d[0] + ")(\\-[_a-zA-Z0-9])?")); c && (f = !0, c[2] === d[0] && c[3] === "-" + d[1] ? g(e, b.name, c[1], c[2] + c[3]) : c[2] === d[0] && !c[3] && g(e, b.name, c[1], c[2])) }) } f || (a.auto = !0) }); this.s.columns = e }, _detailsDisplay: function (a, b) { var c = this, e = this.s.dt, f = this.c.details; if (f && !1 !== f.type) { var g = f.display(a, b, function () { return f.renderer(e, a[0], c._detailsObj(a[0])) }); (!0 === g || !1 === g) && d(e.table().node()).triggerHandler("responsive-display.dt", [e, a, g, b]) } }, _detailsInit: function () { var a = this, b = this.s.dt, c = this.c.details; "inline" === c.type && (c.target = "td:first-child, th:first-child"); b.on("draw.dtr", function () { a._tabIndexes() }); a._tabIndexes(); d(b.table().body()).on("keyup.dtr", "td, th", function (a) { a.keyCode === 13 && d(this).data("dtr-keyboard") && d(this).click() }); var e = c.target; d(b.table().body()).on("click.dtr mousedown.dtr mouseup.dtr", "string" === typeof e ? e : "td, th", function (c) { if (d(b.table().node()).hasClass("collapsed") && d.inArray(d(this).closest("tr").get(0), b.rows().nodes().toArray()) !== -1) { if (typeof e === "number") { var g = e < 0 ? b.columns().eq(0).length + e : e; if (b.cell(this).index().column !== g) return } g = b.row(d(this).closest("tr")); c.type === "click" ? a._detailsDisplay(g, false) : c.type === "mousedown" ? d(this).css("outline", "none") : c.type === "mouseup" && d(this).blur().css("outline", "") } }) }, _detailsObj: function (a) { var b = this, c = this.s.dt; return d.map(this.s.columns, function (e, d) { if (!e.never && !e.control) return { title: c.settings()[0].aoColumns[d].sTitle, data: c.cell(a, d).render(b.c.orthogonal), hidden: c.column(d).visible() && !b.s.current[d], columnIndex: d, rowIndex: a } }) }, _find: function (a) { for (var b = this.c.breakpoints, c = 0, e = b.length; c < e; c++)if (b[c].name === a) return b[c] }, _redrawChildren: function () { var a = this, b = this.s.dt; b.rows({ page: "current" }).iterator("row", function (c, e) { b.row(e); a._detailsDisplay(b.row(e), !0) }) }, _resize: function () { var a = this, b = this.s.dt, c = d(l).width(), e = this.c.breakpoints, f = e[0].name, g = this.s.columns, h, m = this.s.current.slice(); for (h = e.length - 1; 0 <= h; h--)if (c <= e[h].width) { f = e[h].name; break } var i = this._columnsVisiblity(f); this.s.current = i; e = !1; h = 0; for (c = g.length; h < c; h++)if (!1 === i[h] && !g[h].never && !g[h].control && !1 === !b.column(h).visible()) { e = !0; break } d(b.table().node()).toggleClass("collapsed", e); var k = !1, j = 0; b.columns().eq(0).each(function (b, c) { !0 === i[c] && j++; i[c] !== m[c] && (k = !0, a._setColumnVis(b, i[c])) }); k && (this._redrawChildren(), d(b.table().node()).trigger("responsive-resize.dt", [b, this.s.current]), 0 === b.page.info().recordsDisplay && d("td", b.table().body()).eq(0).attr("colspan", j)) }, _resizeAuto: function () { var a = this.s.dt, b = this.s.columns; if (this.c.auto && -1 !== d.inArray(!0, d.map(b, function (a) { return a.auto }))) { d.isEmptyObject(n) || d.each(n, function (b) { b = b.split("-"); r(a, 1 * b[0], 1 * b[1]) }); a.table().node(); var c = a.table().node().cloneNode(!1), e = d(a.table().header().cloneNode(!1)).appendTo(c), f = d(a.table().body()).clone(!1, !1).empty().appendTo(c), g = a.columns().header().filter(function (b) { return a.column(b).visible() }).to$().clone(!1).css("display", "table-cell").css("min-width", 0); d(f).append(d(a.rows({ page: "current" }).nodes()).clone(!1)).find("th, td").css("display", ""); if (f = a.table().footer()) { var f = d(f.cloneNode(!1)).appendTo(c), h = a.columns().footer().filter(function (b) { return a.column(b).visible() }).to$().clone(!1).css("display", "table-cell"); d("<tr/>").append(h).appendTo(f) } d("<tr/>").append(g).appendTo(e); "inline" === this.c.details.type && d(c).addClass("dtr-inline collapsed"); d(c).find("[name]").removeAttr("name"); d(c).css("position", "relative"); c = d("<div/>").css({ width: 1, height: 1, overflow: "hidden", clear: "both" }).append(c); c.insertBefore(a.table().node()); g.each(function (c) { c = a.column.index("fromVisible", c); b[c].minWidth = this.offsetWidth || 0 }); c.remove() } }, _setColumnVis: function (a, b) { var c = this.s.dt, e = b ? "" : "none"; d(c.column(a).header()).css("display", e); d(c.column(a).footer()).css("display", e); c.column(a).nodes().to$().css("display", e); d.isEmptyObject(n) || c.cells(null, a).indexes().each(function (a) { r(c, a.row, a.column) }) }, _tabIndexes: function () { var a = this.s.dt, b = a.cells({ page: "current" }).nodes().to$(), c = a.settings()[0], e = this.c.details.target; b.filter("[data-dtr-keyboard]").removeData("[data-dtr-keyboard]"); "number" === typeof e ? a.cells(null, e, { page: "current" }).nodes().to$().attr("tabIndex", c.iTabIndex).data("dtr-keyboard", 1) : ("td:first-child, th:first-child" === e && (e = ">td:first-child, >th:first-child"), d(e, a.rows({ page: "current" }).nodes()).attr("tabIndex", c.iTabIndex).data("dtr-keyboard", 1)) } }); i.breakpoints = [{ name: "desktop", width: Infinity }, { name: "tablet-l", width: 1024 }, { name: "tablet-p", width: 768 }, { name: "mobile-l", width: 480 }, { name: "mobile-p", width: 320 }]; i.display = { childRow: function (a, b, c) { if (b) { if (d(a.node()).hasClass("parent")) return a.child(c(), "child").show(), !0 } else { if (a.child.isShown()) return a.child(!1), d(a.node()).removeClass("parent"), !1; a.child(c(), "child").show(); d(a.node()).addClass("parent"); return !0 } }, childRowImmediate: function (a, b, c) { if (!b && a.child.isShown() || !a.responsive.hasHidden()) return a.child(!1), d(a.node()).removeClass("parent"), !1; a.child(c(), "child").show(); d(a.node()).addClass("parent"); return !0 }, modal: function (a) { return function (b, c, e) { if (c) d("div.dtr-modal-content").empty().append(e()); else { var f = function () { g.remove(); d(j).off("keypress.dtr") }, g = d('<div class="dtr-modal"/>').append(d('<div class="dtr-modal-display"/>').append(d('<div class="dtr-modal-content"/>').append(e())).append(d('<div class="dtr-modal-close">&times;</div>').click(function () { f() }))).append(d('<div class="dtr-modal-background"/>').click(function () { f() })).appendTo("body"); d(j).on("keyup.dtr", function (a) { 27 === a.keyCode && (a.stopPropagation(), f()) }) } a && a.header && d("div.dtr-modal-content").prepend("<h2>" + a.header(b) + "</h2>") } } }; var n = {}; i.renderer = { listHiddenNodes: function () { return function (a, b, c) { var e = d('<ul data-dtr-index="' + b + '" class="dtr-details"/>'), f = !1; d.each(c, function (b, c) { c.hidden && (d('<li data-dtr-index="' + c.columnIndex + '" data-dt-row="' + c.rowIndex + '" data-dt-column="' + c.columnIndex + '"><span class="dtr-title">' + c.title + "</span> </li>").append(d('<span class="dtr-data"/>').append(t(a, c.rowIndex, c.columnIndex))).appendTo(e), f = !0) }); return f ? e : !1 } }, listHidden: function () { return function (a, b, c) { return (a = d.map(c, function (a) { return a.hidden ? '<li data-dtr-index="' + a.columnIndex + '" data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><span class="dtr-title">' + a.title + '</span> <span class="dtr-data">' + a.data + "</span></li>" : "" }).join("")) ? d('<ul data-dtr-index="' + b + '" class="dtr-details"/>').append(a) : !1 } }, tableAll: function (a) { a = d.extend({ tableClass: "" }, a); return function (b, c, e) { b = d.map(e, function (a) { return '<tr data-dt-row="' + a.rowIndex + '" data-dt-column="' + a.columnIndex + '"><td>' + a.title + ":</td> <td>" + a.data + "</td></tr>" }).join(""); return d('<table class="' + a.tableClass + ' dtr-details" width="100%"/>').append(b) } } }; i.defaults = { breakpoints: i.breakpoints, auto: !0, details: { display: i.display.childRow, renderer: i.renderer.listHidden(), target: 0, type: "inline" }, orthogonal: "display" }; var p = d.fn.dataTable.Api; p.register("responsive()", function () { return this }); p.register("responsive.index()", function (a) { a = d(a); return { column: a.data("dtr-index"), row: a.parent().data("dtr-index") } }); p.register("responsive.rebuild()", function () { return this.iterator("table", function (a) { a._responsive && a._responsive._classLogic() }) }); p.register("responsive.recalc()", function () { return this.iterator("table", function (a) { a._responsive && (a._responsive._resizeAuto(), a._responsive._resize()) }) }); p.register("responsive.hasHidden()", function () { var a = this.context[0]; return a._responsive ? -1 !== d.inArray(!1, a._responsive.s.current) : !1 }); p.registerPlural("columns().responsiveHidden()", "column().responsiveHidden()", function () { return this.iterator("column", function (a, b) { return a._responsive ? a._responsive.s.current[b] : !1 }, 1) }); i.version = "2.2.2"; d.fn.dataTable.Responsive = i; d.fn.DataTable.Responsive = i; d(j).on("preInit.dt.dtr", function (a, b) { if ("dt" === a.namespace && (d(b.nTable).hasClass("responsive") || d(b.nTable).hasClass("dt-responsive") || b.oInit.responsive || o.defaults.responsive)) { var c = b.oInit.responsive; !1 !== c && new i(b, d.isPlainObject(c) ? c : {}) } }); return i });/*!
 Bootstrap integration for DataTables' Responsive
 ©2015-2016 SpryMedia Ltd - datatables.net/license
*/(function (c) { "function" === typeof define && define.amd ? define(["jquery", "datatables.net-bs", "datatables.net-responsive"], function (a) { return c(a, window, document) }) : "object" === typeof exports ? module.exports = function (a, b) { a || (a = window); if (!b || !b.fn.dataTable) b = require("datatables.net-bs")(a, b).$; b.fn.dataTable.Responsive || require("datatables.net-responsive")(a, b); return c(b, a, a.document) } : c(jQuery, window, document) })(function (c) { var a = c.fn.dataTable, b = a.Responsive.display, g = b.modal, e = c('<div class="modal fade dtr-bs-modal" role="dialog"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div><div class="modal-body"/></div></div></div>'); b.modal = function (a) { return function (b, d, f) { if (c.fn.modal) { if (!d) { if (a && a.header) { var d = e.find("div.modal-header"), h = d.find("button").detach(); d.empty().append('<h4 class="modal-title">' + a.header(b) + "</h4>").prepend(h) } e.find("div.modal-body").empty().append(f()); e.appendTo("body").modal() } } else g(b, d, f) } }; return a.Responsive });;/*! jQuery UI - v1.12.1 - 2018-07-08
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/draggable.js, widgets/droppable.js, widgets/resizable.js, widgets/selectable.js, widgets/sortable.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/selectmenu.js, widgets/slider.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */(function (factory) { if (typeof define === "function" && define.amd) { define(["jquery"], factory); } else { factory(jQuery); } }(function ($) {
    $.ui = $.ui || {}; var version = $.ui.version = "1.12.1";/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetUuid = 0; var widgetSlice = Array.prototype.slice; $.cleanData = (function (orig) {
        return function (elems) {
            var events, elem, i; for (i = 0; (elem = elems[i]) != null; i++) { try { events = $._data(elem, "events"); if (events && events.remove) { $(elem).triggerHandler("remove"); } } catch (e) { } }
            orig(elems);
        };
    })($.cleanData); $.widget = function (name, base, prototype) {
        var existingConstructor, constructor, basePrototype; var proxiedPrototype = {}; var namespace = name.split(".")[0]; name = name.split(".")[1]; var fullName = namespace + "-" + name; if (!prototype) { prototype = base; base = $.Widget; }
        if ($.isArray(prototype)) { prototype = $.extend.apply(null, [{}].concat(prototype)); }
        $.expr[":"][fullName.toLowerCase()] = function (elem) { return !!$.data(elem, fullName); }; $[namespace] = $[namespace] || {}; existingConstructor = $[namespace][name]; constructor = $[namespace][name] = function (options, element) {
            if (!this._createWidget) { return new constructor(options, element); }
            if (arguments.length) { this._createWidget(options, element); }
        }; $.extend(constructor, existingConstructor, { version: prototype.version, _proto: $.extend({}, prototype), _childConstructors: [] }); basePrototype = new base(); basePrototype.options = $.widget.extend({}, basePrototype.options); $.each(prototype, function (prop, value) {
            if (!$.isFunction(value)) { proxiedPrototype[prop] = value; return; }
            proxiedPrototype[prop] = (function () {
                function _super() { return base.prototype[prop].apply(this, arguments); }
                function _superApply(args) { return base.prototype[prop].apply(this, args); }
                return function () { var __super = this._super; var __superApply = this._superApply; var returnValue; this._super = _super; this._superApply = _superApply; returnValue = value.apply(this, arguments); this._super = __super; this._superApply = __superApply; return returnValue; };
            })();
        }); constructor.prototype = $.widget.extend(basePrototype, { widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name }, proxiedPrototype, { constructor: constructor, namespace: namespace, widgetName: name, widgetFullName: fullName }); if (existingConstructor) { $.each(existingConstructor._childConstructors, function (i, child) { var childPrototype = child.prototype; $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto); }); delete existingConstructor._childConstructors; } else { base._childConstructors.push(constructor); }
        $.widget.bridge(name, constructor); return constructor;
    }; $.widget.extend = function (target) {
        var input = widgetSlice.call(arguments, 1); var inputIndex = 0; var inputLength = input.length; var key; var value; for (; inputIndex < inputLength; inputIndex++) { for (key in input[inputIndex]) { value = input[inputIndex][key]; if (input[inputIndex].hasOwnProperty(key) && value !== undefined) { if ($.isPlainObject(value)) { target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value); } else { target[key] = value; } } } }
        return target;
    }; $.widget.bridge = function (name, object) {
        var fullName = object.prototype.widgetFullName || name; $.fn[name] = function (options) {
            var isMethodCall = typeof options === "string"; var args = widgetSlice.call(arguments, 1); var returnValue = this; if (isMethodCall) {
                if (!this.length && options === "instance") { returnValue = undefined; } else {
                    this.each(function () {
                        var methodValue; var instance = $.data(this, fullName); if (options === "instance") { returnValue = instance; return false; }
                        if (!instance) { return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'"); }
                        if (!$.isFunction(instance[options]) || options.charAt(0) === "_") { return $.error("no such method '" + options + "' for " + name + " widget instance"); }
                        methodValue = instance[options].apply(instance, args); if (methodValue !== instance && methodValue !== undefined) { returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue; return false; }
                    });
                }
            } else {
                if (args.length) { options = $.widget.extend.apply(null, [options].concat(args)); }
                this.each(function () { var instance = $.data(this, fullName); if (instance) { instance.option(options || {}); if (instance._init) { instance._init(); } } else { $.data(this, fullName, new object(options, this)); } });
            }
            return returnValue;
        };
    }; $.Widget = function () { }; $.Widget._childConstructors = []; $.Widget.prototype = {
        widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { classes: {}, disabled: false, create: null }, _createWidget: function (options, element) {
            element = $(element || this.defaultElement || this)[0]; this.element = $(element); this.uuid = widgetUuid++; this.eventNamespace = "." + this.widgetName + this.uuid; this.bindings = $(); this.hoverable = $(); this.focusable = $(); this.classesElementLookup = {}; if (element !== this) { $.data(element, this.widgetFullName, this); this._on(true, this.element, { remove: function (event) { if (event.target === element) { this.destroy(); } } }); this.document = $(element.style ? element.ownerDocument : element.document || element); this.window = $(this.document[0].defaultView || this.document[0].parentWindow); }
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options); this._create(); if (this.options.disabled) { this._setOptionDisabled(this.options.disabled); }
            this._trigger("create", null, this._getCreateEventData()); this._init();
        }, _getCreateOptions: function () { return {}; }, _getCreateEventData: $.noop, _create: $.noop, _init: $.noop, destroy: function () { var that = this; this._destroy(); $.each(this.classesElementLookup, function (key, value) { that._removeClass(value, key); }); this.element.off(this.eventNamespace).removeData(this.widgetFullName); this.widget().off(this.eventNamespace).removeAttr("aria-disabled"); this.bindings.off(this.eventNamespace); }, _destroy: $.noop, widget: function () { return this.element; }, option: function (key, value) {
            var options = key; var parts; var curOption; var i; if (arguments.length === 0) { return $.widget.extend({}, this.options); }
            if (typeof key === "string") {
                options = {}; parts = key.split("."); key = parts.shift(); if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]); for (i = 0; i < parts.length - 1; i++) { curOption[parts[i]] = curOption[parts[i]] || {}; curOption = curOption[parts[i]]; }
                    key = parts.pop(); if (arguments.length === 1) { return curOption[key] === undefined ? null : curOption[key]; }
                    curOption[key] = value;
                } else {
                    if (arguments.length === 1) { return this.options[key] === undefined ? null : this.options[key]; }
                    options[key] = value;
                }
            }
            this._setOptions(options); return this;
        }, _setOptions: function (options) {
            var key; for (key in options) { this._setOption(key, options[key]); }
            return this;
        }, _setOption: function (key, value) {
            if (key === "classes") { this._setOptionClasses(value); }
            this.options[key] = value; if (key === "disabled") { this._setOptionDisabled(value); }
            return this;
        }, _setOptionClasses: function (value) {
            var classKey, elements, currentElements; for (classKey in value) {
                currentElements = this.classesElementLookup[classKey]; if (value[classKey] === this.options.classes[classKey] || !currentElements || !currentElements.length) { continue; }
                elements = $(currentElements.get()); this._removeClass(currentElements, classKey); elements.addClass(this._classes({ element: elements, keys: classKey, classes: value, add: true }));
            }
        }, _setOptionDisabled: function (value) { this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!value); if (value) { this._removeClass(this.hoverable, null, "ui-state-hover"); this._removeClass(this.focusable, null, "ui-state-focus"); } }, enable: function () { return this._setOptions({ disabled: false }); }, disable: function () { return this._setOptions({ disabled: true }); }, _classes: function (options) {
            var full = []; var that = this; options = $.extend({ element: this.element, classes: this.options.classes || {} }, options); function processClassString(classes, checkOption) {
                var current, i; for (i = 0; i < classes.length; i++) {
                    current = that.classesElementLookup[classes[i]] || $(); if (options.add) { current = $($.unique(current.get().concat(options.element.get()))); } else { current = $(current.not(options.element).get()); }
                    that.classesElementLookup[classes[i]] = current; full.push(classes[i]); if (checkOption && options.classes[classes[i]]) { full.push(options.classes[classes[i]]); }
                }
            }
            this._on(options.element, { "remove": "_untrackClassesElement" }); if (options.keys) { processClassString(options.keys.match(/\S+/g) || [], true); }
            if (options.extra) { processClassString(options.extra.match(/\S+/g) || []); }
            return full.join(" ");
        }, _untrackClassesElement: function (event) { var that = this; $.each(that.classesElementLookup, function (key, value) { if ($.inArray(event.target, value) !== -1) { that.classesElementLookup[key] = $(value.not(event.target).get()); } }); }, _removeClass: function (element, keys, extra) { return this._toggleClass(element, keys, extra, false); }, _addClass: function (element, keys, extra) { return this._toggleClass(element, keys, extra, true); }, _toggleClass: function (element, keys, extra, add) { add = (typeof add === "boolean") ? add : extra; var shift = (typeof element === "string" || element === null), options = { extra: shift ? keys : extra, keys: shift ? element : keys, element: shift ? this.element : element, add: add }; options.element.toggleClass(this._classes(options), add); return this; }, _on: function (suppressDisabledCheck, element, handlers) {
            var delegateElement; var instance = this; if (typeof suppressDisabledCheck !== "boolean") { handlers = element; element = suppressDisabledCheck; suppressDisabledCheck = false; }
            if (!handlers) { handlers = element; element = this.element; delegateElement = this.widget(); } else { element = delegateElement = $(element); this.bindings = this.bindings.add(element); }
            $.each(handlers, function (event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) { return; }
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                }
                if (typeof handler !== "string") { handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++; }
                var match = event.match(/^([\w:-]*)\s*(.*)$/); var eventName = match[1] + instance.eventNamespace; var selector = match[2]; if (selector) { delegateElement.on(eventName, selector, handlerProxy); } else { element.on(eventName, handlerProxy); }
            });
        }, _off: function (element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") +
            this.eventNamespace; element.off(eventName).off(eventName); this.bindings = $(this.bindings.not(element).get()); this.focusable = $(this.focusable.not(element).get()); this.hoverable = $(this.hoverable.not(element).get());
        }, _delay: function (handler, delay) {
            function handlerProxy() { return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments); }
            var instance = this; return setTimeout(handlerProxy, delay || 0);
        }, _hoverable: function (element) { this.hoverable = this.hoverable.add(element); this._on(element, { mouseenter: function (event) { this._addClass($(event.currentTarget), null, "ui-state-hover"); }, mouseleave: function (event) { this._removeClass($(event.currentTarget), null, "ui-state-hover"); } }); }, _focusable: function (element) { this.focusable = this.focusable.add(element); this._on(element, { focusin: function (event) { this._addClass($(event.currentTarget), null, "ui-state-focus"); }, focusout: function (event) { this._removeClass($(event.currentTarget), null, "ui-state-focus"); } }); }, _trigger: function (type, event, data) {
            var prop, orig; var callback = this.options[type]; data = data || {}; event = $.Event(event); event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase(); event.target = this.element[0]; orig = event.originalEvent; if (orig) { for (prop in orig) { if (!(prop in event)) { event[prop] = orig[prop]; } } }
            this.element.trigger(event, data); return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
        }
    }; $.each({ show: "fadeIn", hide: "fadeOut" }, function (method, defaultEffect) {
        $.Widget.prototype["_" + method] = function (element, options, callback) {
            if (typeof options === "string") { options = { effect: options }; }
            var hasOptions; var effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect; options = options || {}; if (typeof options === "number") { options = { duration: options }; }
            hasOptions = !$.isEmptyObject(options); options.complete = callback; if (options.delay) { element.delay(options.delay); }
            if (hasOptions && $.effects && $.effects.effect[effectName]) { element[method](options); } else if (effectName !== method && element[effectName]) { element[effectName](options.duration, options.easing, callback); } else {
                element.queue(function (next) {
                    $(this)[method](); if (callback) { callback.call(element[0]); }
                    next();
                });
            }
        };
    }); var widget = $.widget;/*!
 * jQuery UI Position 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */(function () {
        var cachedScrollbarWidth, max = Math.max, abs = Math.abs, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position; function getOffsets(offsets, width, height) { return [parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)]; }
        function parseCss(element, property) { return parseInt($.css(element, property), 10) || 0; }
        function getDimensions(elem) {
            var raw = elem[0]; if (raw.nodeType === 9) { return { width: elem.width(), height: elem.height(), offset: { top: 0, left: 0 } }; }
            if ($.isWindow(raw)) { return { width: elem.width(), height: elem.height(), offset: { top: elem.scrollTop(), left: elem.scrollLeft() } }; }
            if (raw.preventDefault) { return { width: 0, height: 0, offset: { top: raw.pageY, left: raw.pageX } }; }
            return { width: elem.outerWidth(), height: elem.outerHeight(), offset: elem.offset() };
        }
        $.position = {
            scrollbarWidth: function () {
                if (cachedScrollbarWidth !== undefined) { return cachedScrollbarWidth; }
                var w1, w2, div = $("<div " + "style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'>" + "<div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0]; $("body").append(div); w1 = innerDiv.offsetWidth; div.css("overflow", "scroll"); w2 = innerDiv.offsetWidth; if (w1 === w2) { w2 = div[0].clientWidth; }
                div.remove(); return (cachedScrollbarWidth = w1 - w2);
            }, getScrollInfo: function (within) { var overflowX = within.isWindow || within.isDocument ? "" : within.element.css("overflow-x"), overflowY = within.isWindow || within.isDocument ? "" : within.element.css("overflow-y"), hasOverflowX = overflowX === "scroll" || (overflowX === "auto" && within.width < within.element[0].scrollWidth), hasOverflowY = overflowY === "scroll" || (overflowY === "auto" && within.height < within.element[0].scrollHeight); return { width: hasOverflowY ? $.position.scrollbarWidth() : 0, height: hasOverflowX ? $.position.scrollbarWidth() : 0 }; }, getWithinInfo: function (element) { var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && withinElement[0].nodeType === 9, hasOffset = !isWindow && !isDocument; return { element: withinElement, isWindow: isWindow, isDocument: isDocument, offset: hasOffset ? $(element).offset() : { left: 0, top: 0 }, scrollLeft: withinElement.scrollLeft(), scrollTop: withinElement.scrollTop(), width: withinElement.outerWidth(), height: withinElement.outerHeight() }; }
        }; $.fn.position = function (options) {
            if (!options || !options.of) { return _position.apply(this, arguments); }
            options = $.extend({}, options); var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {}; dimensions = getDimensions(target); if (target[0].preventDefault) { options.at = "left top"; }
            targetWidth = dimensions.width; targetHeight = dimensions.height; targetOffset = dimensions.offset; basePosition = $.extend({}, targetOffset); $.each(["my", "at"], function () {
                var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset; if (pos.length === 1) { pos = rhorizontal.test(pos[0]) ? pos.concat(["center"]) : rvertical.test(pos[0]) ? ["center"].concat(pos) : ["center", "center"]; }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center"; pos[1] = rvertical.test(pos[1]) ? pos[1] : "center"; horizontalOffset = roffset.exec(pos[0]); verticalOffset = roffset.exec(pos[1]); offsets[this] = [horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0]; options[this] = [rposition.exec(pos[0])[0], rposition.exec(pos[1])[0]];
            }); if (collision.length === 1) { collision[1] = collision[0]; }
            if (options.at[0] === "right") { basePosition.left += targetWidth; } else if (options.at[0] === "center") { basePosition.left += targetWidth / 2; }
            if (options.at[1] === "bottom") { basePosition.top += targetHeight; } else if (options.at[1] === "center") { basePosition.top += targetHeight / 2; }
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight); basePosition.left += atOffset[0]; basePosition.top += atOffset[1]; return this.each(function () {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") +
                    scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") +
                        scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight()); if (options.my[0] === "right") { position.left -= elemWidth; } else if (options.my[0] === "center") { position.left -= elemWidth / 2; }
                if (options.my[1] === "bottom") { position.top -= elemHeight; } else if (options.my[1] === "center") { position.top -= elemHeight / 2; }
                position.left += myOffset[0]; position.top += myOffset[1]; collisionPosition = { marginLeft: marginLeft, marginTop: marginTop }; $.each(["left", "top"], function (i, dir) { if ($.ui.position[collision[i]]) { $.ui.position[collision[i]][dir](position, { targetWidth: targetWidth, targetHeight: targetHeight, elemWidth: elemWidth, elemHeight: elemHeight, collisionPosition: collisionPosition, collisionWidth: collisionWidth, collisionHeight: collisionHeight, offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]], my: options.my, at: options.at, within: within, elem: elem }); } }); if (options.using) {
                    using = function (props) {
                        var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = { target: { element: target, left: targetOffset.left, top: targetOffset.top, width: targetWidth, height: targetHeight }, element: { element: elem, left: position.left, top: position.top, width: elemWidth, height: elemHeight }, horizontal: right < 0 ? "left" : left > 0 ? "right" : "center", vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle" }; if (targetWidth < elemWidth && abs(left + right) < targetWidth) { feedback.horizontal = "center"; }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) { feedback.vertical = "middle"; }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) { feedback.important = "horizontal"; } else { feedback.important = "vertical"; }
                        options.using.call(this, props, feedback);
                    };
                }
                elem.offset($.extend(position, { using: using }));
            });
        }; $.ui.position = {
            fit: {
                left: function (position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight; if (data.collisionWidth > outerWidth) {
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
                            withinOffset; position.left += overLeft - newOverRight;
                        } else if (overRight > 0 && overLeft <= 0) { position.left = withinOffset; } else { if (overLeft > overRight) { position.left = withinOffset + outerWidth - data.collisionWidth; } else { position.left = withinOffset; } }
                    } else if (overLeft > 0) { position.left += overLeft; } else if (overRight > 0) { position.left -= overRight; } else { position.left = max(position.left - collisionPosLeft, position.left); }
                }, top: function (position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom; if (data.collisionHeight > outerHeight) {
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
                            withinOffset; position.top += overTop - newOverBottom;
                        } else if (overBottom > 0 && overTop <= 0) { position.top = withinOffset; } else { if (overTop > overBottom) { position.top = withinOffset + outerHeight - data.collisionHeight; } else { position.top = withinOffset; } }
                    } else if (overTop > 0) { position.top += overTop; } else if (overBottom > 0) { position.top -= overBottom; } else { position.top = max(position.top - collisionPosTop, position.top); }
                }
            }, flip: {
                left: function (position, data) {
                    var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft; if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
                        outerWidth - withinOffset; if (newOverRight < 0 || newOverRight < abs(overLeft)) { position.left += myOffset + atOffset + offset; }
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
                        atOffset + offset - offsetLeft; if (newOverLeft > 0 || abs(newOverLeft) < overRight) { position.left += myOffset + atOffset + offset; }
                    }
                }, top: function (position, data) {
                    var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === "top", myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom; if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
                        outerHeight - withinOffset; if (newOverBottom < 0 || newOverBottom < abs(overTop)) { position.top += myOffset + atOffset + offset; }
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
                        offset - offsetTop; if (newOverTop > 0 || abs(newOverTop) < overBottom) { position.top += myOffset + atOffset + offset; }
                    }
                }
            }, flipfit: { left: function () { $.ui.position.flip.left.apply(this, arguments); $.ui.position.fit.left.apply(this, arguments); }, top: function () { $.ui.position.flip.top.apply(this, arguments); $.ui.position.fit.top.apply(this, arguments); } }
        };
    })(); var position = $.ui.position;/*!
 * jQuery UI :data 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var data = $.extend($.expr[":"], { data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) { return function (elem) { return !!$.data(elem, dataName); }; }) : function (elem, i, match) { return !!$.data(elem, match[3]); } });/*!
 * jQuery UI Disable Selection 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var disableSelection = $.fn.extend({ disableSelection: (function () { var eventType = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown"; return function () { return this.on(eventType + ".ui-disableSelection", function (event) { event.preventDefault(); }); }; })(), enableSelection: function () { return this.off(".ui-disableSelection"); } });/*!
 * jQuery UI Focusable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.ui.focusable = function (element, hasTabindex) {
        var map, mapName, img, focusableIfVisible, fieldset, nodeName = element.nodeName.toLowerCase(); if ("area" === nodeName) {
            map = element.parentNode; mapName = map.name; if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") { return false; }
            img = $("img[usemap='#" + mapName + "']"); return img.length > 0 && img.is(":visible");
        }
        if (/^(input|select|textarea|button|object)$/.test(nodeName)) { focusableIfVisible = !element.disabled; if (focusableIfVisible) { fieldset = $(element).closest("fieldset")[0]; if (fieldset) { focusableIfVisible = !fieldset.disabled; } } } else if ("a" === nodeName) { focusableIfVisible = element.href || hasTabindex; } else { focusableIfVisible = hasTabindex; }
        return focusableIfVisible && $(element).is(":visible") && visible($(element));
    }; function visible(element) {
        var visibility = element.css("visibility"); while (visibility === "inherit") { element = element.parent(); visibility = element.css("visibility"); }
        return visibility !== "hidden";
    }
    $.extend($.expr[":"], { focusable: function (element) { return $.ui.focusable(element, $.attr(element, "tabindex") != null); } }); var focusable = $.ui.focusable; var form = $.fn.form = function () { return typeof this[0].form === "string" ? this.closest("form") : $(this[0].form); };/*!
 * jQuery UI Form Reset Mixin 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var formResetMixin = $.ui.formResetMixin = {
        _formResetHandler: function () { var form = $(this); setTimeout(function () { var instances = form.data("ui-form-reset-instances"); $.each(instances, function () { this.refresh(); }); }); }, _bindFormResetHandler: function () {
            this.form = this.element.form(); if (!this.form.length) { return; }
            var instances = this.form.data("ui-form-reset-instances") || []; if (!instances.length) { this.form.on("reset.ui-form-reset", this._formResetHandler); }
            instances.push(this); this.form.data("ui-form-reset-instances", instances);
        }, _unbindFormResetHandler: function () {
            if (!this.form.length) { return; }
            var instances = this.form.data("ui-form-reset-instances"); instances.splice($.inArray(this, instances), 1); if (instances.length) { this.form.data("ui-form-reset-instances", instances); } else { this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset"); }
        }
    };/*!
 * jQuery UI Support for jQuery core 1.7.x 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 */if ($.fn.jquery.substring(0, 3) === "1.7") {
        $.each(["Width", "Height"], function (i, name) {
            var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], type = name.toLowerCase(), orig = { innerWidth: $.fn.innerWidth, innerHeight: $.fn.innerHeight, outerWidth: $.fn.outerWidth, outerHeight: $.fn.outerHeight }; function reduce(elem, size, border, margin) {
                $.each(side, function () {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0; if (border) { size -= parseFloat($.css(elem, "border" + this + "Width")) || 0; }
                    if (margin) { size -= parseFloat($.css(elem, "margin" + this)) || 0; }
                }); return size;
            }
            $.fn["inner" + name] = function (size) {
                if (size === undefined) { return orig["inner" + name].call(this); }
                return this.each(function () { $(this).css(type, reduce(this, size) + "px"); });
            }; $.fn["outer" + name] = function (size, margin) {
                if (typeof size !== "number") { return orig["outer" + name].call(this, size); }
                return this.each(function () { $(this).css(type, reduce(this, size, true, margin) + "px"); });
            };
        }); $.fn.addBack = function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)); };
    };/*!
 * jQuery UI Keycode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var keycode = $.ui.keyCode = { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 }; var escapeSelector = $.ui.escapeSelector = (function () { var selectorEscape = /([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g; return function (selector) { return selector.replace(selectorEscape, "\\$1"); }; })();/*!
 * jQuery UI Labels 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var labels = $.fn.labels = function () {
        var ancestor, selector, id, labels, ancestors; if (this[0].labels && this[0].labels.length) { return this.pushStack(this[0].labels); }
        labels = this.eq(0).parents("label"); id = this.attr("id"); if (id) { ancestor = this.eq(0).parents().last(); ancestors = ancestor.add(ancestor.length ? ancestor.siblings() : this.siblings()); selector = "label[for='" + $.ui.escapeSelector(id) + "']"; labels = labels.add(ancestors.find(selector).addBack(selector)); }
        return this.pushStack(labels);
    };/*!
 * jQuery UI Scroll Parent 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var scrollParent = $.fn.scrollParent = function (includeHidden) {
        var position = this.css("position"), excludeStaticParent = position === "absolute", overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function () {
            var parent = $(this); if (excludeStaticParent && parent.css("position") === "static") { return false; }
            return overflowRegex.test(parent.css("overflow") + parent.css("overflow-y") +
                parent.css("overflow-x"));
        }).eq(0); return position === "fixed" || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
    };/*!
 * jQuery UI Tabbable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var tabbable = $.extend($.expr[":"], { tabbable: function (element) { var tabIndex = $.attr(element, "tabindex"), hasTabindex = tabIndex != null; return (!hasTabindex || tabIndex >= 0) && $.ui.focusable(element, hasTabindex); } });/*!
 * jQuery UI Unique ID 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var uniqueId = $.fn.extend({ uniqueId: (function () { var uuid = 0; return function () { return this.each(function () { if (!this.id) { this.id = "ui-id-" + (++uuid); } }); }; })(), removeUniqueId: function () { return this.each(function () { if (/^ui-id-\d+$/.test(this.id)) { $(this).removeAttr("id"); } }); } }); var ie = $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());/*!
 * jQuery UI Mouse 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var mouseHandled = false; $(document).on("mouseup", function () { mouseHandled = false; }); var widgetsMouse = $.widget("ui.mouse", {
        version: "1.12.1", options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 }, _mouseInit: function () { var that = this; this.element.on("mousedown." + this.widgetName, function (event) { return that._mouseDown(event); }).on("click." + this.widgetName, function (event) { if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) { $.removeData(event.target, that.widgetName + ".preventClickEvent"); event.stopImmediatePropagation(); return false; } }); this.started = false; }, _mouseDestroy: function () { this.element.off("." + this.widgetName); if (this._mouseMoveDelegate) { this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate); } }, _mouseDown: function (event) {
            if (mouseHandled) { return; }
            this._mouseMoved = false; (this._mouseStarted && this._mouseUp(event)); this._mouseDownEvent = event; var that = this, btnIsLeft = (event.which === 1), elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false); if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) { return true; }
            this.mouseDelayMet = !this.options.delay; if (!this.mouseDelayMet) { this._mouseDelayTimer = setTimeout(function () { that.mouseDelayMet = true; }, this.options.delay); }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) { this._mouseStarted = (this._mouseStart(event) !== false); if (!this._mouseStarted) { event.preventDefault(); return true; } }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) { $.removeData(event.target, this.widgetName + ".preventClickEvent"); }
            this._mouseMoveDelegate = function (event) { return that._mouseMove(event); }; this._mouseUpDelegate = function (event) { return that._mouseUp(event); }; this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate); event.preventDefault(); mouseHandled = true; return true;
        }, _mouseMove: function (event) {
            if (this._mouseMoved) { if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) { return this._mouseUp(event); } else if (!event.which) { if (event.originalEvent.altKey || event.originalEvent.ctrlKey || event.originalEvent.metaKey || event.originalEvent.shiftKey) { this.ignoreMissingWhich = true; } else if (!this.ignoreMissingWhich) { return this._mouseUp(event); } } }
            if (event.which || event.button) { this._mouseMoved = true; }
            if (this._mouseStarted) { this._mouseDrag(event); return event.preventDefault(); }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) { this._mouseStarted = (this._mouseStart(this._mouseDownEvent, event) !== false); (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event)); }
            return !this._mouseStarted;
        }, _mouseUp: function (event) {
            this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate); if (this._mouseStarted) {
                this._mouseStarted = false; if (event.target === this._mouseDownEvent.target) { $.data(event.target, this.widgetName + ".preventClickEvent", true); }
                this._mouseStop(event);
            }
            if (this._mouseDelayTimer) { clearTimeout(this._mouseDelayTimer); delete this._mouseDelayTimer; }
            this.ignoreMissingWhich = false; mouseHandled = false; event.preventDefault();
        }, _mouseDistanceMet: function (event) { return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance); }, _mouseDelayMet: function () { return this.mouseDelayMet; }, _mouseStart: function () { }, _mouseDrag: function () { }, _mouseStop: function () { }, _mouseCapture: function () { return true; }
    }); var plugin = $.ui.plugin = {
        add: function (module, option, set) { var i, proto = $.ui[module].prototype; for (i in set) { proto.plugins[i] = proto.plugins[i] || []; proto.plugins[i].push([option, set[i]]); } }, call: function (instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name]; if (!set) { return; }
            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) { return; }
            for (i = 0; i < set.length; i++) { if (instance.options[set[i][0]]) { set[i][1].apply(instance.element, args); } }
        }
    }; var safeActiveElement = $.ui.safeActiveElement = function (document) {
        var activeElement; try { activeElement = document.activeElement; } catch (error) { activeElement = document.body; }
        if (!activeElement) { activeElement = document.body; }
        if (!activeElement.nodeName) { activeElement = document.body; }
        return activeElement;
    }; var safeBlur = $.ui.safeBlur = function (element) { if (element && element.nodeName.toLowerCase() !== "body") { $(element).trigger("blur"); } };/*!
 * jQuery UI Draggable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.draggable", $.ui.mouse, {
        version: "1.12.1", widgetEventPrefix: "drag", options: { addClasses: true, appendTo: "parent", axis: false, connectToSortable: false, containment: false, cursor: "auto", cursorAt: false, grid: false, handle: false, helper: "original", iframeFix: false, opacity: false, refreshPositions: false, revert: false, revertDuration: 500, scope: "default", scroll: true, scrollSensitivity: 20, scrollSpeed: 20, snap: false, snapMode: "both", snapTolerance: 20, stack: false, zIndex: false, drag: null, start: null, stop: null }, _create: function () {
            if (this.options.helper === "original") { this._setPositionRelative(); }
            if (this.options.addClasses) { this._addClass("ui-draggable"); }
            this._setHandleClassName(); this._mouseInit();
        }, _setOption: function (key, value) { this._super(key, value); if (key === "handle") { this._removeHandleClassName(); this._setHandleClassName(); } }, _destroy: function () {
            if ((this.helper || this.element).is(".ui-draggable-dragging")) { this.destroyOnClear = true; return; }
            this._removeHandleClassName(); this._mouseDestroy();
        }, _mouseCapture: function (event) {
            var o = this.options; if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) { return false; }
            this.handle = this._getHandle(event); if (!this.handle) { return false; }
            this._blurActiveElement(event); this._blockFrames(o.iframeFix === true ? "iframe" : o.iframeFix); return true;
        }, _blockFrames: function (selector) { this.iframeBlocks = this.document.find(selector).map(function () { var iframe = $(this); return $("<div>").css("position", "absolute").appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0]; }); }, _unblockFrames: function () { if (this.iframeBlocks) { this.iframeBlocks.remove(); delete this.iframeBlocks; } }, _blurActiveElement: function (event) {
            var activeElement = $.ui.safeActiveElement(this.document[0]), target = $(event.target); if (target.closest(activeElement).length) { return; }
            $.ui.safeBlur(activeElement);
        }, _mouseStart: function (event) {
            var o = this.options; this.helper = this._createHelper(event); this._addClass(this.helper, "ui-draggable-dragging"); this._cacheHelperProportions(); if ($.ui.ddmanager) { $.ui.ddmanager.current = this; }
            this._cacheMargins(); this.cssPosition = this.helper.css("position"); this.scrollParent = this.helper.scrollParent(true); this.offsetParent = this.helper.offsetParent(); this.hasFixedAncestor = this.helper.parents().filter(function () { return $(this).css("position") === "fixed"; }).length > 0; this.positionAbs = this.element.offset(); this._refreshOffsets(event); this.originalPosition = this.position = this._generatePosition(event, false); this.originalPageX = event.pageX; this.originalPageY = event.pageY; (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt)); this._setContainment(); if (this._trigger("start", event) === false) { this._clear(); return false; }
            this._cacheHelperProportions(); if ($.ui.ddmanager && !o.dropBehaviour) { $.ui.ddmanager.prepareOffsets(this, event); }
            this._mouseDrag(event, true); if ($.ui.ddmanager) { $.ui.ddmanager.dragStart(this, event); }
            return true;
        }, _refreshOffsets: function (event) { this.offset = { top: this.positionAbs.top - this.margins.top, left: this.positionAbs.left - this.margins.left, scroll: false, parent: this._getParentOffset(), relative: this._getRelativeOffset() }; this.offset.click = { left: event.pageX - this.offset.left, top: event.pageY - this.offset.top }; }, _mouseDrag: function (event, noPropagation) {
            if (this.hasFixedAncestor) { this.offset.parent = this._getParentOffset(); }
            this.position = this._generatePosition(event, true); this.positionAbs = this._convertPositionTo("absolute"); if (!noPropagation) {
                var ui = this._uiHash(); if (this._trigger("drag", event, ui) === false) { this._mouseUp(new $.Event("mouseup", event)); return false; }
                this.position = ui.position;
            }
            this.helper[0].style.left = this.position.left + "px"; this.helper[0].style.top = this.position.top + "px"; if ($.ui.ddmanager) { $.ui.ddmanager.drag(this, event); }
            return false;
        }, _mouseStop: function (event) {
            var that = this, dropped = false; if ($.ui.ddmanager && !this.options.dropBehaviour) { dropped = $.ui.ddmanager.drop(this, event); }
            if (this.dropped) { dropped = this.dropped; this.dropped = false; }
            if ((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) { $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () { if (that._trigger("stop", event) !== false) { that._clear(); } }); } else { if (this._trigger("stop", event) !== false) { this._clear(); } }
            return false;
        }, _mouseUp: function (event) {
            this._unblockFrames(); if ($.ui.ddmanager) { $.ui.ddmanager.dragStop(this, event); }
            if (this.handleElement.is(event.target)) { this.element.trigger("focus"); }
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        }, cancel: function () {
            if (this.helper.is(".ui-draggable-dragging")) { this._mouseUp(new $.Event("mouseup", { target: this.element[0] })); } else { this._clear(); }
            return this;
        }, _getHandle: function (event) { return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true; }, _setHandleClassName: function () { this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element; this._addClass(this.handleElement, "ui-draggable-handle"); }, _removeHandleClassName: function () { this._removeClass(this.handleElement, "ui-draggable-handle"); }, _createHelper: function (event) {
            var o = this.options, helperIsFunction = $.isFunction(o.helper), helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element); if (!helper.parents("body").length) { helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo)); }
            if (helperIsFunction && helper[0] === this.element[0]) { this._setPositionRelative(); }
            if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) { helper.css("position", "absolute"); }
            return helper;
        }, _setPositionRelative: function () { if (!(/^(?:r|a|f)/).test(this.element.css("position"))) { this.element[0].style.position = "relative"; } }, _adjustOffsetFromHelper: function (obj) {
            if (typeof obj === "string") { obj = obj.split(" "); }
            if ($.isArray(obj)) { obj = { left: +obj[0], top: +obj[1] || 0 }; }
            if ("left" in obj) { this.offset.click.left = obj.left + this.margins.left; }
            if ("right" in obj) { this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left; }
            if ("top" in obj) { this.offset.click.top = obj.top + this.margins.top; }
            if ("bottom" in obj) { this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top; }
        }, _isRootNode: function (element) { return (/(html|body)/i).test(element.tagName) || element === this.document[0]; }, _getParentOffset: function () {
            var po = this.offsetParent.offset(), document = this.document[0]; if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) { po.left += this.scrollParent.scrollLeft(); po.top += this.scrollParent.scrollTop(); }
            if (this._isRootNode(this.offsetParent[0])) { po = { top: 0, left: 0 }; }
            return { top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
        }, _getRelativeOffset: function () {
            if (this.cssPosition !== "relative") { return { top: 0, left: 0 }; }
            var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]); return {
                top: p.top - (parseInt(this.helper.css("top"), 10) || 0) +
                    (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0), left: p.left - (parseInt(this.helper.css("left"), 10) || 0) +
                        (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
            };
        }, _cacheMargins: function () { this.margins = { left: (parseInt(this.element.css("marginLeft"), 10) || 0), top: (parseInt(this.element.css("marginTop"), 10) || 0), right: (parseInt(this.element.css("marginRight"), 10) || 0), bottom: (parseInt(this.element.css("marginBottom"), 10) || 0) }; }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() }; }, _setContainment: function () {
            var isUserScrollable, c, ce, o = this.options, document = this.document[0]; this.relativeContainer = null; if (!o.containment) { this.containment = null; return; }
            if (o.containment === "window") {
                this.containment = [$(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, $(window).scrollLeft() + $(window).width() -
                    this.helperProportions.width - this.margins.left, $(window).scrollTop() +
                    ($(window).height() || document.body.parentNode.scrollHeight) -
                    this.helperProportions.height - this.margins.top]; return;
            }
            if (o.containment === "document") {
                this.containment = [0, 0, $(document).width() - this.helperProportions.width - this.margins.left, ($(document).height() || document.body.parentNode.scrollHeight) -
                    this.helperProportions.height - this.margins.top]; return;
            }
            if (o.containment.constructor === Array) { this.containment = o.containment; return; }
            if (o.containment === "parent") { o.containment = this.helper[0].parentNode; }
            c = $(o.containment); ce = c[0]; if (!ce) { return; }
            isUserScrollable = /(scroll|auto)/.test(c.css("overflow")); this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) +
                (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) +
            (parseInt(c.css("paddingTop"), 10) || 0), (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) -
            (parseInt(c.css("borderRightWidth"), 10) || 0) -
            (parseInt(c.css("paddingRight"), 10) || 0) -
            this.helperProportions.width -
            this.margins.left -
            this.margins.right, (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) -
            (parseInt(c.css("borderBottomWidth"), 10) || 0) -
            (parseInt(c.css("paddingBottom"), 10) || 0) -
            this.helperProportions.height -
            this.margins.top -
            this.margins.bottom]; this.relativeContainer = c;
        }, _convertPositionTo: function (d, pos) {
            if (!pos) { pos = this.position; }
            var mod = d === "absolute" ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]); return {
                top: (pos.top +
                    this.offset.relative.top * mod +
                    this.offset.parent.top * mod -
                    ((this.cssPosition === "fixed" ? -this.offset.scroll.top : (scrollIsRootNode ? 0 : this.offset.scroll.top)) * mod)), left: (pos.left +
                        this.offset.relative.left * mod +
                        this.offset.parent.left * mod -
                        ((this.cssPosition === "fixed" ? -this.offset.scroll.left : (scrollIsRootNode ? 0 : this.offset.scroll.left)) * mod))
            };
        }, _generatePosition: function (event, constrainPosition) {
            var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY; if (!scrollIsRootNode || !this.offset.scroll) { this.offset.scroll = { top: this.scrollParent.scrollTop(), left: this.scrollParent.scrollLeft() }; }
            if (constrainPosition) {
                if (this.containment) {
                    if (this.relativeContainer) { co = this.relativeContainer.offset(); containment = [this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top]; } else { containment = this.containment; }
                    if (event.pageX - this.offset.click.left < containment[0]) { pageX = containment[0] + this.offset.click.left; }
                    if (event.pageY - this.offset.click.top < containment[1]) { pageY = containment[1] + this.offset.click.top; }
                    if (event.pageX - this.offset.click.left > containment[2]) { pageX = containment[2] + this.offset.click.left; }
                    if (event.pageY - this.offset.click.top > containment[3]) { pageY = containment[3] + this.offset.click.top; }
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY -
                        this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY; pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top; left = o.grid[0] ? this.originalPageX +
                            Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX; pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                }
                if (o.axis === "y") { pageX = this.originalPageX; }
                if (o.axis === "x") { pageY = this.originalPageY; }
            }
            return {
                top: (pageY -
                    this.offset.click.top -
                    this.offset.relative.top -
                    this.offset.parent.top +
                    (this.cssPosition === "fixed" ? -this.offset.scroll.top : (scrollIsRootNode ? 0 : this.offset.scroll.top))), left: (pageX -
                        this.offset.click.left -
                        this.offset.relative.left -
                        this.offset.parent.left +
                        (this.cssPosition === "fixed" ? -this.offset.scroll.left : (scrollIsRootNode ? 0 : this.offset.scroll.left)))
            };
        }, _clear: function () {
            this._removeClass(this.helper, "ui-draggable-dragging"); if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) { this.helper.remove(); }
            this.helper = null; this.cancelHelperRemoval = false; if (this.destroyOnClear) { this.destroy(); }
        }, _trigger: function (type, event, ui) {
            ui = ui || this._uiHash(); $.ui.plugin.call(this, type, [event, ui, this], true); if (/^(drag|start|stop)/.test(type)) { this.positionAbs = this._convertPositionTo("absolute"); ui.offset = this.positionAbs; }
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        }, plugins: {}, _uiHash: function () { return { helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs }; }
    }); $.ui.plugin.add("draggable", "connectToSortable", {
        start: function (event, ui, draggable) { var uiSortable = $.extend({}, ui, { item: draggable.element }); draggable.sortables = []; $(draggable.options.connectToSortable).each(function () { var sortable = $(this).sortable("instance"); if (sortable && !sortable.options.disabled) { draggable.sortables.push(sortable); sortable.refreshPositions(); sortable._trigger("activate", event, uiSortable); } }); }, stop: function (event, ui, draggable) { var uiSortable = $.extend({}, ui, { item: draggable.element }); draggable.cancelHelperRemoval = false; $.each(draggable.sortables, function () { var sortable = this; if (sortable.isOver) { sortable.isOver = 0; draggable.cancelHelperRemoval = true; sortable.cancelHelperRemoval = false; sortable._storedCSS = { position: sortable.placeholder.css("position"), top: sortable.placeholder.css("top"), left: sortable.placeholder.css("left") }; sortable._mouseStop(event); sortable.options.helper = sortable.options._helper; } else { sortable.cancelHelperRemoval = true; sortable._trigger("deactivate", event, uiSortable); } }); }, drag: function (event, ui, draggable) {
            $.each(draggable.sortables, function () {
                var innermostIntersecting = false, sortable = this; sortable.positionAbs = draggable.positionAbs; sortable.helperProportions = draggable.helperProportions; sortable.offset.click = draggable.offset.click; if (sortable._intersectsWith(sortable.containerCache)) {
                    innermostIntersecting = true; $.each(draggable.sortables, function () {
                        this.positionAbs = draggable.positionAbs; this.helperProportions = draggable.helperProportions; this.offset.click = draggable.offset.click; if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) { innermostIntersecting = false; }
                        return innermostIntersecting;
                    });
                }
                if (innermostIntersecting) {
                    if (!sortable.isOver) {
                        sortable.isOver = 1; draggable._parent = ui.helper.parent(); sortable.currentItem = ui.helper.appendTo(sortable.element).data("ui-sortable-item", true); sortable.options._helper = sortable.options.helper; sortable.options.helper = function () { return ui.helper[0]; }; event.target = sortable.currentItem[0]; sortable._mouseCapture(event, true); sortable._mouseStart(event, true, true); sortable.offset.click.top = draggable.offset.click.top; sortable.offset.click.left = draggable.offset.click.left; sortable.offset.parent.left -= draggable.offset.parent.left -
                            sortable.offset.parent.left; sortable.offset.parent.top -= draggable.offset.parent.top -
                                sortable.offset.parent.top; draggable._trigger("toSortable", event); draggable.dropped = sortable.element; $.each(draggable.sortables, function () { this.refreshPositions(); }); draggable.currentItem = draggable.element; sortable.fromOutside = draggable;
                    }
                    if (sortable.currentItem) { sortable._mouseDrag(event); ui.position = sortable.position; }
                } else {
                    if (sortable.isOver) {
                        sortable.isOver = 0; sortable.cancelHelperRemoval = true; sortable.options._revert = sortable.options.revert; sortable.options.revert = false; sortable._trigger("out", event, sortable._uiHash(sortable)); sortable._mouseStop(event, true); sortable.options.revert = sortable.options._revert; sortable.options.helper = sortable.options._helper; if (sortable.placeholder) { sortable.placeholder.remove(); }
                        ui.helper.appendTo(draggable._parent); draggable._refreshOffsets(event); ui.position = draggable._generatePosition(event, true); draggable._trigger("fromSortable", event); draggable.dropped = false; $.each(draggable.sortables, function () { this.refreshPositions(); });
                    }
                }
            });
        }
    }); $.ui.plugin.add("draggable", "cursor", {
        start: function (event, ui, instance) {
            var t = $("body"), o = instance.options; if (t.css("cursor")) { o._cursor = t.css("cursor"); }
            t.css("cursor", o.cursor);
        }, stop: function (event, ui, instance) { var o = instance.options; if (o._cursor) { $("body").css("cursor", o._cursor); } }
    }); $.ui.plugin.add("draggable", "opacity", {
        start: function (event, ui, instance) {
            var t = $(ui.helper), o = instance.options; if (t.css("opacity")) { o._opacity = t.css("opacity"); }
            t.css("opacity", o.opacity);
        }, stop: function (event, ui, instance) { var o = instance.options; if (o._opacity) { $(ui.helper).css("opacity", o._opacity); } }
    }); $.ui.plugin.add("draggable", "scroll", {
        start: function (event, ui, i) {
            if (!i.scrollParentNotHidden) { i.scrollParentNotHidden = i.helper.scrollParent(false); }
            if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== "HTML") { i.overflowOffset = i.scrollParentNotHidden.offset(); }
        }, drag: function (event, ui, i) {
            var o = i.options, scrolled = false, scrollParent = i.scrollParentNotHidden[0], document = i.document[0]; if (scrollParent !== document && scrollParent.tagName !== "HTML") {
                if (!o.axis || o.axis !== "x") { if ((i.overflowOffset.top + scrollParent.offsetHeight) - event.pageY < o.scrollSensitivity) { scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed; } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) { scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed; } }
                if (!o.axis || o.axis !== "y") { if ((i.overflowOffset.left + scrollParent.offsetWidth) - event.pageX < o.scrollSensitivity) { scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed; } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) { scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed; } }
            } else {
                if (!o.axis || o.axis !== "x") { if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) { scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed); } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) { scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed); } }
                if (!o.axis || o.axis !== "y") { if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) { scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed); } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) { scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed); } }
            }
            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) { $.ui.ddmanager.prepareOffsets(i, event); }
        }
    }); $.ui.plugin.add("draggable", "snap", {
        start: function (event, ui, i) { var o = i.options; i.snapElements = []; $(o.snap.constructor !== String ? (o.snap.items || ":data(ui-draggable)") : o.snap).each(function () { var $t = $(this), $o = $t.offset(); if (this !== i.element[0]) { i.snapElements.push({ item: this, width: $t.outerWidth(), height: $t.outerHeight(), top: $o.top, left: $o.left }); } }); }, drag: function (event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height; for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left - inst.margins.left; r = l + inst.snapElements[i].width; t = inst.snapElements[i].top - inst.margins.top; b = t + inst.snapElements[i].height; if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) { (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }))); }
                    inst.snapElements[i].snapping = false; continue;
                }
                if (o.snapMode !== "inner") {
                    ts = Math.abs(t - y2) <= d; bs = Math.abs(b - y1) <= d; ls = Math.abs(l - x2) <= d; rs = Math.abs(r - x1) <= d; if (ts) { ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top; }
                    if (bs) { ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top; }
                    if (ls) { ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left; }
                    if (rs) { ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left; }
                }
                first = (ts || bs || ls || rs); if (o.snapMode !== "outer") {
                    ts = Math.abs(t - y1) <= d; bs = Math.abs(b - y2) <= d; ls = Math.abs(l - x1) <= d; rs = Math.abs(r - x2) <= d; if (ts) { ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top; }
                    if (bs) { ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top; }
                    if (ls) { ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left; }
                    if (rs) { ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left; }
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) { (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }))); }
                inst.snapElements[i].snapping = (ts || bs || ls || rs || first);
            }
        }
    }); $.ui.plugin.add("draggable", "stack", {
        start: function (event, ui, instance) {
            var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function (a, b) {
                return (parseInt($(a).css("zIndex"), 10) || 0) -
                    (parseInt($(b).css("zIndex"), 10) || 0);
            }); if (!group.length) { return; }
            min = parseInt($(group[0]).css("zIndex"), 10) || 0; $(group).each(function (i) { $(this).css("zIndex", min + i); }); this.css("zIndex", (min + group.length));
        }
    }); $.ui.plugin.add("draggable", "zIndex", {
        start: function (event, ui, instance) {
            var t = $(ui.helper), o = instance.options; if (t.css("zIndex")) { o._zIndex = t.css("zIndex"); }
            t.css("zIndex", o.zIndex);
        }, stop: function (event, ui, instance) { var o = instance.options; if (o._zIndex) { $(ui.helper).css("zIndex", o._zIndex); } }
    }); var widgetsDraggable = $.ui.draggable;/*!
 * jQuery UI Droppable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.droppable", {
        version: "1.12.1", widgetEventPrefix: "drop", options: { accept: "*", addClasses: true, greedy: false, scope: "default", tolerance: "intersect", activate: null, deactivate: null, drop: null, out: null, over: null }, _create: function () { var proportions, o = this.options, accept = o.accept; this.isover = false; this.isout = true; this.accept = $.isFunction(accept) ? accept : function (d) { return d.is(accept); }; this.proportions = function () { if (arguments.length) { proportions = arguments[0]; } else { return proportions ? proportions : proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight }; } }; this._addToManager(o.scope); o.addClasses && this._addClass("ui-droppable"); }, _addToManager: function (scope) { $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || []; $.ui.ddmanager.droppables[scope].push(this); }, _splice: function (drop) { var i = 0; for (; i < drop.length; i++) { if (drop[i] === this) { drop.splice(i, 1); } } }, _destroy: function () { var drop = $.ui.ddmanager.droppables[this.options.scope]; this._splice(drop); }, _setOption: function (key, value) {
            if (key === "accept") { this.accept = $.isFunction(value) ? value : function (d) { return d.is(value); }; } else if (key === "scope") { var drop = $.ui.ddmanager.droppables[this.options.scope]; this._splice(drop); this._addToManager(value); }
            this._super(key, value);
        }, _activate: function (event) { var draggable = $.ui.ddmanager.current; this._addActiveClass(); if (draggable) { this._trigger("activate", event, this.ui(draggable)); } }, _deactivate: function (event) { var draggable = $.ui.ddmanager.current; this._removeActiveClass(); if (draggable) { this._trigger("deactivate", event, this.ui(draggable)); } }, _over: function (event) {
            var draggable = $.ui.ddmanager.current; if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) { return; }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) { this._addHoverClass(); this._trigger("over", event, this.ui(draggable)); }
        }, _out: function (event) {
            var draggable = $.ui.ddmanager.current; if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) { return; }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) { this._removeHoverClass(); this._trigger("out", event, this.ui(draggable)); }
        }, _drop: function (event, custom) {
            var draggable = custom || $.ui.ddmanager.current, childrenIntersection = false; if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) { return false; }
            this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () { var inst = $(this).droppable("instance"); if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) && intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)) { childrenIntersection = true; return false; } }); if (childrenIntersection) { return false; }
            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) { this._removeActiveClass(); this._removeHoverClass(); this._trigger("drop", event, this.ui(draggable)); return this.element; }
            return false;
        }, ui: function (c) { return { draggable: (c.currentItem || c.element), helper: c.helper, position: c.position, offset: c.positionAbs }; }, _addHoverClass: function () { this._addClass("ui-droppable-hover"); }, _removeHoverClass: function () { this._removeClass("ui-droppable-hover"); }, _addActiveClass: function () { this._addClass("ui-droppable-active"); }, _removeActiveClass: function () { this._removeClass("ui-droppable-active"); }
    }); var intersect = $.ui.intersect = (function () {
        function isOverAxis(x, reference, size) { return (x >= reference) && (x < (reference + size)); }
        return function (draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) { return false; }
            var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left, y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height; switch (toleranceMode) { case "fit": return (l <= x1 && x2 <= r && t <= y1 && y2 <= b); case "intersect": return (l < x1 + (draggable.helperProportions.width / 2) && x2 - (draggable.helperProportions.width / 2) < r && t < y1 + (draggable.helperProportions.height / 2) && y2 - (draggable.helperProportions.height / 2) < b); case "pointer": return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width); case "touch": return ((y1 >= t && y1 <= b) || (y2 >= t && y2 <= b) || (y1 < t && y2 > b)) && ((x1 >= l && x1 <= r) || (x2 >= l && x2 <= r) || (x1 < l && x2 > r)); default: return false; }
        };
    })(); $.ui.ddmanager = {
        current: null, droppables: { "default": [] }, prepareOffsets: function (t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack(); droppablesLoop: for (i = 0; i < m.length; i++) {
                if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element)))) { continue; }
                for (j = 0; j < list.length; j++) { if (list[j] === m[i].element[0]) { m[i].proportions().height = 0; continue droppablesLoop; } }
                m[i].visible = m[i].element.css("display") !== "none"; if (!m[i].visible) { continue; }
                if (type === "mousedown") { m[i]._activate.call(m[i], event); }
                m[i].offset = m[i].element.offset(); m[i].proportions({ width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight });
            }
        }, drop: function (draggable, event) {
            var dropped = false; $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {
                if (!this.options) { return; }
                if (!this.options.disabled && this.visible && intersect(draggable, this, this.options.tolerance, event)) { dropped = this._drop.call(this, event) || dropped; }
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) { this.isout = true; this.isover = false; this._deactivate.call(this, event); }
            }); return dropped;
        }, dragStart: function (draggable, event) { draggable.element.parentsUntil("body").on("scroll.droppable", function () { if (!draggable.options.refreshPositions) { $.ui.ddmanager.prepareOffsets(draggable, event); } }); }, drag: function (draggable, event) {
            if (draggable.options.refreshPositions) { $.ui.ddmanager.prepareOffsets(draggable, event); }
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {
                if (this.options.disabled || this.greedyChild || !this.visible) { return; }
                var parentInstance, scope, parent, intersects = intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null); if (!c) { return; }
                if (this.options.greedy) { scope = this.options.scope; parent = this.element.parents(":data(ui-droppable)").filter(function () { return $(this).droppable("instance").options.scope === scope; }); if (parent.length) { parentInstance = $(parent[0]).droppable("instance"); parentInstance.greedyChild = (c === "isover"); } }
                if (parentInstance && c === "isover") { parentInstance.isover = false; parentInstance.isout = true; parentInstance._out.call(parentInstance, event); }
                this[c] = true; this[c === "isout" ? "isover" : "isout"] = false; this[c === "isover" ? "_over" : "_out"].call(this, event); if (parentInstance && c === "isout") { parentInstance.isout = false; parentInstance.isover = true; parentInstance._over.call(parentInstance, event); }
            });
        }, dragStop: function (draggable, event) { draggable.element.parentsUntil("body").off("scroll.droppable"); if (!draggable.options.refreshPositions) { $.ui.ddmanager.prepareOffsets(draggable, event); } }
    }; if ($.uiBackCompat !== false) { $.widget("ui.droppable", $.ui.droppable, { options: { hoverClass: false, activeClass: false }, _addActiveClass: function () { this._super(); if (this.options.activeClass) { this.element.addClass(this.options.activeClass); } }, _removeActiveClass: function () { this._super(); if (this.options.activeClass) { this.element.removeClass(this.options.activeClass); } }, _addHoverClass: function () { this._super(); if (this.options.hoverClass) { this.element.addClass(this.options.hoverClass); } }, _removeHoverClass: function () { this._super(); if (this.options.hoverClass) { this.element.removeClass(this.options.hoverClass); } } }); }
    var widgetsDroppable = $.ui.droppable;/*!
 * jQuery UI Resizable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.resizable", $.ui.mouse, {
        version: "1.12.1", widgetEventPrefix: "resize", options: { alsoResize: false, animate: false, animateDuration: "slow", animateEasing: "swing", aspectRatio: false, autoHide: false, classes: { "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se" }, containment: false, ghost: false, grid: false, handles: "e,s,se", helper: false, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 90, resize: null, start: null, stop: null }, _num: function (value) { return parseFloat(value) || 0; }, _isNumber: function (value) { return !isNaN(parseFloat(value)); }, _hasScroll: function (el, a) {
            if ($(el).css("overflow") === "hidden") { return false; }
            var scroll = (a && a === "left") ? "scrollLeft" : "scrollTop", has = false; if (el[scroll] > 0) { return true; }
            el[scroll] = 1; has = (el[scroll] > 0); el[scroll] = 0; return has;
        }, _create: function () {
            var margins, o = this.options, that = this; this._addClass("ui-resizable"); $.extend(this, { _aspectRatio: !!(o.aspectRatio), aspectRatio: o.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null }); if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) { this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({ position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left") })); this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")); this.elementIsWrapper = true; margins = { marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom"), marginLeft: this.originalElement.css("marginLeft") }; this.element.css(margins); this.originalElement.css("margin", 0); this.originalResizeStyle = this.originalElement.css("resize"); this.originalElement.css("resize", "none"); this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" })); this.originalElement.css(margins); this._proportionallyResize(); }
            this._setupHandles(); if (o.autoHide) {
                $(this.element).on("mouseenter", function () {
                    if (o.disabled) { return; }
                    that._removeClass("ui-resizable-autohide"); that._handles.show();
                }).on("mouseleave", function () {
                    if (o.disabled) { return; }
                    if (!that.resizing) { that._addClass("ui-resizable-autohide"); that._handles.hide(); }
                });
            }
            this._mouseInit();
        }, _destroy: function () {
            this._mouseDestroy(); var wrapper, _destroy = function (exp) { $(exp).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove(); }; if (this.elementIsWrapper) { _destroy(this.element); wrapper = this.element; this.originalElement.css({ position: wrapper.css("position"), width: wrapper.outerWidth(), height: wrapper.outerHeight(), top: wrapper.css("top"), left: wrapper.css("left") }).insertAfter(wrapper); wrapper.remove(); }
            this.originalElement.css("resize", this.originalResizeStyle); _destroy(this.originalElement); return this;
        }, _setOption: function (key, value) { this._super(key, value); switch (key) { case "handles": this._removeHandles(); this._setupHandles(); break; default: break; } }, _setupHandles: function () {
            var o = this.options, handle, i, n, hname, axis, that = this; this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" }); this._handles = $(); if (this.handles.constructor === String) {
                if (this.handles === "all") { this.handles = "n,e,s,w,se,sw,ne,nw"; }
                n = this.handles.split(","); this.handles = {}; for (i = 0; i < n.length; i++) { handle = $.trim(n[i]); hname = "ui-resizable-" + handle; axis = $("<div>"); this._addClass(axis, "ui-resizable-handle " + hname); axis.css({ zIndex: o.zIndex }); this.handles[handle] = ".ui-resizable-" + handle; this.element.append(axis); }
            }
            this._renderAxis = function (target) {
                var i, axis, padPos, padWrapper; target = target || this.element; for (i in this.handles) {
                    if (this.handles[i].constructor === String) { this.handles[i] = this.element.children(this.handles[i]).first().show(); } else if (this.handles[i].jquery || this.handles[i].nodeType) { this.handles[i] = $(this.handles[i]); this._on(this.handles[i], { "mousedown": that._mouseDown }); }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) { axis = $(this.handles[i], this.element); padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth(); padPos = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join(""); target.css(padPos, padWrapper); this._proportionallyResize(); }
                    this._handles = this._handles.add(this.handles[i]);
                }
            }; this._renderAxis(this.element); this._handles = this._handles.add(this.element.find(".ui-resizable-handle")); this._handles.disableSelection(); this._handles.on("mouseover", function () {
                if (!that.resizing) {
                    if (this.className) { axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i); }
                    that.axis = axis && axis[1] ? axis[1] : "se";
                }
            }); if (o.autoHide) { this._handles.hide(); this._addClass("ui-resizable-autohide"); }
        }, _removeHandles: function () { this._handles.remove(); }, _mouseCapture: function (event) {
            var i, handle, capture = false; for (i in this.handles) { handle = $(this.handles[i])[0]; if (handle === event.target || $.contains(handle, event.target)) { capture = true; } }
            return !this.options.disabled && capture;
        }, _mouseStart: function (event) {
            var curleft, curtop, cursor, o = this.options, el = this.element; this.resizing = true; this._renderProxy(); curleft = this._num(this.helper.css("left")); curtop = this._num(this.helper.css("top")); if (o.containment) { curleft += $(o.containment).scrollLeft() || 0; curtop += $(o.containment).scrollTop() || 0; }
            this.offset = this.helper.offset(); this.position = { left: curleft, top: curtop }; this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: el.width(), height: el.height() }; this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() }; this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() }; this.originalPosition = { left: curleft, top: curtop }; this.originalMousePosition = { left: event.pageX, top: event.pageY }; this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1); cursor = $(".ui-resizable-" + this.axis).css("cursor"); $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor); this._addClass("ui-resizable-resizing"); this._propagate("start", event); return true;
        }, _mouseDrag: function (event) {
            var data, props, smp = this.originalMousePosition, a = this.axis, dx = (event.pageX - smp.left) || 0, dy = (event.pageY - smp.top) || 0, trigger = this._change[a]; this._updatePrevProperties(); if (!trigger) { return false; }
            data = trigger.apply(this, [event, dx, dy]); this._updateVirtualBoundaries(event.shiftKey); if (this._aspectRatio || event.shiftKey) { data = this._updateRatio(data, event); }
            data = this._respectSize(data, event); this._updateCache(data); this._propagate("resize", event); props = this._applyChanges(); if (!this._helper && this._proportionallyResizeElements.length) { this._proportionallyResize(); }
            if (!$.isEmptyObject(props)) { this._updatePrevProperties(); this._trigger("resize", event, this.ui()); this._applyChanges(); }
            return false;
        }, _mouseStop: function (event) {
            this.resizing = false; var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this; if (this._helper) {
                pr = this._proportionallyResizeElements; ista = pr.length && (/textarea/i).test(pr[0].nodeName); soffseth = ista && this._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height; soffsetw = ista ? 0 : that.sizeDiff.width; s = { width: (that.helper.width() - soffsetw), height: (that.helper.height() - soffseth) }; left = (parseFloat(that.element.css("left")) +
                    (that.position.left - that.originalPosition.left)) || null; top = (parseFloat(that.element.css("top")) +
                        (that.position.top - that.originalPosition.top)) || null; if (!o.animate) { this.element.css($.extend(s, { top: top, left: left })); }
                that.helper.height(that.size.height); that.helper.width(that.size.width); if (this._helper && !o.animate) { this._proportionallyResize(); }
            }
            $("body").css("cursor", "auto"); this._removeClass("ui-resizable-resizing"); this._propagate("stop", event); if (this._helper) { this.helper.remove(); }
            return false;
        }, _updatePrevProperties: function () { this.prevPosition = { top: this.position.top, left: this.position.left }; this.prevSize = { width: this.size.width, height: this.size.height }; }, _applyChanges: function () {
            var props = {}; if (this.position.top !== this.prevPosition.top) { props.top = this.position.top + "px"; }
            if (this.position.left !== this.prevPosition.left) { props.left = this.position.left + "px"; }
            if (this.size.width !== this.prevSize.width) { props.width = this.size.width + "px"; }
            if (this.size.height !== this.prevSize.height) { props.height = this.size.height + "px"; }
            this.helper.css(props); return props;
        }, _updateVirtualBoundaries: function (forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options; b = { minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0, maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity, minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0, maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity }; if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio; pMinHeight = b.minWidth / this.aspectRatio; pMaxWidth = b.maxHeight * this.aspectRatio; pMaxHeight = b.maxWidth / this.aspectRatio; if (pMinWidth > b.minWidth) { b.minWidth = pMinWidth; }
                if (pMinHeight > b.minHeight) { b.minHeight = pMinHeight; }
                if (pMaxWidth < b.maxWidth) { b.maxWidth = pMaxWidth; }
                if (pMaxHeight < b.maxHeight) { b.maxHeight = pMaxHeight; }
            }
            this._vBoundaries = b;
        }, _updateCache: function (data) {
            this.offset = this.helper.offset(); if (this._isNumber(data.left)) { this.position.left = data.left; }
            if (this._isNumber(data.top)) { this.position.top = data.top; }
            if (this._isNumber(data.height)) { this.size.height = data.height; }
            if (this._isNumber(data.width)) { this.size.width = data.width; }
        }, _updateRatio: function (data) {
            var cpos = this.position, csize = this.size, a = this.axis; if (this._isNumber(data.height)) { data.width = (data.height * this.aspectRatio); } else if (this._isNumber(data.width)) { data.height = (data.width / this.aspectRatio); }
            if (a === "sw") { data.left = cpos.left + (csize.width - data.width); data.top = null; }
            if (a === "nw") { data.top = cpos.top + (csize.height - data.height); data.left = cpos.left + (csize.width - data.width); }
            return data;
        }, _respectSize: function (data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = this._isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height), isminw = this._isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = this._isNumber(data.height) && o.minHeight && (o.minHeight > data.height), dw = this.originalPosition.left + this.originalSize.width, dh = this.originalPosition.top + this.originalSize.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a); if (isminw) { data.width = o.minWidth; }
            if (isminh) { data.height = o.minHeight; }
            if (ismaxw) { data.width = o.maxWidth; }
            if (ismaxh) { data.height = o.maxHeight; }
            if (isminw && cw) { data.left = dw - o.minWidth; }
            if (ismaxw && cw) { data.left = dw - o.maxWidth; }
            if (isminh && ch) { data.top = dh - o.minHeight; }
            if (ismaxh && ch) { data.top = dh - o.maxHeight; }
            if (!data.width && !data.height && !data.left && data.top) { data.top = null; } else if (!data.width && !data.height && !data.top && data.left) { data.left = null; }
            return data;
        }, _getPaddingPlusBorderDimensions: function (element) {
            var i = 0, widths = [], borders = [element.css("borderTopWidth"), element.css("borderRightWidth"), element.css("borderBottomWidth"), element.css("borderLeftWidth")], paddings = [element.css("paddingTop"), element.css("paddingRight"), element.css("paddingBottom"), element.css("paddingLeft")]; for (; i < 4; i++) { widths[i] = (parseFloat(borders[i]) || 0); widths[i] += (parseFloat(paddings[i]) || 0); }
            return { height: widths[0] + widths[2], width: widths[1] + widths[3] };
        }, _proportionallyResize: function () {
            if (!this._proportionallyResizeElements.length) { return; }
            var prel, i = 0, element = this.helper || this.element; for (; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i]; if (!this.outerDimensions) { this.outerDimensions = this._getPaddingPlusBorderDimensions(prel); }
                prel.css({ height: (element.height() - this.outerDimensions.height) || 0, width: (element.width() - this.outerDimensions.width) || 0 });
            }
        }, _renderProxy: function () { var el = this.element, o = this.options; this.elementOffset = el.offset(); if (this._helper) { this.helper = this.helper || $("<div style='overflow:hidden;'></div>"); this._addClass(this.helper, this._helper); this.helper.css({ width: this.element.outerWidth(), height: this.element.outerHeight(), position: "absolute", left: this.elementOffset.left + "px", top: this.elementOffset.top + "px", zIndex: ++o.zIndex }); this.helper.appendTo("body").disableSelection(); } else { this.helper = this.element; } }, _change: { e: function (event, dx) { return { width: this.originalSize.width + dx }; }, w: function (event, dx) { var cs = this.originalSize, sp = this.originalPosition; return { left: sp.left + dx, width: cs.width - dx }; }, n: function (event, dx, dy) { var cs = this.originalSize, sp = this.originalPosition; return { top: sp.top + dy, height: cs.height - dy }; }, s: function (event, dx, dy) { return { height: this.originalSize.height + dy }; }, se: function (event, dx, dy) { return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy])); }, sw: function (event, dx, dy) { return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy])); }, ne: function (event, dx, dy) { return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy])); }, nw: function (event, dx, dy) { return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy])); } }, _propagate: function (n, event) { $.ui.plugin.call(this, n, [event, this.ui()]); (n !== "resize" && this._trigger(n, event, this.ui())); }, plugins: {}, ui: function () { return { originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition }; }
    }); $.ui.plugin.add("resizable", "animate", {
        stop: function (event) {
            var that = $(this).resizable("instance"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && (/textarea/i).test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) }, left = (parseFloat(that.element.css("left")) +
                (that.position.left - that.originalPosition.left)) || null, top = (parseFloat(that.element.css("top")) +
                    (that.position.top - that.originalPosition.top)) || null; that.element.animate($.extend(style, top && left ? { top: top, left: left } : {}), {
                        duration: o.animateDuration, easing: o.animateEasing, step: function () {
                            var data = { width: parseFloat(that.element.css("width")), height: parseFloat(that.element.css("height")), top: parseFloat(that.element.css("top")), left: parseFloat(that.element.css("left")) }; if (pr && pr.length) { $(pr[0]).css({ width: data.width, height: data.height }); }
                            that._updateCache(data); that._propagate("resize", event);
                        }
                    });
        }
    }); $.ui.plugin.add("resizable", "containment", {
        start: function () {
            var element, p, co, ch, cw, width, height, that = $(this).resizable("instance"), o = that.options, el = that.element, oc = o.containment, ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc; if (!ce) { return; }
            that.containerElement = $(ce); if (/document/.test(oc) || oc === document) { that.containerOffset = { left: 0, top: 0 }; that.containerPosition = { left: 0, top: 0 }; that.parentData = { element: $(document), left: 0, top: 0, width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight }; } else { element = $(ce); p = []; $(["Top", "Right", "Left", "Bottom"]).each(function (i, name) { p[i] = that._num(element.css("padding" + name)); }); that.containerOffset = element.offset(); that.containerPosition = element.position(); that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) }; co = that.containerOffset; ch = that.containerSize.height; cw = that.containerSize.width; width = (that._hasScroll(ce, "left") ? ce.scrollWidth : cw); height = (that._hasScroll(ce) ? ce.scrollHeight : ch); that.parentData = { element: ce, left: co.left, top: co.top, width: width, height: height }; }
        }, resize: function (event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = { top: 0, left: 0 }, ce = that.containerElement, continueResize = true; if (ce[0] !== document && (/static/).test(ce.css("position"))) { cop = co; }
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width +
                    (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left)); if (pRatio) { that.size.height = that.size.width / that.aspectRatio; continueResize = false; }
                that.position.left = o.helper ? co.left : 0;
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height +
                    (that._helper ? (that.position.top - co.top) : that.position.top); if (pRatio) { that.size.width = that.size.height * that.aspectRatio; continueResize = false; }
                that.position.top = that._helper ? co.top : 0;
            }
            isParent = that.containerElement.get(0) === that.element.parent().get(0); isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position")); if (isParent && isOffsetRelative) { that.offset.left = that.parentData.left + that.position.left; that.offset.top = that.parentData.top + that.position.top; } else { that.offset.left = that.element.offset().left; that.offset.top = that.element.offset().top; }
            woset = Math.abs(that.sizeDiff.width +
                (that._helper ? that.offset.left - cop.left : (that.offset.left - co.left))); hoset = Math.abs(that.sizeDiff.height +
                    (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top))); if (woset + that.size.width >= that.parentData.width) { that.size.width = that.parentData.width - woset; if (pRatio) { that.size.height = that.size.width / that.aspectRatio; continueResize = false; } }
            if (hoset + that.size.height >= that.parentData.height) { that.size.height = that.parentData.height - hoset; if (pRatio) { that.size.width = that.size.height * that.aspectRatio; continueResize = false; } }
            if (!continueResize) { that.position.left = that.prevPosition.left; that.position.top = that.prevPosition.top; that.size.width = that.prevSize.width; that.size.height = that.prevSize.height; }
        }, stop: function () {
            var that = $(this).resizable("instance"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height; if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) { $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h }); }
            if (that._helper && !o.animate && (/static/).test(ce.css("position"))) { $(this).css({ left: ho.left - cop.left - co.left, width: w, height: h }); }
        }
    }); $.ui.plugin.add("resizable", "alsoResize", { start: function () { var that = $(this).resizable("instance"), o = that.options; $(o.alsoResize).each(function () { var el = $(this); el.data("ui-resizable-alsoresize", { width: parseFloat(el.width()), height: parseFloat(el.height()), left: parseFloat(el.css("left")), top: parseFloat(el.css("top")) }); }); }, resize: function (event, ui) { var that = $(this).resizable("instance"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = { height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0, top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0 }; $(o.alsoResize).each(function () { var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"]; $.each(css, function (i, prop) { var sum = (start[prop] || 0) + (delta[prop] || 0); if (sum && sum >= 0) { style[prop] = sum || null; } }); el.css(style); }); }, stop: function () { $(this).removeData("ui-resizable-alsoresize"); } }); $.ui.plugin.add("resizable", "ghost", {
        start: function () {
            var that = $(this).resizable("instance"), cs = that.size; that.ghost = that.originalElement.clone(); that.ghost.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 }); that._addClass(that.ghost, "ui-resizable-ghost"); if ($.uiBackCompat !== false && typeof that.options.ghost === "string") { that.ghost.addClass(this.options.ghost); }
            that.ghost.appendTo(that.helper);
        }, resize: function () { var that = $(this).resizable("instance"); if (that.ghost) { that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width }); } }, stop: function () { var that = $(this).resizable("instance"); if (that.ghost && that.helper) { that.helper.get(0).removeChild(that.ghost.get(0)); } }
    }); $.ui.plugin.add("resizable", "grid", {
        resize: function () {
            var outerDimensions, that = $(this).resizable("instance"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid, gridX = (grid[0] || 1), gridY = (grid[1] || 1), ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && (o.maxWidth < newWidth), isMaxHeight = o.maxHeight && (o.maxHeight < newHeight), isMinWidth = o.minWidth && (o.minWidth > newWidth), isMinHeight = o.minHeight && (o.minHeight > newHeight); o.grid = grid; if (isMinWidth) { newWidth += gridX; }
            if (isMinHeight) { newHeight += gridY; }
            if (isMaxWidth) { newWidth -= gridX; }
            if (isMaxHeight) { newHeight -= gridY; }
            if (/^(se|s|e)$/.test(a)) { that.size.width = newWidth; that.size.height = newHeight; } else if (/^(ne)$/.test(a)) { that.size.width = newWidth; that.size.height = newHeight; that.position.top = op.top - oy; } else if (/^(sw)$/.test(a)) { that.size.width = newWidth; that.size.height = newHeight; that.position.left = op.left - ox; } else {
                if (newHeight - gridY <= 0 || newWidth - gridX <= 0) { outerDimensions = that._getPaddingPlusBorderDimensions(this); }
                if (newHeight - gridY > 0) { that.size.height = newHeight; that.position.top = op.top - oy; } else { newHeight = gridY - outerDimensions.height; that.size.height = newHeight; that.position.top = op.top + os.height - newHeight; }
                if (newWidth - gridX > 0) { that.size.width = newWidth; that.position.left = op.left - ox; } else { newWidth = gridX - outerDimensions.width; that.size.width = newWidth; that.position.left = op.left + os.width - newWidth; }
            }
        }
    }); var widgetsResizable = $.ui.resizable;/*!
 * jQuery UI Selectable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsSelectable = $.widget("ui.selectable", $.ui.mouse, {
        version: "1.12.1", options: { appendTo: "body", autoRefresh: true, distance: 0, filter: "*", tolerance: "touch", selected: null, selecting: null, start: null, stop: null, unselected: null, unselecting: null }, _create: function () { var that = this; this._addClass("ui-selectable"); this.dragged = false; this.refresh = function () { that.elementPos = $(that.element[0]).offset(); that.selectees = $(that.options.filter, that.element[0]); that._addClass(that.selectees, "ui-selectee"); that.selectees.each(function () { var $this = $(this), selecteeOffset = $this.offset(), pos = { left: selecteeOffset.left - that.elementPos.left, top: selecteeOffset.top - that.elementPos.top }; $.data(this, "selectable-item", { element: this, $element: $this, left: pos.left, top: pos.top, right: pos.left + $this.outerWidth(), bottom: pos.top + $this.outerHeight(), startselected: false, selected: $this.hasClass("ui-selected"), selecting: $this.hasClass("ui-selecting"), unselecting: $this.hasClass("ui-unselecting") }); }); }; this.refresh(); this._mouseInit(); this.helper = $("<div>"); this._addClass(this.helper, "ui-selectable-helper"); }, _destroy: function () { this.selectees.removeData("selectable-item"); this._mouseDestroy(); }, _mouseStart: function (event) {
            var that = this, options = this.options; this.opos = [event.pageX, event.pageY]; this.elementPos = $(this.element[0]).offset(); if (this.options.disabled) { return; }
            this.selectees = $(options.filter, this.element[0]); this._trigger("start", event); $(options.appendTo).append(this.helper); this.helper.css({ "left": event.pageX, "top": event.pageY, "width": 0, "height": 0 }); if (options.autoRefresh) { this.refresh(); }
            this.selectees.filter(".ui-selected").each(function () { var selectee = $.data(this, "selectable-item"); selectee.startselected = true; if (!event.metaKey && !event.ctrlKey) { that._removeClass(selectee.$element, "ui-selected"); selectee.selected = false; that._addClass(selectee.$element, "ui-unselecting"); selectee.unselecting = true; that._trigger("unselecting", event, { unselecting: selectee.element }); } }); $(event.target).parents().addBack().each(function () {
                var doSelect, selectee = $.data(this, "selectable-item"); if (selectee) {
                    doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected"); that._removeClass(selectee.$element, doSelect ? "ui-unselecting" : "ui-selected")._addClass(selectee.$element, doSelect ? "ui-selecting" : "ui-unselecting"); selectee.unselecting = !doSelect; selectee.selecting = doSelect; selectee.selected = doSelect; if (doSelect) { that._trigger("selecting", event, { selecting: selectee.element }); } else { that._trigger("unselecting", event, { unselecting: selectee.element }); }
                    return false;
                }
            });
        }, _mouseDrag: function (event) {
            this.dragged = true; if (this.options.disabled) { return; }
            var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY; if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
            if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
            this.helper.css({ left: x1, top: y1, width: x2 - x1, height: y2 - y1 }); this.selectees.each(function () {
                var selectee = $.data(this, "selectable-item"), hit = false, offset = {}; if (!selectee || selectee.element === that.element[0]) { return; }
                offset.left = selectee.left + that.elementPos.left; offset.right = selectee.right + that.elementPos.left; offset.top = selectee.top + that.elementPos.top; offset.bottom = selectee.bottom + that.elementPos.top; if (options.tolerance === "touch") { hit = (!(offset.left > x2 || offset.right < x1 || offset.top > y2 || offset.bottom < y1)); } else if (options.tolerance === "fit") { hit = (offset.left > x1 && offset.right < x2 && offset.top > y1 && offset.bottom < y2); }
                if (hit) {
                    if (selectee.selected) { that._removeClass(selectee.$element, "ui-selected"); selectee.selected = false; }
                    if (selectee.unselecting) { that._removeClass(selectee.$element, "ui-unselecting"); selectee.unselecting = false; }
                    if (!selectee.selecting) { that._addClass(selectee.$element, "ui-selecting"); selectee.selecting = true; that._trigger("selecting", event, { selecting: selectee.element }); }
                } else {
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) { that._removeClass(selectee.$element, "ui-selecting"); selectee.selecting = false; that._addClass(selectee.$element, "ui-selected"); selectee.selected = true; } else {
                            that._removeClass(selectee.$element, "ui-selecting"); selectee.selecting = false; if (selectee.startselected) { that._addClass(selectee.$element, "ui-unselecting"); selectee.unselecting = true; }
                            that._trigger("unselecting", event, { unselecting: selectee.element });
                        }
                    }
                    if (selectee.selected) { if (!event.metaKey && !event.ctrlKey && !selectee.startselected) { that._removeClass(selectee.$element, "ui-selected"); selectee.selected = false; that._addClass(selectee.$element, "ui-unselecting"); selectee.unselecting = true; that._trigger("unselecting", event, { unselecting: selectee.element }); } }
                }
            }); return false;
        }, _mouseStop: function (event) { var that = this; this.dragged = false; $(".ui-unselecting", this.element[0]).each(function () { var selectee = $.data(this, "selectable-item"); that._removeClass(selectee.$element, "ui-unselecting"); selectee.unselecting = false; selectee.startselected = false; that._trigger("unselected", event, { unselected: selectee.element }); }); $(".ui-selecting", this.element[0]).each(function () { var selectee = $.data(this, "selectable-item"); that._removeClass(selectee.$element, "ui-selecting")._addClass(selectee.$element, "ui-selected"); selectee.selecting = false; selectee.selected = true; selectee.startselected = true; that._trigger("selected", event, { selected: selectee.element }); }); this._trigger("stop", event); this.helper.remove(); return false; }
    });/*!
 * jQuery UI Sortable 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsSortable = $.widget("ui.sortable", $.ui.mouse, {
        version: "1.12.1", widgetEventPrefix: "sort", ready: false, options: { appendTo: "parent", axis: false, connectWith: false, containment: false, cursor: "auto", cursorAt: false, dropOnEmpty: true, forcePlaceholderSize: false, forceHelperSize: false, grid: false, handle: false, helper: "original", items: "> *", opacity: false, placeholder: false, revert: false, scroll: true, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1000, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null }, _isOverAxis: function (x, reference, size) { return (x >= reference) && (x < (reference + size)); }, _isFloating: function (item) { return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display")); }, _create: function () { this.containerCache = {}; this._addClass("ui-sortable"); this.refresh(); this.offset = this.element.offset(); this._mouseInit(); this._setHandleClassName(); this.ready = true; }, _setOption: function (key, value) { this._super(key, value); if (key === "handle") { this._setHandleClassName(); } }, _setHandleClassName: function () { var that = this; this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"); $.each(this.items, function () { that._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle"); }); }, _destroy: function () {
            this._mouseDestroy(); for (var i = this.items.length - 1; i >= 0; i--) { this.items[i].item.removeData(this.widgetName + "-item"); }
            return this;
        }, _mouseCapture: function (event, overrideHandle) {
            var currentItem = null, validHandle = false, that = this; if (this.reverting) { return false; }
            if (this.options.disabled || this.options.type === "static") { return false; }
            this._refreshItems(event); $(event.target).parents().each(function () { if ($.data(this, that.widgetName + "-item") === that) { currentItem = $(this); return false; } }); if ($.data(event.target, that.widgetName + "-item") === that) { currentItem = $(event.target); }
            if (!currentItem) { return false; }
            if (this.options.handle && !overrideHandle) { $(this.options.handle, currentItem).find("*").addBack().each(function () { if (this === event.target) { validHandle = true; } }); if (!validHandle) { return false; } }
            this.currentItem = currentItem; this._removeCurrentsFromItems(); return true;
        }, _mouseStart: function (event, overrideHandle, noActivation) {
            var i, body, o = this.options; this.currentContainer = this; this.refreshPositions(); this.helper = this._createHelper(event); this._cacheHelperProportions(); this._cacheMargins(); this.scrollParent = this.helper.scrollParent(); this.offset = this.currentItem.offset(); this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }; $.extend(this.offset, { click: { left: event.pageX - this.offset.left, top: event.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }); this.helper.css("position", "absolute"); this.cssPosition = this.helper.css("position"); this.originalPosition = this._generatePosition(event); this.originalPageX = event.pageX; this.originalPageY = event.pageY; (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt)); this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }; if (this.helper[0] !== this.currentItem[0]) { this.currentItem.hide(); }
            this._createPlaceholder(); if (o.containment) { this._setContainment(); }
            if (o.cursor && o.cursor !== "auto") { body = this.document.find("body"); this.storedCursor = body.css("cursor"); body.css("cursor", o.cursor); this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body); }
            if (o.opacity) {
                if (this.helper.css("opacity")) { this._storedOpacity = this.helper.css("opacity"); }
                this.helper.css("opacity", o.opacity);
            }
            if (o.zIndex) {
                if (this.helper.css("zIndex")) { this._storedZIndex = this.helper.css("zIndex"); }
                this.helper.css("zIndex", o.zIndex);
            }
            if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") { this.overflowOffset = this.scrollParent.offset(); }
            this._trigger("start", event, this._uiHash()); if (!this._preserveHelperProportions) { this._cacheHelperProportions(); }
            if (!noActivation) { for (i = this.containers.length - 1; i >= 0; i--) { this.containers[i]._trigger("activate", event, this._uiHash(this)); } }
            if ($.ui.ddmanager) { $.ui.ddmanager.current = this; }
            if ($.ui.ddmanager && !o.dropBehaviour) { $.ui.ddmanager.prepareOffsets(this, event); }
            this.dragging = true; this._addClass(this.helper, "ui-sortable-helper"); this._mouseDrag(event); return true;
        }, _mouseDrag: function (event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = false; this.position = this._generatePosition(event); this.positionAbs = this._convertPositionTo("absolute"); if (!this.lastPositionAbs) { this.lastPositionAbs = this.positionAbs; }
            if (this.options.scroll) {
                if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== "HTML") {
                    if ((this.overflowOffset.top + this.scrollParent[0].offsetHeight) -
                        event.pageY < o.scrollSensitivity) { this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed; } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) { this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed; }
                    if ((this.overflowOffset.left + this.scrollParent[0].offsetWidth) -
                        event.pageX < o.scrollSensitivity) { this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed; } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) { this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed; }
                } else {
                    if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) { scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed); } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) { scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed); }
                    if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) { scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed); } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) { scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed); }
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) { $.ui.ddmanager.prepareOffsets(this, event); }
            }
            this.positionAbs = this._convertPositionTo("absolute"); if (!this.options.axis || this.options.axis !== "y") { this.helper[0].style.left = this.position.left + "px"; }
            if (!this.options.axis || this.options.axis !== "x") { this.helper[0].style.top = this.position.top + "px"; }
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i]; itemElement = item.item[0]; intersection = this._intersectsWithPointer(item); if (!intersection) { continue; }
                if (item.instance !== this.currentContainer) { continue; }
                if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = intersection === 1 ? "down" : "up"; if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) { this._rearrange(event, item); } else { break; }
                    this._trigger("change", event, this._uiHash()); break;
                }
            }
            this._contactContainers(event); if ($.ui.ddmanager) { $.ui.ddmanager.drag(this, event); }
            this._trigger("sort", event, this._uiHash()); this.lastPositionAbs = this.positionAbs; return false;
        }, _mouseStop: function (event, noPropagation) {
            if (!event) { return; }
            if ($.ui.ddmanager && !this.options.dropBehaviour) { $.ui.ddmanager.drop(this, event); }
            if (this.options.revert) {
                var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {}; if (!axis || axis === "x") {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left +
                        (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
                }
                if (!axis || axis === "y") {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top +
                        (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
                }
                this.reverting = true; $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () { that._clear(event); });
            } else { this._clear(event, noPropagation); }
            return false;
        }, cancel: function () {
            if (this.dragging) {
                this._mouseUp(new $.Event("mouseup", { target: null })); if (this.options.helper === "original") { this.currentItem.css(this._storedCSS); this._removeClass(this.currentItem, "ui-sortable-helper"); } else { this.currentItem.show(); }
                for (var i = this.containers.length - 1; i >= 0; i--) { this.containers[i]._trigger("deactivate", null, this._uiHash(this)); if (this.containers[i].containerCache.over) { this.containers[i]._trigger("out", null, this._uiHash(this)); this.containers[i].containerCache.over = 0; } }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) { this.placeholder[0].parentNode.removeChild(this.placeholder[0]); }
                if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) { this.helper.remove(); }
                $.extend(this, { helper: null, dragging: false, reverting: false, _noFinalSort: null }); if (this.domPosition.prev) { $(this.domPosition.prev).after(this.currentItem); } else { $(this.domPosition.parent).prepend(this.currentItem); }
            }
            return this;
        }, serialize: function (o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = []; o = o || {}; $(items).each(function () { var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/)); if (res) { str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2])); } }); if (!str.length && o.key) { str.push(o.key + "="); }
            return str.join("&");
        }, toArray: function (o) { var items = this._getItemsAsjQuery(o && o.connected), ret = []; o = o || {}; items.each(function () { ret.push($(o.item || this).attr(o.attribute || "id") || ""); }); return ret; }, _intersectsWith: function (item) { var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = (this.options.axis === "x") || ((y1 + dyClick) > t && (y1 + dyClick) < b), isOverElementWidth = (this.options.axis === "y") || ((x1 + dxClick) > l && (x1 + dxClick) < r), isOverElement = isOverElementHeight && isOverElementWidth; if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || (this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])) { return isOverElement; } else { return (l < x1 + (this.helperProportions.width / 2) && x2 - (this.helperProportions.width / 2) < r && t < y1 + (this.helperProportions.height / 2) && y2 - (this.helperProportions.height / 2) < b); } }, _intersectsWithPointer: function (item) {
            var verticalDirection, horizontalDirection, isOverElementHeight = (this.options.axis === "x") || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = (this.options.axis === "y") || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth; if (!isOverElement) { return false; }
            verticalDirection = this._getDragVerticalDirection(); horizontalDirection = this._getDragHorizontalDirection(); return this.floating ? ((horizontalDirection === "right" || verticalDirection === "down") ? 2 : 1) : (verticalDirection && (verticalDirection === "down" ? 2 : 1));
        }, _intersectsWithSides: function (item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top +
                this.offset.click.top, item.top + (item.height / 2), item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left +
                    this.offset.click.left, item.left + (item.width / 2), item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection(); if (this.floating && horizontalDirection) { return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf)); } else { return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf)); }
        }, _getDragVerticalDirection: function () { var delta = this.positionAbs.top - this.lastPositionAbs.top; return delta !== 0 && (delta > 0 ? "down" : "up"); }, _getDragHorizontalDirection: function () { var delta = this.positionAbs.left - this.lastPositionAbs.left; return delta !== 0 && (delta > 0 ? "right" : "left"); }, refresh: function (event) { this._refreshItems(event); this._setHandleClassName(); this.refreshPositions(); return this; }, _connectWith: function () { var options = this.options; return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith; }, _getItemsAsjQuery: function (connected) {
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith(); if (connectWith && connected) { for (i = connectWith.length - 1; i >= 0; i--) { cur = $(connectWith[i], this.document[0]); for (j = cur.length - 1; j >= 0; j--) { inst = $.data(cur[j], this.widgetFullName); if (inst && inst !== this && !inst.options.disabled) { queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]); } } } }
            queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]); function addItems() { items.push(this); }
            for (i = queries.length - 1; i >= 0; i--) { queries[i][0].each(addItems); }
            return $(items);
        }, _removeCurrentsFromItems: function () {
            var list = this.currentItem.find(":data(" + this.widgetName + "-item)"); this.items = $.grep(this.items, function (item) {
                for (var j = 0; j < list.length; j++) { if (list[j] === item.item[0]) { return false; } }
                return true;
            });
        }, _refreshItems: function (event) {
            this.items = []; this.containers = [this]; var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]], connectWith = this._connectWith(); if (connectWith && this.ready) { for (i = connectWith.length - 1; i >= 0; i--) { cur = $(connectWith[i], this.document[0]); for (j = cur.length - 1; j >= 0; j--) { inst = $.data(cur[j], this.widgetFullName); if (inst && inst !== this && !inst.options.disabled) { queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]); this.containers.push(inst); } } } }
            for (i = queries.length - 1; i >= 0; i--) { targetData = queries[i][1]; _queries = queries[i][0]; for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) { item = $(_queries[j]); item.data(this.widgetName + "-item", targetData); items.push({ item: item, instance: targetData, width: 0, height: 0, left: 0, top: 0 }); } }
        }, refreshPositions: function (fast) {
            this.floating = this.items.length ? this.options.axis === "x" || this._isFloating(this.items[0].item) : false; if (this.offsetParent && this.helper) { this.offset.parent = this._getParentOffset(); }
            var i, item, t, p; for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i]; if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) { continue; }
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item; if (!fast) { item.width = t.outerWidth(); item.height = t.outerHeight(); }
                p = t.offset(); item.left = p.left; item.top = p.top;
            }
            if (this.options.custom && this.options.custom.refreshContainers) { this.options.custom.refreshContainers.call(this); } else { for (i = this.containers.length - 1; i >= 0; i--) { p = this.containers[i].element.offset(); this.containers[i].containerCache.left = p.left; this.containers[i].containerCache.top = p.top; this.containers[i].containerCache.width = this.containers[i].element.outerWidth(); this.containers[i].containerCache.height = this.containers[i].element.outerHeight(); } }
            return this;
        }, _createPlaceholder: function (that) {
            that = that || this; var className, o = that.options; if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder; o.placeholder = {
                    element: function () {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $("<" + nodeName + ">", that.document[0]); that._addClass(element, "ui-sortable-placeholder", className || that.currentItem[0].className)._removeClass(element, "ui-sortable-helper"); if (nodeName === "tbody") { that._createTrPlaceholder(that.currentItem.find("tr").eq(0), $("<tr>", that.document[0]).appendTo(element)); } else if (nodeName === "tr") { that._createTrPlaceholder(that.currentItem, element); } else if (nodeName === "img") { element.attr("src", that.currentItem.attr("src")); }
                        if (!className) { element.css("visibility", "hidden"); }
                        return element;
                    }, update: function (container, p) {
                        if (className && !o.forcePlaceholderSize) { return; }
                        if (!p.height()) {
                            p.height(that.currentItem.innerHeight() -
                                parseInt(that.currentItem.css("paddingTop") || 0, 10) -
                                parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                        }
                        if (!p.width()) {
                            p.width(that.currentItem.innerWidth() -
                                parseInt(that.currentItem.css("paddingLeft") || 0, 10) -
                                parseInt(that.currentItem.css("paddingRight") || 0, 10));
                        }
                    }
                };
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem)); that.currentItem.after(that.placeholder); o.placeholder.update(that, that.placeholder);
        }, _createTrPlaceholder: function (sourceTr, targetTr) { var that = this; sourceTr.children().each(function () { $("<td>&#160;</td>", that.document[0]).attr("colspan", $(this).attr("colspan") || 1).appendTo(targetTr); }); }, _contactContainers: function (event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null; for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) { continue; }
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) { continue; }
                    innermostContainer = this.containers[i]; innermostIndex = i;
                } else { if (this.containers[i].containerCache.over) { this.containers[i]._trigger("out", event, this._uiHash(this)); this.containers[i].containerCache.over = 0; } }
            }
            if (!innermostContainer) { return; }
            if (this.containers.length === 1) { if (!this.containers[innermostIndex].containerCache.over) { this.containers[innermostIndex]._trigger("over", event, this._uiHash(this)); this.containers[innermostIndex].containerCache.over = 1; } } else {
                dist = 10000; itemWithLeastDistance = null; floating = innermostContainer.floating || this._isFloating(this.currentItem); posProperty = floating ? "left" : "top"; sizeProperty = floating ? "width" : "height"; axis = floating ? "pageX" : "pageY"; for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) { continue; }
                    if (this.items[j].item[0] === this.currentItem[0]) { continue; }
                    cur = this.items[j].item.offset()[posProperty]; nearBottom = false; if (event[axis] - cur > this.items[j][sizeProperty] / 2) { nearBottom = true; }
                    if (Math.abs(event[axis] - cur) < dist) { dist = Math.abs(event[axis] - cur); itemWithLeastDistance = this.items[j]; this.direction = nearBottom ? "up" : "down"; }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) { return; }
                if (this.currentContainer === this.containers[innermostIndex]) {
                    if (!this.currentContainer.containerCache.over) { this.containers[innermostIndex]._trigger("over", event, this._uiHash()); this.currentContainer.containerCache.over = 1; }
                    return;
                }
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true); this._trigger("change", event, this._uiHash()); this.containers[innermostIndex]._trigger("change", event, this._uiHash(this)); this.currentContainer = this.containers[innermostIndex]; this.options.placeholder.update(this.currentContainer, this.placeholder); this.containers[innermostIndex]._trigger("over", event, this._uiHash(this)); this.containers[innermostIndex].containerCache.over = 1;
            }
        }, _createHelper: function (event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem); if (!helper.parents("body").length) { $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]); }
            if (helper[0] === this.currentItem[0]) { this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }; }
            if (!helper[0].style.width || o.forceHelperSize) { helper.width(this.currentItem.width()); }
            if (!helper[0].style.height || o.forceHelperSize) { helper.height(this.currentItem.height()); }
            return helper;
        }, _adjustOffsetFromHelper: function (obj) {
            if (typeof obj === "string") { obj = obj.split(" "); }
            if ($.isArray(obj)) { obj = { left: +obj[0], top: +obj[1] || 0 }; }
            if ("left" in obj) { this.offset.click.left = obj.left + this.margins.left; }
            if ("right" in obj) { this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left; }
            if ("top" in obj) { this.offset.click.top = obj.top + this.margins.top; }
            if ("bottom" in obj) { this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top; }
        }, _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent(); var po = this.offsetParent.offset(); if (this.cssPosition === "absolute" && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) { po.left += this.scrollParent.scrollLeft(); po.top += this.scrollParent.scrollTop(); }
            if (this.offsetParent[0] === this.document[0].body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) { po = { top: 0, left: 0 }; }
            return { top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
        }, _getRelativeOffset: function () {
            if (this.cssPosition === "relative") {
                var p = this.currentItem.position(); return {
                    top: p.top - (parseInt(this.helper.css("top"), 10) || 0) +
                        this.scrollParent.scrollTop(), left: p.left - (parseInt(this.helper.css("left"), 10) || 0) +
                            this.scrollParent.scrollLeft()
                };
            } else { return { top: 0, left: 0 }; }
        }, _cacheMargins: function () { this.margins = { left: (parseInt(this.currentItem.css("marginLeft"), 10) || 0), top: (parseInt(this.currentItem.css("marginTop"), 10) || 0) }; }, _cacheHelperProportions: function () { this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() }; }, _setContainment: function () {
            var ce, co, over, o = this.options; if (o.containment === "parent") { o.containment = this.helper[0].parentNode; }
            if (o.containment === "document" || o.containment === "window") { this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, o.containment === "document" ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, (o.containment === "document" ? (this.document.height() || document.body.parentNode.scrollHeight) : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]; }
            if (!(/^(document|window|parent)$/).test(o.containment)) {
                ce = $(o.containment)[0]; co = $(o.containment).offset(); over = ($(ce).css("overflow") !== "hidden"); this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) +
                    (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) +
                    (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) -
                    (parseInt($(ce).css("borderLeftWidth"), 10) || 0) -
                    (parseInt($(ce).css("paddingRight"), 10) || 0) -
                    this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) -
                    (parseInt($(ce).css("borderTopWidth"), 10) || 0) -
                    (parseInt($(ce).css("paddingBottom"), 10) || 0) -
                    this.helperProportions.height - this.margins.top];
            }
        }, _convertPositionTo: function (d, pos) {
            if (!pos) { pos = this.position; }
            var mod = d === "absolute" ? 1 : -1, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName); return {
                top: (pos.top +
                    this.offset.relative.top * mod +
                    this.offset.parent.top * mod -
                    ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)), left: (pos.left +
                        this.offset.relative.left * mod +
                        this.offset.parent.left * mod -
                        ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))
            };
        }, _generatePosition: function (event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName); if (this.cssPosition === "relative" && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) { this.offset.relative = this._getRelativeOffset(); }
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) { pageX = this.containment[0] + this.offset.click.left; }
                    if (event.pageY - this.offset.click.top < this.containment[1]) { pageY = this.containment[1] + this.offset.click.top; }
                    if (event.pageX - this.offset.click.left > this.containment[2]) { pageX = this.containment[2] + this.offset.click.left; }
                    if (event.pageY - this.offset.click.top > this.containment[3]) { pageY = this.containment[3] + this.offset.click.top; }
                }
                if (o.grid) { top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1]; pageY = this.containment ? ((top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top; left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0]; pageX = this.containment ? ((left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left; }
            }
            return {
                top: (pageY -
                    this.offset.click.top -
                    this.offset.relative.top -
                    this.offset.parent.top +
                    ((this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))), left: (pageX -
                        this.offset.click.left -
                        this.offset.relative.left -
                        this.offset.parent.left +
                        ((this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))
            };
        }, _rearrange: function (event, i, a, hardRefresh) { a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling)); this.counter = this.counter ? ++this.counter : 1; var counter = this.counter; this._delay(function () { if (counter === this.counter) { this.refreshPositions(!hardRefresh); } }); }, _clear: function (event, noPropagation) {
            this.reverting = false; var i, delayedTriggers = []; if (!this._noFinalSort && this.currentItem.parent().length) { this.placeholder.before(this.currentItem); }
            this._noFinalSort = null; if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) { if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") { this._storedCSS[i] = ""; } }
                this.currentItem.css(this._storedCSS); this._removeClass(this.currentItem, "ui-sortable-helper");
            } else { this.currentItem.show(); }
            if (this.fromOutside && !noPropagation) { delayedTriggers.push(function (event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); }); }
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) { delayedTriggers.push(function (event) { this._trigger("update", event, this._uiHash()); }); }
            if (this !== this.currentContainer) { if (!noPropagation) { delayedTriggers.push(function (event) { this._trigger("remove", event, this._uiHash()); }); delayedTriggers.push((function (c) { return function (event) { c._trigger("receive", event, this._uiHash(this)); }; }).call(this, this.currentContainer)); delayedTriggers.push((function (c) { return function (event) { c._trigger("update", event, this._uiHash(this)); }; }).call(this, this.currentContainer)); } }
            function delayEvent(type, instance, container) { return function (event) { container._trigger(type, event, instance._uiHash(instance)); }; }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) { delayedTriggers.push(delayEvent("deactivate", this, this.containers[i])); }
                if (this.containers[i].containerCache.over) { delayedTriggers.push(delayEvent("out", this, this.containers[i])); this.containers[i].containerCache.over = 0; }
            }
            if (this.storedCursor) { this.document.find("body").css("cursor", this.storedCursor); this.storedStylesheet.remove(); }
            if (this._storedOpacity) { this.helper.css("opacity", this._storedOpacity); }
            if (this._storedZIndex) { this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex); }
            this.dragging = false; if (!noPropagation) { this._trigger("beforeStop", event, this._uiHash()); }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]); if (!this.cancelHelperRemoval) {
                if (this.helper[0] !== this.currentItem[0]) { this.helper.remove(); }
                this.helper = null;
            }
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) { delayedTriggers[i].call(this, event); }
                this._trigger("stop", event, this._uiHash());
            }
            this.fromOutside = false; return !this.cancelHelperRemoval;
        }, _trigger: function () { if ($.Widget.prototype._trigger.apply(this, arguments) === false) { this.cancel(); } }, _uiHash: function (_inst) { var inst = _inst || this; return { helper: inst.helper, placeholder: inst.placeholder || $([]), position: inst.position, originalPosition: inst.originalPosition, offset: inst.positionAbs, item: inst.currentItem, sender: _inst ? _inst.element : null }; }
    });/*!
 * jQuery UI Accordion 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsAccordion = $.widget("ui.accordion", {
        version: "1.12.1", options: { active: 0, animate: {}, classes: { "ui-accordion-header": "ui-corner-top", "ui-accordion-header-collapsed": "ui-corner-all", "ui-accordion-content": "ui-corner-bottom" }, collapsible: false, event: "click", header: "> li > :first-child, > :not(li):even", heightStyle: "auto", icons: { activeHeader: "ui-icon-triangle-1-s", header: "ui-icon-triangle-1-e" }, activate: null, beforeActivate: null }, hideProps: { borderTopWidth: "hide", borderBottomWidth: "hide", paddingTop: "hide", paddingBottom: "hide", height: "hide" }, showProps: { borderTopWidth: "show", borderBottomWidth: "show", paddingTop: "show", paddingBottom: "show", height: "show" }, _create: function () {
            var options = this.options; this.prevShow = this.prevHide = $(); this._addClass("ui-accordion", "ui-widget ui-helper-reset"); this.element.attr("role", "tablist"); if (!options.collapsible && (options.active === false || options.active == null)) { options.active = 0; }
            this._processPanels(); if (options.active < 0) { options.active += this.headers.length; }
            this._refresh();
        }, _getCreateEventData: function () { return { header: this.active, panel: !this.active.length ? $() : this.active.next() }; }, _createIcons: function () { var icon, children, icons = this.options.icons; if (icons) { icon = $("<span>"); this._addClass(icon, "ui-accordion-header-icon", "ui-icon " + icons.header); icon.prependTo(this.headers); children = this.active.children(".ui-accordion-header-icon"); this._removeClass(children, icons.header)._addClass(children, null, icons.activeHeader)._addClass(this.headers, "ui-accordion-icons"); } }, _destroyIcons: function () { this._removeClass(this.headers, "ui-accordion-icons"); this.headers.children(".ui-accordion-header-icon").remove(); }, _destroy: function () { var contents; this.element.removeAttr("role"); this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(); this._destroyIcons(); contents = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(); if (this.options.heightStyle !== "content") { contents.css("height", ""); } }, _setOption: function (key, value) {
            if (key === "active") { this._activate(value); return; }
            if (key === "event") {
                if (this.options.event) { this._off(this.headers, this.options.event); }
                this._setupEvents(value);
            }
            this._super(key, value); if (key === "collapsible" && !value && this.options.active === false) { this._activate(0); }
            if (key === "icons") { this._destroyIcons(); if (value) { this._createIcons(); } }
        }, _setOptionDisabled: function (value) { this._super(value); this.element.attr("aria-disabled", value); this._toggleClass(null, "ui-state-disabled", !!value); this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!value); }, _keydown: function (event) {
            if (event.altKey || event.ctrlKey) { return; }
            var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false; switch (event.keyCode) { case keyCode.RIGHT: case keyCode.DOWN: toFocus = this.headers[(currentIndex + 1) % length]; break; case keyCode.LEFT: case keyCode.UP: toFocus = this.headers[(currentIndex - 1 + length) % length]; break; case keyCode.SPACE: case keyCode.ENTER: this._eventHandler(event); break; case keyCode.HOME: toFocus = this.headers[0]; break; case keyCode.END: toFocus = this.headers[length - 1]; break; }
            if (toFocus) { $(event.target).attr("tabIndex", -1); $(toFocus).attr("tabIndex", 0); $(toFocus).trigger("focus"); event.preventDefault(); }
        }, _panelKeyDown: function (event) { if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) { $(event.currentTarget).prev().trigger("focus"); } }, refresh: function () {
            var options = this.options; this._processPanels(); if ((options.active === false && options.collapsible === true) || !this.headers.length) { options.active = false; this.active = $(); } else if (options.active === false) { this._activate(0); } else if (this.active.length && !$.contains(this.element[0], this.active[0])) { if (this.headers.length === this.headers.find(".ui-state-disabled").length) { options.active = false; this.active = $(); } else { this._activate(Math.max(0, options.active - 1)); } } else { options.active = this.headers.index(this.active); }
            this._destroyIcons(); this._refresh();
        }, _processPanels: function () { var prevHeaders = this.headers, prevPanels = this.panels; this.headers = this.element.find(this.options.header); this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"); this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(); this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"); if (prevPanels) { this._off(prevHeaders.not(this.headers)); this._off(prevPanels.not(this.panels)); } }, _refresh: function () {
            var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent(); this.active = this._findActive(options.active); this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"); this._addClass(this.active.next(), "ui-accordion-content-active"); this.active.next().show(); this.headers.attr("role", "tab").each(function () { var header = $(this), headerId = header.uniqueId().attr("id"), panel = header.next(), panelId = panel.uniqueId().attr("id"); header.attr("aria-controls", panelId); panel.attr("aria-labelledby", headerId); }).next().attr("role", "tabpanel"); this.headers.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }).next().attr({ "aria-hidden": "true" }).hide(); if (!this.active.length) { this.headers.eq(0).attr("tabIndex", 0); } else { this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }).next().attr({ "aria-hidden": "false" }); }
            this._createIcons(); this._setupEvents(options.event); if (heightStyle === "fill") {
                maxHeight = parent.height(); this.element.siblings(":visible").each(function () {
                    var elem = $(this), position = elem.css("position"); if (position === "absolute" || position === "fixed") { return; }
                    maxHeight -= elem.outerHeight(true);
                }); this.headers.each(function () { maxHeight -= $(this).outerHeight(true); }); this.headers.next().each(function () {
                    $(this).height(Math.max(0, maxHeight -
                        $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if (heightStyle === "auto") {
                maxHeight = 0; this.headers.next().each(function () {
                    var isVisible = $(this).is(":visible"); if (!isVisible) { $(this).show(); }
                    maxHeight = Math.max(maxHeight, $(this).css("height", "").height()); if (!isVisible) { $(this).hide(); }
                }).height(maxHeight);
            }
        }, _activate: function (index) {
            var active = this._findActive(index)[0]; if (active === this.active[0]) { return; }
            active = active || this.active[0]; this._eventHandler({ target: active, currentTarget: active, preventDefault: $.noop });
        }, _findActive: function (selector) { return typeof selector === "number" ? this.headers.eq(selector) : $(); }, _setupEvents: function (event) {
            var events = { keydown: "_keydown" }; if (event) { $.each(event.split(" "), function (index, eventName) { events[eventName] = "_eventHandler"; }); }
            this._off(this.headers.add(this.headers.next())); this._on(this.headers, events); this._on(this.headers.next(), { keydown: "_panelKeyDown" }); this._hoverable(this.headers); this._focusable(this.headers);
        }, _eventHandler: function (event) {
            var activeChildren, clickedChildren, options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = { oldHeader: active, oldPanel: toHide, newHeader: collapsing ? $() : clicked, newPanel: toShow }; event.preventDefault(); if ((clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) { return; }
            options.active = collapsing ? false : this.headers.index(clicked); this.active = clickedIsActive ? $() : clicked; this._toggle(eventData); this._removeClass(active, "ui-accordion-header-active", "ui-state-active"); if (options.icons) { activeChildren = active.children(".ui-accordion-header-icon"); this._removeClass(activeChildren, null, options.icons.activeHeader)._addClass(activeChildren, null, options.icons.header); }
            if (!clickedIsActive) {
                this._removeClass(clicked, "ui-accordion-header-collapsed")._addClass(clicked, "ui-accordion-header-active", "ui-state-active"); if (options.icons) { clickedChildren = clicked.children(".ui-accordion-header-icon"); this._removeClass(clickedChildren, null, options.icons.header)._addClass(clickedChildren, null, options.icons.activeHeader); }
                this._addClass(clicked.next(), "ui-accordion-content-active");
            }
        }, _toggle: function (data) {
            var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel; this.prevShow.add(this.prevHide).stop(true, true); this.prevShow = toShow; this.prevHide = toHide; if (this.options.animate) { this._animate(toShow, toHide, data); } else { toHide.hide(); toShow.show(); this._toggleComplete(data); }
            toHide.attr({ "aria-hidden": "true" }); toHide.prev().attr({ "aria-selected": "false", "aria-expanded": "false" }); if (toShow.length && toHide.length) { toHide.prev().attr({ "tabIndex": -1, "aria-expanded": "false" }); } else if (toShow.length) { this.headers.filter(function () { return parseInt($(this).attr("tabIndex"), 10) === 0; }).attr("tabIndex", -1); }
            toShow.attr("aria-hidden", "false").prev().attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
        }, _animate: function (toShow, toHide, data) {
            var total, easing, duration, that = this, adjust = 0, boxSizing = toShow.css("box-sizing"), down = toShow.length && (!toHide.length || (toShow.index() < toHide.index())), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function () { that._toggleComplete(data); }; if (typeof options === "number") { duration = options; }
            if (typeof options === "string") { easing = options; }
            easing = easing || options.easing || animate.easing; duration = duration || options.duration || animate.duration; if (!toHide.length) { return toShow.animate(this.showProps, duration, easing, complete); }
            if (!toShow.length) { return toHide.animate(this.hideProps, duration, easing, complete); }
            total = toShow.show().outerHeight(); toHide.animate(this.hideProps, { duration: duration, easing: easing, step: function (now, fx) { fx.now = Math.round(now); } }); toShow.hide().animate(this.showProps, { duration: duration, easing: easing, complete: complete, step: function (now, fx) { fx.now = Math.round(now); if (fx.prop !== "height") { if (boxSizing === "content-box") { adjust += fx.now; } } else if (that.options.heightStyle !== "content") { fx.now = Math.round(total - toHide.outerHeight() - adjust); adjust = 0; } } });
        }, _toggleComplete: function (data) {
            var toHide = data.oldPanel, prev = toHide.prev(); this._removeClass(toHide, "ui-accordion-content-active"); this._removeClass(prev, "ui-accordion-header-active")._addClass(prev, "ui-accordion-header-collapsed"); if (toHide.length) { toHide.parent()[0].className = toHide.parent()[0].className; }
            this._trigger("activate", null, data);
        }
    });/*!
 * jQuery UI Menu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsMenu = $.widget("ui.menu", {
        version: "1.12.1", defaultElement: "<ul>", delay: 300, options: { icons: { submenu: "ui-icon-caret-1-e" }, items: "> *", menus: "ul", position: { my: "left top", at: "right top" }, role: "menu", blur: null, focus: null, select: null }, _create: function () {
            this.activeMenu = this.element; this.mouseHandled = false; this.element.uniqueId().attr({ role: this.options.role, tabIndex: 0 }); this._addClass("ui-menu", "ui-widget ui-widget-content"); this._on({
                "mousedown .ui-menu-item": function (event) { event.preventDefault(); }, "click .ui-menu-item": function (event) {
                    var target = $(event.target); var active = $($.ui.safeActiveElement(this.document[0])); if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                        this.select(event); if (!event.isPropagationStopped()) { this.mouseHandled = true; }
                        if (target.has(".ui-menu").length) { this.expand(event); } else if (!this.element.is(":focus") && active.closest(".ui-menu").length) { this.element.trigger("focus", [true]); if (this.active && this.active.parents(".ui-menu").length === 1) { clearTimeout(this.timer); } }
                    }
                }, "mouseenter .ui-menu-item": function (event) {
                    if (this.previousFilter) { return; }
                    var actualTarget = $(event.target).closest(".ui-menu-item"), target = $(event.currentTarget); if (actualTarget[0] !== target[0]) { return; }
                    this._removeClass(target.siblings().children(".ui-state-active"), null, "ui-state-active"); this.focus(event, target);
                }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function (event, keepActiveItem) { var item = this.active || this.element.find(this.options.items).eq(0); if (!keepActiveItem) { this.focus(event, item); } }, blur: function (event) { this._delay(function () { var notContained = !$.contains(this.element[0], $.ui.safeActiveElement(this.document[0])); if (notContained) { this.collapseAll(event); } }); }, keydown: "_keydown"
            }); this.refresh(); this._on(this.document, {
                click: function (event) {
                    if (this._closeOnDocumentClick(event)) { this.collapseAll(event); }
                    this.mouseHandled = false;
                }
            });
        }, _destroy: function () { var items = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"), submenus = items.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup"); this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled " + "tabIndex").removeUniqueId().show(); submenus.children().each(function () { var elem = $(this); if (elem.data("ui-menu-submenu-caret")) { elem.remove(); } }); }, _keydown: function (event) {
            var match, prev, character, skip, preventDefault = true; switch (event.keyCode) {
                case $.ui.keyCode.PAGE_UP: this.previousPage(event); break; case $.ui.keyCode.PAGE_DOWN: this.nextPage(event); break; case $.ui.keyCode.HOME: this._move("first", "first", event); break; case $.ui.keyCode.END: this._move("last", "last", event); break; case $.ui.keyCode.UP: this.previous(event); break; case $.ui.keyCode.DOWN: this.next(event); break; case $.ui.keyCode.LEFT: this.collapse(event); break; case $.ui.keyCode.RIGHT: if (this.active && !this.active.is(".ui-state-disabled")) { this.expand(event); }
                    break; case $.ui.keyCode.ENTER: case $.ui.keyCode.SPACE: this._activate(event); break; case $.ui.keyCode.ESCAPE: this.collapse(event); break; default: preventDefault = false; prev = this.previousFilter || ""; skip = false; character = event.keyCode >= 96 && event.keyCode <= 105 ? (event.keyCode - 96).toString() : String.fromCharCode(event.keyCode); clearTimeout(this.filterTimer); if (character === prev) { skip = true; } else { character = prev + character; }
                    match = this._filterMenuItems(character); match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match; if (!match.length) { character = String.fromCharCode(event.keyCode); match = this._filterMenuItems(character); }
                    if (match.length) { this.focus(event, match); this.previousFilter = character; this.filterTimer = this._delay(function () { delete this.previousFilter; }, 1000); } else { delete this.previousFilter; }
            }
            if (preventDefault) { event.preventDefault(); }
        }, _activate: function (event) { if (this.active && !this.active.is(".ui-state-disabled")) { if (this.active.children("[aria-haspopup='true']").length) { this.expand(event); } else { this.select(event); } } }, refresh: function () { var menus, items, newSubmenus, newItems, newWrappers, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus); this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length); newSubmenus = submenus.filter(":not(.ui-menu)").hide().attr({ role: this.options.role, "aria-hidden": "true", "aria-expanded": "false" }).each(function () { var menu = $(this), item = menu.prev(), submenuCaret = $("<span>").data("ui-menu-submenu-caret", true); that._addClass(submenuCaret, "ui-menu-icon", "ui-icon " + icon); item.attr("aria-haspopup", "true").prepend(submenuCaret); menu.attr("aria-labelledby", item.attr("id")); }); this._addClass(newSubmenus, "ui-menu", "ui-widget ui-widget-content ui-front"); menus = submenus.add(this.element); items = menus.find(this.options.items); items.not(".ui-menu-item").each(function () { var item = $(this); if (that._isDivider(item)) { that._addClass(item, "ui-menu-divider", "ui-widget-content"); } }); newItems = items.not(".ui-menu-item, .ui-menu-divider"); newWrappers = newItems.children().not(".ui-menu").uniqueId().attr({ tabIndex: -1, role: this._itemRole() }); this._addClass(newItems, "ui-menu-item")._addClass(newWrappers, "ui-menu-item-wrapper"); items.filter(".ui-state-disabled").attr("aria-disabled", "true"); if (this.active && !$.contains(this.element[0], this.active[0])) { this.blur(); } }, _itemRole: function () { return { menu: "menuitem", listbox: "option" }[this.options.role]; }, _setOption: function (key, value) {
            if (key === "icons") { var icons = this.element.find(".ui-menu-icon"); this._removeClass(icons, null, this.options.icons.submenu)._addClass(icons, null, value.submenu); }
            this._super(key, value);
        }, _setOptionDisabled: function (value) { this._super(value); this.element.attr("aria-disabled", String(value)); this._toggleClass(null, "ui-state-disabled", !!value); }, focus: function (event, item) {
            var nested, focused, activeParent; this.blur(event, event && event.type === "focus"); this._scrollIntoView(item); this.active = item.first(); focused = this.active.children(".ui-menu-item-wrapper"); this._addClass(focused, null, "ui-state-active"); if (this.options.role) { this.element.attr("aria-activedescendant", focused.attr("id")); }
            activeParent = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"); this._addClass(activeParent, null, "ui-state-active"); if (event && event.type === "keydown") { this._close(); } else { this.timer = this._delay(function () { this._close(); }, this.delay); }
            nested = item.children(".ui-menu"); if (nested.length && event && (/^mouse/.test(event.type))) { this._startOpening(nested); }
            this.activeMenu = item.parent(); this._trigger("focus", event, { item: item });
        }, _scrollIntoView: function (item) { var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight; if (this._hasScroll()) { borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0; paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0; offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop; scroll = this.activeMenu.scrollTop(); elementHeight = this.activeMenu.height(); itemHeight = item.outerHeight(); if (offset < 0) { this.activeMenu.scrollTop(scroll + offset); } else if (offset + itemHeight > elementHeight) { this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight); } } }, blur: function (event, fromFocus) {
            if (!fromFocus) { clearTimeout(this.timer); }
            if (!this.active) { return; }
            this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"); this._trigger("blur", event, { item: this.active }); this.active = null;
        }, _startOpening: function (submenu) {
            clearTimeout(this.timer); if (submenu.attr("aria-hidden") !== "true") { return; }
            this.timer = this._delay(function () { this._close(); this._open(submenu); }, this.delay);
        }, _open: function (submenu) { var position = $.extend({ of: this.active }, this.options.position); clearTimeout(this.timer); this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true"); submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position); }, collapseAll: function (event, all) {
            clearTimeout(this.timer); this.timer = this._delay(function () {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu")); if (!currentMenu.length) { currentMenu = this.element; }
                this._close(currentMenu); this.blur(event); this._removeClass(currentMenu.find(".ui-state-active"), null, "ui-state-active"); this.activeMenu = currentMenu;
            }, this.delay);
        }, _close: function (startMenu) {
            if (!startMenu) { startMenu = this.active ? this.active.parent() : this.element; }
            startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
        }, _closeOnDocumentClick: function (event) { return !$(event.target).closest(".ui-menu").length; }, _isDivider: function (item) { return !/[^\-\u2014\u2013\s]/.test(item.text()); }, collapse: function (event) { var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element); if (newItem && newItem.length) { this._close(); this.focus(event, newItem); } }, expand: function (event) { var newItem = this.active && this.active.children(".ui-menu ").find(this.options.items).first(); if (newItem && newItem.length) { this._open(newItem.parent()); this._delay(function () { this.focus(event, newItem); }); } }, next: function (event) { this._move("next", "first", event); }, previous: function (event) { this._move("prev", "last", event); }, isFirstItem: function () { return this.active && !this.active.prevAll(".ui-menu-item").length; }, isLastItem: function () { return this.active && !this.active.nextAll(".ui-menu-item").length; }, _move: function (direction, filter, event) {
            var next; if (this.active) {
                if (direction === "first" || direction === "last") {
                    next = this.active
                    [direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
                } else {
                    next = this.active
                    [direction + "All"](".ui-menu-item").eq(0);
                }
            }
            if (!next || !next.length || !this.active) { next = this.activeMenu.find(this.options.items)[filter](); }
            this.focus(event, next);
        }, nextPage: function (event) {
            var item, base, height; if (!this.active) { this.next(event); return; }
            if (this.isLastItem()) { return; }
            if (this._hasScroll()) { base = this.active.offset().top; height = this.element.height(); this.active.nextAll(".ui-menu-item").each(function () { item = $(this); return item.offset().top - base - height < 0; }); this.focus(event, item); } else {
                this.focus(event, this.activeMenu.find(this.options.items)
                [!this.active ? "first" : "last"]());
            }
        }, previousPage: function (event) {
            var item, base, height; if (!this.active) { this.next(event); return; }
            if (this.isFirstItem()) { return; }
            if (this._hasScroll()) { base = this.active.offset().top; height = this.element.height(); this.active.prevAll(".ui-menu-item").each(function () { item = $(this); return item.offset().top - base + height > 0; }); this.focus(event, item); } else { this.focus(event, this.activeMenu.find(this.options.items).first()); }
        }, _hasScroll: function () { return this.element.outerHeight() < this.element.prop("scrollHeight"); }, select: function (event) {
            this.active = this.active || $(event.target).closest(".ui-menu-item"); var ui = { item: this.active }; if (!this.active.has(".ui-menu").length) { this.collapseAll(event, true); }
            this._trigger("select", event, ui);
        }, _filterMenuItems: function (character) { var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), regex = new RegExp("^" + escapedCharacter, "i"); return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () { return regex.test($.trim($(this).children(".ui-menu-item-wrapper").text())); }); }
    });/*!
 * jQuery UI Autocomplete 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.autocomplete", {
        version: "1.12.1", defaultElement: "<input>", options: { appendTo: null, autoFocus: false, delay: 300, minLength: 1, position: { my: "left top", at: "left bottom", collision: "none" }, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null }, requestIndex: 0, pending: 0, _create: function () {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === "textarea", isInput = nodeName === "input"; this.isMultiLine = isTextarea || !isInput && this._isContentEditable(this.element); this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"]; this.isNewMenu = true; this._addClass("ui-autocomplete-input"); this.element.attr("autocomplete", "off"); this._on(this.element, {
                keydown: function (event) {
                    if (this.element.prop("readOnly")) { suppressKeyPress = true; suppressInput = true; suppressKeyPressRepeat = true; return; }
                    suppressKeyPress = false; suppressInput = false; suppressKeyPressRepeat = false; var keyCode = $.ui.keyCode; switch (event.keyCode) {
                        case keyCode.PAGE_UP: suppressKeyPress = true; this._move("previousPage", event); break; case keyCode.PAGE_DOWN: suppressKeyPress = true; this._move("nextPage", event); break; case keyCode.UP: suppressKeyPress = true; this._keyEvent("previous", event); break; case keyCode.DOWN: suppressKeyPress = true; this._keyEvent("next", event); break; case keyCode.ENTER: if (this.menu.active) { suppressKeyPress = true; event.preventDefault(); this.menu.select(event); }
                            break; case keyCode.TAB: if (this.menu.active) { this.menu.select(event); }
                            break; case keyCode.ESCAPE: if (this.menu.element.is(":visible")) {
                                if (!this.isMultiLine) { this._value(this.term); }
                                this.close(event); event.preventDefault();
                            }
                            break; default: suppressKeyPressRepeat = true; this._searchTimeout(event); break;
                    }
                }, keypress: function (event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false; if (!this.isMultiLine || this.menu.element.is(":visible")) { event.preventDefault(); }
                        return;
                    }
                    if (suppressKeyPressRepeat) { return; }
                    var keyCode = $.ui.keyCode; switch (event.keyCode) { case keyCode.PAGE_UP: this._move("previousPage", event); break; case keyCode.PAGE_DOWN: this._move("nextPage", event); break; case keyCode.UP: this._keyEvent("previous", event); break; case keyCode.DOWN: this._keyEvent("next", event); break; }
                }, input: function (event) {
                    if (suppressInput) { suppressInput = false; event.preventDefault(); return; }
                    this._searchTimeout(event);
                }, focus: function () { this.selectedItem = null; this.previous = this._value(); }, blur: function (event) {
                    if (this.cancelBlur) { delete this.cancelBlur; return; }
                    clearTimeout(this.searching); this.close(event); this._change(event);
                }
            }); this._initSource(); this.menu = $("<ul>").appendTo(this._appendTo()).menu({ role: null }).hide().menu("instance"); this._addClass(this.menu.element, "ui-autocomplete", "ui-front"); this._on(this.menu.element, {
                mousedown: function (event) { event.preventDefault(); this.cancelBlur = true; this._delay(function () { delete this.cancelBlur; if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) { this.element.trigger("focus"); } }); }, menufocus: function (event, ui) {
                    var label, item; if (this.isNewMenu) { this.isNewMenu = false; if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) { this.menu.blur(); this.document.one("mousemove", function () { $(event.target).trigger(event.originalEvent); }); return; } }
                    item = ui.item.data("ui-autocomplete-item"); if (false !== this._trigger("focus", event, { item: item })) { if (event.originalEvent && /^key/.test(event.originalEvent.type)) { this._value(item.value); } }
                    label = ui.item.attr("aria-label") || item.value; if (label && $.trim(label).length) { this.liveRegion.children().hide(); $("<div>").text(label).appendTo(this.liveRegion); }
                }, menuselect: function (event, ui) {
                    var item = ui.item.data("ui-autocomplete-item"), previous = this.previous; if (this.element[0] !== $.ui.safeActiveElement(this.document[0])) { this.element.trigger("focus"); this.previous = previous; this._delay(function () { this.previous = previous; this.selectedItem = item; }); }
                    if (false !== this._trigger("select", event, { item: item })) { this._value(item.value); }
                    this.term = this._value(); this.close(event); this.selectedItem = item;
                }
            }); this.liveRegion = $("<div>", { role: "status", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body); this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"); this._on(this.window, { beforeunload: function () { this.element.removeAttr("autocomplete"); } });
        }, _destroy: function () { clearTimeout(this.searching); this.element.removeAttr("autocomplete"); this.menu.element.remove(); this.liveRegion.remove(); }, _setOption: function (key, value) {
            this._super(key, value); if (key === "source") { this._initSource(); }
            if (key === "appendTo") { this.menu.element.appendTo(this._appendTo()); }
            if (key === "disabled" && value && this.xhr) { this.xhr.abort(); }
        }, _isEventTargetInWidget: function (event) { var menuElement = this.menu.element[0]; return event.target === this.element[0] || event.target === menuElement || $.contains(menuElement, event.target); }, _closeOnClickOutside: function (event) { if (!this._isEventTargetInWidget(event)) { this.close(); } }, _appendTo: function () {
            var element = this.options.appendTo; if (element) { element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0); }
            if (!element || !element[0]) { element = this.element.closest(".ui-front, dialog"); }
            if (!element.length) { element = this.document[0].body; }
            return element;
        }, _initSource: function () {
            var array, url, that = this; if ($.isArray(this.options.source)) { array = this.options.source; this.source = function (request, response) { response($.ui.autocomplete.filter(array, request.term)); }; } else if (typeof this.options.source === "string") {
                url = this.options.source; this.source = function (request, response) {
                    if (that.xhr) { that.xhr.abort(); }
                    that.xhr = $.ajax({ url: url, data: request, dataType: "json", success: function (data) { response(data); }, error: function () { response([]); } });
                };
            } else { this.source = this.options.source; }
        }, _searchTimeout: function (event) { clearTimeout(this.searching); this.searching = this._delay(function () { var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(":visible"), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey; if (!equalValues || (equalValues && !menuVisible && !modifierKey)) { this.selectedItem = null; this.search(null, event); } }, this.options.delay); }, search: function (value, event) {
            value = value != null ? value : this._value(); this.term = this._value(); if (value.length < this.options.minLength) { return this.close(event); }
            if (this._trigger("search", event) === false) { return; }
            return this._search(value);
        }, _search: function (value) { this.pending++; this._addClass("ui-autocomplete-loading"); this.cancelSearch = false; this.source({ term: value }, this._response()); }, _response: function () {
            var index = ++this.requestIndex; return $.proxy(function (content) {
                if (index === this.requestIndex) { this.__response(content); }
                this.pending--; if (!this.pending) { this._removeClass("ui-autocomplete-loading"); }
            }, this);
        }, __response: function (content) {
            if (content) { content = this._normalize(content); }
            this._trigger("response", null, { content: content }); if (!this.options.disabled && content && content.length && !this.cancelSearch) { this._suggest(content); this._trigger("open"); } else { this._close(); }
        }, close: function (event) { this.cancelSearch = true; this._close(event); }, _close: function (event) { this._off(this.document, "mousedown"); if (this.menu.element.is(":visible")) { this.menu.element.hide(); this.menu.blur(); this.isNewMenu = true; this._trigger("close", event); } }, _change: function (event) { if (this.previous !== this._value()) { this._trigger("change", event, { item: this.selectedItem }); } }, _normalize: function (items) {
            if (items.length && items[0].label && items[0].value) { return items; }
            return $.map(items, function (item) {
                if (typeof item === "string") { return { label: item, value: item }; }
                return $.extend({}, item, { label: item.label || item.value, value: item.value || item.label });
            });
        }, _suggest: function (items) {
            var ul = this.menu.element.empty(); this._renderMenu(ul, items); this.isNewMenu = true; this.menu.refresh(); ul.show(); this._resizeMenu(); ul.position($.extend({ of: this.element }, this.options.position)); if (this.options.autoFocus) { this.menu.next(); }
            this._on(this.document, { mousedown: "_closeOnClickOutside" });
        }, _resizeMenu: function () { var ul = this.menu.element; ul.outerWidth(Math.max(ul.width("").outerWidth() + 1, this.element.outerWidth())); }, _renderMenu: function (ul, items) { var that = this; $.each(items, function (index, item) { that._renderItemData(ul, item); }); }, _renderItemData: function (ul, item) { return this._renderItem(ul, item).data("ui-autocomplete-item", item); }, _renderItem: function (ul, item) { return $("<li>").append($("<div>").text(item.label)).appendTo(ul); }, _move: function (direction, event) {
            if (!this.menu.element.is(":visible")) { this.search(null, event); return; }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                if (!this.isMultiLine) { this._value(this.term); }
                this.menu.blur(); return;
            }
            this.menu[direction](event);
        }, widget: function () { return this.menu.element; }, _value: function () { return this.valueMethod.apply(this.element, arguments); }, _keyEvent: function (keyEvent, event) { if (!this.isMultiLine || this.menu.element.is(":visible")) { this._move(keyEvent, event); event.preventDefault(); } }, _isContentEditable: function (element) {
            if (!element.length) { return false; }
            var editable = element.prop("contentEditable"); if (editable === "inherit") { return this._isContentEditable(element.parent()); }
            return editable === "true";
        }
    }); $.extend($.ui.autocomplete, { escapeRegex: function (value) { return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"); }, filter: function (array, term) { var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i"); return $.grep(array, function (value) { return matcher.test(value.label || value.value || value); }); } }); $.widget("ui.autocomplete", $.ui.autocomplete, {
        options: { messages: { noResults: "No search results.", results: function (amount) { return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate."; } } }, __response: function (content) {
            var message; this._superApply(arguments); if (this.options.disabled || this.cancelSearch) { return; }
            if (content && content.length) { message = this.options.messages.results(content.length); } else { message = this.options.messages.noResults; }
            this.liveRegion.children().hide(); $("<div>").text(message).appendTo(this.liveRegion);
        }
    }); var widgetsAutocomplete = $.ui.autocomplete;/*!
 * jQuery UI Controlgroup 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var controlgroupCornerRegex = /ui-corner-([a-z]){2,6}/g; var widgetsControlgroup = $.widget("ui.controlgroup", {
        version: "1.12.1", defaultElement: "<div>", options: { direction: "horizontal", disabled: null, onlyVisible: true, items: { "button": "input[type=button], input[type=submit], input[type=reset], button, a", "controlgroupLabel": ".ui-controlgroup-label", "checkboxradio": "input[type='checkbox'], input[type='radio']", "selectmenu": "select", "spinner": ".ui-spinner-input" } }, _create: function () { this._enhance(); }, _enhance: function () { this.element.attr("role", "toolbar"); this.refresh(); }, _destroy: function () { this._callChildMethod("destroy"); this.childWidgets.removeData("ui-controlgroup-data"); this.element.removeAttr("role"); if (this.options.items.controlgroupLabel) { this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap(); } }, _initWidgets: function () {
            var that = this, childWidgets = []; $.each(this.options.items, function (widget, selector) {
                var labels; var options = {}; if (!selector) { return; }
                if (widget === "controlgroupLabel") {
                    labels = that.element.find(selector); labels.each(function () {
                        var element = $(this); if (element.children(".ui-controlgroup-label-contents").length) { return; }
                        element.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
                    }); that._addClass(labels, null, "ui-widget ui-widget-content ui-state-default"); childWidgets = childWidgets.concat(labels.get()); return;
                }
                if (!$.fn[widget]) { return; }
                if (that["_" + widget + "Options"]) { options = that["_" + widget + "Options"]("middle"); } else { options = { classes: {} }; }
                that.element.find(selector).each(function () {
                    var element = $(this); var instance = element[widget]("instance"); var instanceOptions = $.widget.extend({}, options); if (widget === "button" && element.parent(".ui-spinner").length) { return; }
                    if (!instance) { instance = element[widget]()[widget]("instance"); }
                    if (instance) { instanceOptions.classes = that._resolveClassesValues(instanceOptions.classes, instance); }
                    element[widget](instanceOptions); var widgetElement = element[widget]("widget"); $.data(widgetElement[0], "ui-controlgroup-data", instance ? instance : element[widget]("instance")); childWidgets.push(widgetElement[0]);
                });
            }); this.childWidgets = $($.unique(childWidgets)); this._addClass(this.childWidgets, "ui-controlgroup-item");
        }, _callChildMethod: function (method) { this.childWidgets.each(function () { var element = $(this), data = element.data("ui-controlgroup-data"); if (data && data[method]) { data[method](); } }); }, _updateCornerClass: function (element, position) { var remove = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all"; var add = this._buildSimpleOptions(position, "label").classes.label; this._removeClass(element, null, remove); this._addClass(element, null, add); }, _buildSimpleOptions: function (position, key) { var direction = this.options.direction === "vertical"; var result = { classes: {} }; result.classes[key] = { "middle": "", "first": "ui-corner-" + (direction ? "top" : "left"), "last": "ui-corner-" + (direction ? "bottom" : "right"), "only": "ui-corner-all" }[position]; return result; }, _spinnerOptions: function (position) { var options = this._buildSimpleOptions(position, "ui-spinner"); options.classes["ui-spinner-up"] = ""; options.classes["ui-spinner-down"] = ""; return options; }, _buttonOptions: function (position) { return this._buildSimpleOptions(position, "ui-button"); }, _checkboxradioOptions: function (position) { return this._buildSimpleOptions(position, "ui-checkboxradio-label"); }, _selectmenuOptions: function (position) { var direction = this.options.direction === "vertical"; return { width: direction ? "auto" : false, classes: { middle: { "ui-selectmenu-button-open": "", "ui-selectmenu-button-closed": "" }, first: { "ui-selectmenu-button-open": "ui-corner-" + (direction ? "top" : "tl"), "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "top" : "left") }, last: { "ui-selectmenu-button-open": direction ? "" : "ui-corner-tr", "ui-selectmenu-button-closed": "ui-corner-" + (direction ? "bottom" : "right") }, only: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" } }[position] }; }, _resolveClassesValues: function (classes, instance) { var result = {}; $.each(classes, function (key) { var current = instance.options.classes[key] || ""; current = $.trim(current.replace(controlgroupCornerRegex, "")); result[key] = (current + " " + classes[key]).replace(/\s+/g, " "); }); return result; }, _setOption: function (key, value) {
            if (key === "direction") { this._removeClass("ui-controlgroup-" + this.options.direction); }
            this._super(key, value); if (key === "disabled") { this._callChildMethod(value ? "disable" : "enable"); return; }
            this.refresh();
        }, refresh: function () {
            var children, that = this; this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction); if (this.options.direction === "horizontal") { this._addClass(null, "ui-helper-clearfix"); }
            this._initWidgets(); children = this.childWidgets; if (this.options.onlyVisible) { children = children.filter(":visible"); }
            if (children.length) { $.each(["first", "last"], function (index, value) { var instance = children[value]().data("ui-controlgroup-data"); if (instance && that["_" + instance.widgetName + "Options"]) { var options = that["_" + instance.widgetName + "Options"](children.length === 1 ? "only" : value); options.classes = that._resolveClassesValues(options.classes, instance); instance.element[instance.widgetName](options); } else { that._updateCornerClass(children[value](), value); } }); this._callChildMethod("refresh"); }
        }
    });/*!
 * jQuery UI Checkboxradio 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.checkboxradio", [$.ui.formResetMixin, {
        version: "1.12.1", options: { disabled: null, label: null, icon: true, classes: { "ui-checkboxradio-label": "ui-corner-all", "ui-checkboxradio-icon": "ui-corner-all" } }, _getCreateOptions: function () {
            var disabled, labels; var that = this; var options = this._super() || {}; this._readType(); labels = this.element.labels(); this.label = $(labels[labels.length - 1]); if (!this.label.length) { $.error("No label found for checkboxradio widget"); }
            this.originalLabel = ""; this.label.contents().not(this.element[0]).each(function () { that.originalLabel += this.nodeType === 3 ? $(this).text() : this.outerHTML; }); if (this.originalLabel) { options.label = this.originalLabel; }
            disabled = this.element[0].disabled; if (disabled != null) { options.disabled = disabled; }
            return options;
        }, _create: function () {
            var checked = this.element[0].checked; this._bindFormResetHandler(); if (this.options.disabled == null) { this.options.disabled = this.element[0].disabled; }
            this._setOption("disabled", this.options.disabled); this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"); this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"); if (this.type === "radio") { this._addClass(this.label, "ui-checkboxradio-radio-label"); }
            if (this.options.label && this.options.label !== this.originalLabel) { this._updateLabel(); } else if (this.originalLabel) { this.options.label = this.originalLabel; }
            this._enhance(); if (checked) { this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"); if (this.icon) { this._addClass(this.icon, null, "ui-state-hover"); } }
            this._on({ change: "_toggleClasses", focus: function () { this._addClass(this.label, null, "ui-state-focus ui-visual-focus"); }, blur: function () { this._removeClass(this.label, null, "ui-state-focus ui-visual-focus"); } });
        }, _readType: function () { var nodeName = this.element[0].nodeName.toLowerCase(); this.type = this.element[0].type; if (nodeName !== "input" || !/radio|checkbox/.test(this.type)) { $.error("Can't create checkboxradio on element.nodeName=" + nodeName + " and element.type=" + this.type); } }, _enhance: function () { this._updateIcon(this.element[0].checked); }, widget: function () { return this.label; }, _getRadioGroup: function () {
            var group; var name = this.element[0].name; var nameSelector = "input[name='" + $.ui.escapeSelector(name) + "']"; if (!name) { return $([]); }
            if (this.form.length) { group = $(this.form[0].elements).filter(nameSelector); } else { group = $(nameSelector).filter(function () { return $(this).form().length === 0; }); }
            return group.not(this.element);
        }, _toggleClasses: function () {
            var checked = this.element[0].checked; this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked); if (this.options.icon && this.type === "checkbox") { this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", checked)._toggleClass(this.icon, null, "ui-icon-blank", !checked); }
            if (this.type === "radio") { this._getRadioGroup().each(function () { var instance = $(this).checkboxradio("instance"); if (instance) { instance._removeClass(instance.label, "ui-checkboxradio-checked", "ui-state-active"); } }); }
        }, _destroy: function () { this._unbindFormResetHandler(); if (this.icon) { this.icon.remove(); this.iconSpace.remove(); } }, _setOption: function (key, value) {
            if (key === "label" && !value) { return; }
            this._super(key, value); if (key === "disabled") { this._toggleClass(this.label, null, "ui-state-disabled", value); this.element[0].disabled = value; return; }
            this.refresh();
        }, _updateIcon: function (checked) {
            var toAdd = "ui-icon ui-icon-background "; if (this.options.icon) {
                if (!this.icon) { this.icon = $("<span>"); this.iconSpace = $("<span> </span>"); this._addClass(this.iconSpace, "ui-checkboxradio-icon-space"); }
                if (this.type === "checkbox") { toAdd += checked ? "ui-icon-check ui-state-checked" : "ui-icon-blank"; this._removeClass(this.icon, null, checked ? "ui-icon-blank" : "ui-icon-check"); } else { toAdd += "ui-icon-blank"; }
                this._addClass(this.icon, "ui-checkboxradio-icon", toAdd); if (!checked) { this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"); }
                this.icon.prependTo(this.label).after(this.iconSpace);
            } else if (this.icon !== undefined) { this.icon.remove(); this.iconSpace.remove(); delete this.icon; }
        }, _updateLabel: function () {
            var contents = this.label.contents().not(this.element[0]); if (this.icon) { contents = contents.not(this.icon[0]); }
            if (this.iconSpace) { contents = contents.not(this.iconSpace[0]); }
            contents.remove(); this.label.append(this.options.label);
        }, refresh: function () {
            var checked = this.element[0].checked, isDisabled = this.element[0].disabled; this._updateIcon(checked); this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", checked); if (this.options.label !== null) { this._updateLabel(); }
            if (isDisabled !== this.options.disabled) { this._setOptions({ "disabled": isDisabled }); }
        }
    }]); var widgetsCheckboxradio = $.ui.checkboxradio;/*!
 * jQuery UI Button 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.button", {
        version: "1.12.1", defaultElement: "<button>", options: { classes: { "ui-button": "ui-corner-all" }, disabled: null, icon: null, iconPosition: "beginning", label: null, showLabel: true }, _getCreateOptions: function () {
            var disabled, options = this._super() || {}; this.isInput = this.element.is("input"); disabled = this.element[0].disabled; if (disabled != null) { options.disabled = disabled; }
            this.originalLabel = this.isInput ? this.element.val() : this.element.html(); if (this.originalLabel) { options.label = this.originalLabel; }
            return options;
        }, _create: function () {
            if (!this.option.showLabel & !this.options.icon) { this.options.showLabel = true; }
            if (this.options.disabled == null) { this.options.disabled = this.element[0].disabled || false; }
            this.hasTitle = !!this.element.attr("title"); if (this.options.label && this.options.label !== this.originalLabel) { if (this.isInput) { this.element.val(this.options.label); } else { this.element.html(this.options.label); } }
            this._addClass("ui-button", "ui-widget"); this._setOption("disabled", this.options.disabled); this._enhance(); if (this.element.is("a")) { this._on({ "keyup": function (event) { if (event.keyCode === $.ui.keyCode.SPACE) { event.preventDefault(); if (this.element[0].click) { this.element[0].click(); } else { this.element.trigger("click"); } } } }); }
        }, _enhance: function () {
            if (!this.element.is("button")) { this.element.attr("role", "button"); }
            if (this.options.icon) { this._updateIcon("icon", this.options.icon); this._updateTooltip(); }
        }, _updateTooltip: function () { this.title = this.element.attr("title"); if (!this.options.showLabel && !this.title) { this.element.attr("title", this.options.label); } }, _updateIcon: function (option, value) {
            var icon = option !== "iconPosition", position = icon ? this.options.iconPosition : value, displayBlock = position === "top" || position === "bottom"; if (!this.icon) { this.icon = $("<span>"); this._addClass(this.icon, "ui-button-icon", "ui-icon"); if (!this.options.showLabel) { this._addClass("ui-button-icon-only"); } } else if (icon) { this._removeClass(this.icon, null, this.options.icon); }
            if (icon) { this._addClass(this.icon, null, value); }
            this._attachIcon(position); if (displayBlock) { this._addClass(this.icon, null, "ui-widget-icon-block"); if (this.iconSpace) { this.iconSpace.remove(); } } else {
                if (!this.iconSpace) { this.iconSpace = $("<span> </span>"); this._addClass(this.iconSpace, "ui-button-icon-space"); }
                this._removeClass(this.icon, null, "ui-wiget-icon-block"); this._attachIconSpace(position);
            }
        }, _destroy: function () {
            this.element.removeAttr("role"); if (this.icon) { this.icon.remove(); }
            if (this.iconSpace) { this.iconSpace.remove(); }
            if (!this.hasTitle) { this.element.removeAttr("title"); }
        }, _attachIconSpace: function (iconPosition) { this.icon[/^(?:end|bottom)/.test(iconPosition) ? "before" : "after"](this.iconSpace); }, _attachIcon: function (iconPosition) { this.element[/^(?:end|bottom)/.test(iconPosition) ? "append" : "prepend"](this.icon); }, _setOptions: function (options) {
            var newShowLabel = options.showLabel === undefined ? this.options.showLabel : options.showLabel, newIcon = options.icon === undefined ? this.options.icon : options.icon; if (!newShowLabel && !newIcon) { options.showLabel = true; }
            this._super(options);
        }, _setOption: function (key, value) {
            if (key === "icon") { if (value) { this._updateIcon(key, value); } else if (this.icon) { this.icon.remove(); if (this.iconSpace) { this.iconSpace.remove(); } } }
            if (key === "iconPosition") { this._updateIcon(key, value); }
            if (key === "showLabel") { this._toggleClass("ui-button-icon-only", null, !value); this._updateTooltip(); }
            if (key === "label") { if (this.isInput) { this.element.val(value); } else { this.element.html(value); if (this.icon) { this._attachIcon(this.options.iconPosition); this._attachIconSpace(this.options.iconPosition); } } }
            this._super(key, value); if (key === "disabled") { this._toggleClass(null, "ui-state-disabled", value); this.element[0].disabled = value; if (value) { this.element.blur(); } }
        }, refresh: function () {
            var isDisabled = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled"); if (isDisabled !== this.options.disabled) { this._setOptions({ disabled: isDisabled }); }
            this._updateTooltip();
        }
    }); if ($.uiBackCompat !== false) {
        $.widget("ui.button", $.ui.button, {
            options: { text: true, icons: { primary: null, secondary: null } }, _create: function () {
                if (this.options.showLabel && !this.options.text) { this.options.showLabel = this.options.text; }
                if (!this.options.showLabel && this.options.text) { this.options.text = this.options.showLabel; }
                if (!this.options.icon && (this.options.icons.primary || this.options.icons.secondary)) { if (this.options.icons.primary) { this.options.icon = this.options.icons.primary; } else { this.options.icon = this.options.icons.secondary; this.options.iconPosition = "end"; } } else if (this.options.icon) { this.options.icons.primary = this.options.icon; }
                this._super();
            }, _setOption: function (key, value) {
                if (key === "text") { this._super("showLabel", value); return; }
                if (key === "showLabel") { this.options.text = value; }
                if (key === "icon") { this.options.icons.primary = value; }
                if (key === "icons") { if (value.primary) { this._super("icon", value.primary); this._super("iconPosition", "beginning"); } else if (value.secondary) { this._super("icon", value.secondary); this._super("iconPosition", "end"); } }
                this._superApply(arguments);
            }
        }); $.fn.button = (function (orig) {
            return function () {
                if (!this.length || (this.length && this[0].tagName !== "INPUT") || (this.length && this[0].tagName === "INPUT" && (this.attr("type") !== "checkbox" && this.attr("type") !== "radio"))) { return orig.apply(this, arguments); }
                if (!$.ui.checkboxradio) { $.error("Checkboxradio widget missing"); }
                if (arguments.length === 0) { return this.checkboxradio({ "icon": false }); }
                return this.checkboxradio.apply(this, arguments);
            };
        })($.fn.button); $.fn.buttonset = function () {
            if (!$.ui.controlgroup) { $.error("Controlgroup widget missing"); }
            if (arguments[0] === "option" && arguments[1] === "items" && arguments[2]) { return this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]]); }
            if (arguments[0] === "option" && arguments[1] === "items") { return this.controlgroup.apply(this, [arguments[0], "items.button"]); }
            if (typeof arguments[0] === "object" && arguments[0].items) { arguments[0].items = { button: arguments[0].items }; }
            return this.controlgroup.apply(this, arguments);
        };
    }
    var widgetsButton = $.ui.button;/*!
 * jQuery UI Datepicker 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.extend($.ui, { datepicker: { version: "1.12.1" } }); var datepicker_instActive; function datepicker_getZindex(elem) {
        var position, value; while (elem.length && elem[0] !== document) {
            position = elem.css("position"); if (position === "absolute" || position === "relative" || position === "fixed") { value = parseInt(elem.css("zIndex"), 10); if (!isNaN(value) && value !== 0) { return value; } }
            elem = elem.parent();
        }
        return 0;
    }
    function Datepicker() { this._curInst = null; this._keyEvent = false; this._disabledInputs = []; this._datepickerShowing = false; this._inDialog = false; this._mainDivId = "ui-datepicker-div"; this._inlineClass = "ui-datepicker-inline"; this._appendClass = "ui-datepicker-append"; this._triggerClass = "ui-datepicker-trigger"; this._dialogClass = "ui-datepicker-dialog"; this._disableClass = "ui-datepicker-disabled"; this._unselectableClass = "ui-datepicker-unselectable"; this._currentClass = "ui-datepicker-current-day"; this._dayOverClass = "ui-datepicker-days-cell-over"; this.regional = []; this.regional[""] = { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: false, showMonthAfterYear: false, yearSuffix: "" }; this._defaults = { showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: false, hideIfNoPrevNext: false, navigationAsDateFormat: false, gotoCurrent: false, changeMonth: false, changeYear: false, yearRange: "c-10:c+10", showOtherMonths: false, selectOtherMonths: false, showWeek: false, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: true, showButtonPanel: false, autoSize: false, disabled: false }; $.extend(this._defaults, this.regional[""]); this.regional.en = $.extend(true, {}, this.regional[""]); this.regional["en-US"] = $.extend(true, {}, this.regional.en); this.dpDiv = datepicker_bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")); }
    $.extend(Datepicker.prototype, {
        markerClassName: "hasDatepicker", maxRows: 4, _widgetDatepicker: function () { return this.dpDiv; }, setDefaults: function (settings) { datepicker_extendRemove(this._defaults, settings || {}); return this; }, _attachDatepicker: function (target, settings) {
            var nodeName, inline, inst; nodeName = target.nodeName.toLowerCase(); inline = (nodeName === "div" || nodeName === "span"); if (!target.id) { this.uuid += 1; target.id = "dp" + this.uuid; }
            inst = this._newInst($(target), inline); inst.settings = $.extend({}, settings || {}); if (nodeName === "input") { this._connectDatepicker(target, inst); } else if (inline) { this._inlineDatepicker(target, inst); }
        }, _newInst: function (target, inline) { var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); return { id: id, input: target, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: inline, dpDiv: (!inline ? this.dpDiv : datepicker_bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))) }; }, _connectDatepicker: function (target, inst) {
            var input = $(target); inst.append = $([]); inst.trigger = $([]); if (input.hasClass(this.markerClassName)) { return; }
            this._attachments(input, inst); input.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp); this._autoSize(inst); $.data(target, "datepicker", inst); if (inst.settings.disabled) { this._disableDatepicker(target); }
        }, _attachments: function (input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL"); if (inst.append) { inst.append.remove(); }
            if (appendText) { inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>"); input[isRTL ? "before" : "after"](inst.append); }
            input.off("focus", this._showDatepicker); if (inst.trigger) { inst.trigger.remove(); }
            showOn = this._get(inst, "showOn"); if (showOn === "focus" || showOn === "both") { input.on("focus", this._showDatepicker); }
            if (showOn === "button" || showOn === "both") {
                buttonText = this._get(inst, "buttonText"); buttonImage = this._get(inst, "buttonImage"); inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({ src: buttonImage, alt: buttonText, title: buttonText }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({ src: buttonImage, alt: buttonText, title: buttonText }))); input[isRTL ? "before" : "after"](inst.trigger); inst.trigger.on("click", function () {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) { $.datepicker._hideDatepicker(); } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) { $.datepicker._hideDatepicker(); $.datepicker._showDatepicker(input[0]); } else { $.datepicker._showDatepicker(input[0]); }
                    return false;
                });
            }
        }, _autoSize: function (inst) {
            if (this._get(inst, "autoSize") && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 12 - 1, 20), dateFormat = this._get(inst, "dateFormat"); if (dateFormat.match(/[DM]/)) {
                    findMax = function (names) {
                        max = 0; maxI = 0; for (i = 0; i < names.length; i++) { if (names[i].length > max) { max = names[i].length; maxI = i; } }
                        return maxI;
                    }; date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")))); date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort"))) + 20 - date.getDay());
                }
                inst.input.attr("size", this._formatDate(inst, date).length);
            }
        }, _inlineDatepicker: function (target, inst) {
            var divSpan = $(target); if (divSpan.hasClass(this.markerClassName)) { return; }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv); $.data(target, "datepicker", inst); this._setDate(inst, this._getDefaultDate(inst), true); this._updateDatepicker(inst); this._updateAlternate(inst); if (inst.settings.disabled) { this._disableDatepicker(target); }
            inst.dpDiv.css("display", "block");
        }, _dialogDatepicker: function (input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst; if (!inst) { this.uuid += 1; id = "dp" + this.uuid; this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>"); this._dialogInput.on("keydown", this._doKeyDown); $("body").append(this._dialogInput); inst = this._dialogInst = this._newInst(this._dialogInput, false); inst.settings = {}; $.data(this._dialogInput[0], "datepicker", inst); }
            datepicker_extendRemove(inst.settings, settings || {}); date = (date && date.constructor === Date ? this._formatDate(inst, date) : date); this._dialogInput.val(date); this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null); if (!this._pos) { browserWidth = document.documentElement.clientWidth; browserHeight = document.documentElement.clientHeight; scrollX = document.documentElement.scrollLeft || document.body.scrollLeft; scrollY = document.documentElement.scrollTop || document.body.scrollTop; this._pos = [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY]; }
            this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px"); inst.settings.onSelect = onSelect; this._inDialog = true; this.dpDiv.addClass(this._dialogClass); this._showDatepicker(this._dialogInput[0]); if ($.blockUI) { $.blockUI(this.dpDiv); }
            $.data(this._dialogInput[0], "datepicker", inst); return this;
        }, _destroyDatepicker: function (target) {
            var nodeName, $target = $(target), inst = $.data(target, "datepicker"); if (!$target.hasClass(this.markerClassName)) { return; }
            nodeName = target.nodeName.toLowerCase(); $.removeData(target, "datepicker"); if (nodeName === "input") { inst.append.remove(); inst.trigger.remove(); $target.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp); } else if (nodeName === "div" || nodeName === "span") { $target.removeClass(this.markerClassName).empty(); }
            if (datepicker_instActive === inst) { datepicker_instActive = null; }
        }, _enableDatepicker: function (target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker"); if (!$target.hasClass(this.markerClassName)) { return; }
            nodeName = target.nodeName.toLowerCase(); if (nodeName === "input") { target.disabled = false; inst.trigger.filter("button").each(function () { this.disabled = false; }).end().filter("img").css({ opacity: "1.0", cursor: "" }); } else if (nodeName === "div" || nodeName === "span") { inline = $target.children("." + this._inlineClass); inline.children().removeClass("ui-state-disabled"); inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false); }
            this._disabledInputs = $.map(this._disabledInputs, function (value) { return (value === target ? null : value); });
        }, _disableDatepicker: function (target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, "datepicker"); if (!$target.hasClass(this.markerClassName)) { return; }
            nodeName = target.nodeName.toLowerCase(); if (nodeName === "input") { target.disabled = true; inst.trigger.filter("button").each(function () { this.disabled = true; }).end().filter("img").css({ opacity: "0.5", cursor: "default" }); } else if (nodeName === "div" || nodeName === "span") { inline = $target.children("." + this._inlineClass); inline.children().addClass("ui-state-disabled"); inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true); }
            this._disabledInputs = $.map(this._disabledInputs, function (value) { return (value === target ? null : value); }); this._disabledInputs[this._disabledInputs.length] = target;
        }, _isDisabledDatepicker: function (target) {
            if (!target) { return false; }
            for (var i = 0; i < this._disabledInputs.length; i++) { if (this._disabledInputs[i] === target) { return true; } }
            return false;
        }, _getInst: function (target) {
            try { return $.data(target, "datepicker"); }
            catch (err) { throw "Missing instance data for this datepicker"; }
        }, _optionDatepicker: function (target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target); if (arguments.length === 2 && typeof name === "string") { return (name === "defaults" ? $.extend({}, $.datepicker._defaults) : (inst ? (name === "all" ? $.extend({}, inst.settings) : this._get(inst, name)) : null)); }
            settings = name || {}; if (typeof name === "string") { settings = {}; settings[name] = value; }
            if (inst) {
                if (this._curInst === inst) { this._hideDatepicker(); }
                date = this._getDateDatepicker(target, true); minDate = this._getMinMaxDate(inst, "min"); maxDate = this._getMinMaxDate(inst, "max"); datepicker_extendRemove(inst.settings, settings); if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) { inst.settings.minDate = this._formatDate(inst, minDate); }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) { inst.settings.maxDate = this._formatDate(inst, maxDate); }
                if ("disabled" in settings) { if (settings.disabled) { this._disableDatepicker(target); } else { this._enableDatepicker(target); } }
                this._attachments($(target), inst); this._autoSize(inst); this._setDate(inst, date); this._updateAlternate(inst); this._updateDatepicker(inst);
            }
        }, _changeDatepicker: function (target, name, value) { this._optionDatepicker(target, name, value); }, _refreshDatepicker: function (target) { var inst = this._getInst(target); if (inst) { this._updateDatepicker(inst); } }, _setDateDatepicker: function (target, date) { var inst = this._getInst(target); if (inst) { this._setDate(inst, date); this._updateDatepicker(inst); this._updateAlternate(inst); } }, _getDateDatepicker: function (target, noDefault) {
            var inst = this._getInst(target); if (inst && !inst.inline) { this._setDateFromField(inst, noDefault); }
            return (inst ? this._getDate(inst) : null);
        }, _doKeyDown: function (event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = true, isRTL = inst.dpDiv.is(".ui-datepicker-rtl"); inst._keyEvent = true; if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9: $.datepicker._hideDatepicker(); handled = false; break; case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
                        $.datepicker._currentClass + ")", inst.dpDiv); if (sel[0]) { $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]); }
                        onSelect = $.datepicker._get(inst, "onSelect"); if (onSelect) { dateStr = $.datepicker._formatDate(inst); onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]); } else { $.datepicker._hideDatepicker(); }
                        return false; case 27: $.datepicker._hideDatepicker(); break; case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M"); break; case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M"); break; case 35: if (event.ctrlKey || event.metaKey) { $.datepicker._clearDate(event.target); }
                        handled = event.ctrlKey || event.metaKey; break; case 36: if (event.ctrlKey || event.metaKey) { $.datepicker._gotoToday(event.target); }
                        handled = event.ctrlKey || event.metaKey; break; case 37: if (event.ctrlKey || event.metaKey) { $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D"); }
                        handled = event.ctrlKey || event.metaKey; if (event.originalEvent.altKey) { $.datepicker._adjustDate(event.target, (event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths")), "M"); }
                        break; case 38: if (event.ctrlKey || event.metaKey) { $.datepicker._adjustDate(event.target, -7, "D"); }
                        handled = event.ctrlKey || event.metaKey; break; case 39: if (event.ctrlKey || event.metaKey) { $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D"); }
                        handled = event.ctrlKey || event.metaKey; if (event.originalEvent.altKey) { $.datepicker._adjustDate(event.target, (event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths")), "M"); }
                        break; case 40: if (event.ctrlKey || event.metaKey) { $.datepicker._adjustDate(event.target, +7, "D"); }
                        handled = event.ctrlKey || event.metaKey; break; default: handled = false;
                }
            } else if (event.keyCode === 36 && event.ctrlKey) { $.datepicker._showDatepicker(this); } else { handled = false; }
            if (handled) { event.preventDefault(); event.stopPropagation(); }
        }, _doKeyPress: function (event) { var chars, chr, inst = $.datepicker._getInst(event.target); if ($.datepicker._get(inst, "constrainInput")) { chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat")); chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode); return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1); } }, _doKeyUp: function (event) {
            var date, inst = $.datepicker._getInst(event.target); if (inst.input.val() !== inst.lastVal) {
                try { date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), (inst.input ? inst.input.val() : null), $.datepicker._getFormatConfig(inst)); if (date) { $.datepicker._setDateFromField(inst); $.datepicker._updateAlternate(inst); $.datepicker._updateDatepicker(inst); } }
                catch (err) { }
            }
            return true;
        }, _showDatepicker: function (input) {
            input = input.target || input; if (input.nodeName.toLowerCase() !== "input") { input = $("input", input.parentNode)[0]; }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { return; }
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration; inst = $.datepicker._getInst(input); if ($.datepicker._curInst && $.datepicker._curInst !== inst) { $.datepicker._curInst.dpDiv.stop(true, true); if (inst && $.datepicker._datepickerShowing) { $.datepicker._hideDatepicker($.datepicker._curInst.input[0]); } }
            beforeShow = $.datepicker._get(inst, "beforeShow"); beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {}; if (beforeShowSettings === false) { return; }
            datepicker_extendRemove(inst.settings, beforeShowSettings); inst.lastVal = null; $.datepicker._lastInput = input; $.datepicker._setDateFromField(inst); if ($.datepicker._inDialog) { input.value = ""; }
            if (!$.datepicker._pos) { $.datepicker._pos = $.datepicker._findPos(input); $.datepicker._pos[1] += input.offsetHeight; }
            isFixed = false; $(input).parents().each(function () { isFixed |= $(this).css("position") === "fixed"; return !isFixed; }); offset = { left: $.datepicker._pos[0], top: $.datepicker._pos[1] }; $.datepicker._pos = null; inst.dpDiv.empty(); inst.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" }); $.datepicker._updateDatepicker(inst); offset = $.datepicker._checkOffset(inst, offset, isFixed); inst.dpDiv.css({ position: ($.datepicker._inDialog && $.blockUI ? "static" : (isFixed ? "fixed" : "absolute")), display: "none", left: offset.left + "px", top: offset.top + "px" }); if (!inst.inline) {
                showAnim = $.datepicker._get(inst, "showAnim"); duration = $.datepicker._get(inst, "duration"); inst.dpDiv.css("z-index", datepicker_getZindex($(input)) + 1); $.datepicker._datepickerShowing = true; if ($.effects && $.effects.effect[showAnim]) { inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration); } else { inst.dpDiv[showAnim || "show"](showAnim ? duration : null); }
                if ($.datepicker._shouldFocusInput(inst)) { inst.input.trigger("focus"); }
                $.datepicker._curInst = inst;
            }
        }, _updateDatepicker: function (inst) {
            this.maxRows = 4; datepicker_instActive = inst; inst.dpDiv.empty().append(this._generateHTML(inst)); this._attachHandlers(inst); var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find("." + this._dayOverClass + " a"); if (activeCell.length > 0) { datepicker_handleMouseover.apply(activeCell.get(0)); }
            inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""); if (cols > 1) { inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em"); }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi"); inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"); if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) { inst.input.trigger("focus"); }
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml; setTimeout(function () {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) { inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml); }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        }, _shouldFocusInput: function (inst) { return inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && !inst.input.is(":focus"); }, _checkOffset: function (inst, offset, isFixed) { var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop()); offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0); offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0; offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0; offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ? Math.abs(offset.left + dpWidth - viewWidth) : 0); offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ? Math.abs(dpHeight + inputHeight) : 0); return offset; }, _findPos: function (obj) {
            var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL"); while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) { obj = obj[isRTL ? "previousSibling" : "nextSibling"]; }
            position = $(obj).offset(); return [position.left, position.top];
        }, _hideDatepicker: function (input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst; if (!inst || (input && inst !== $.data(input, "datepicker"))) { return; }
            if (this._datepickerShowing) {
                showAnim = this._get(inst, "showAnim"); duration = this._get(inst, "duration"); postProcess = function () { $.datepicker._tidyDialog(inst); }; if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) { inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess); } else { inst.dpDiv[(showAnim === "slideDown" ? "slideUp" : (showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess); }
                if (!showAnim) { postProcess(); }
                this._datepickerShowing = false; onClose = this._get(inst, "onClose"); if (onClose) { onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]); }
                this._lastInput = null; if (this._inDialog) { this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" }); if ($.blockUI) { $.unblockUI(); $("body").append(this.dpDiv); } }
                this._inDialog = false;
            }
        }, _tidyDialog: function (inst) { inst.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar"); }, _checkExternalClick: function (event) {
            if (!$.datepicker._curInst) { return; }
            var $target = $(event.target), inst = $.datepicker._getInst($target[0]); if ((($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) || ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst)) { $.datepicker._hideDatepicker(); }
        }, _adjustDate: function (id, offset, period) {
            var target = $(id), inst = this._getInst(target[0]); if (this._isDisabledDatepicker(target[0])) { return; }
            this._adjustInstDate(inst, offset +
                (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), period); this._updateDatepicker(inst);
        }, _gotoToday: function (id) {
            var date, target = $(id), inst = this._getInst(target[0]); if (this._get(inst, "gotoCurrent") && inst.currentDay) { inst.selectedDay = inst.currentDay; inst.drawMonth = inst.selectedMonth = inst.currentMonth; inst.drawYear = inst.selectedYear = inst.currentYear; } else { date = new Date(); inst.selectedDay = date.getDate(); inst.drawMonth = inst.selectedMonth = date.getMonth(); inst.drawYear = inst.selectedYear = date.getFullYear(); }
            this._notifyChange(inst); this._adjustDate(target);
        }, _selectMonthYear: function (id, select, period) { var target = $(id), inst = this._getInst(target[0]); inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10); this._notifyChange(inst); this._adjustDate(target); }, _selectDay: function (id, month, year, td) {
            var inst, target = $(id); if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) { return; }
            inst = this._getInst(target[0]); inst.selectedDay = inst.currentDay = $("a", td).html(); inst.selectedMonth = inst.currentMonth = month; inst.selectedYear = inst.currentYear = year; this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        }, _clearDate: function (id) { var target = $(id); this._selectDate(target, ""); }, _selectDate: function (id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]); dateStr = (dateStr != null ? dateStr : this._formatDate(inst)); if (inst.input) { inst.input.val(dateStr); }
            this._updateAlternate(inst); onSelect = this._get(inst, "onSelect"); if (onSelect) { onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]); } else if (inst.input) { inst.input.trigger("change"); }
            if (inst.inline) { this._updateDatepicker(inst); } else {
                this._hideDatepicker(); this._lastInput = inst.input[0]; if (typeof (inst.input[0]) !== "object") { inst.input.trigger("focus"); }
                this._lastInput = null;
            }
        }, _updateAlternate: function (inst) { var altFormat, date, dateStr, altField = this._get(inst, "altField"); if (altField) { altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat"); date = this._getDate(inst); dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst)); $(altField).val(dateStr); } }, noWeekends: function (date) { var day = date.getDay(); return [(day > 0 && day < 6), ""]; }, iso8601Week: function (date) { var time, checkDate = new Date(date.getTime()); checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); time = checkDate.getTime(); checkDate.setMonth(0); checkDate.setDate(1); return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1; }, parseDate: function (format, value, settings) {
            if (format == null || value == null) { throw "Invalid arguments"; }
            value = (typeof value === "object" ? value.toString() : value + ""); if (value === "") { return null; }
            var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function (match) {
                var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match); if (matches) { iFormat++; }
                return matches;
            }, getNumber = function (match) {
                var isDoubled = lookAhead(match), size = (match === "@" ? 14 : (match === "!" ? 20 : (match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))), minSize = (match === "y" ? size : 1), digits = new RegExp("^\\d{" + minSize + "," + size + "}"), num = value.substring(iValue).match(digits); if (!num) { throw "Missing number at position " + iValue; }
                iValue += num[0].length; return parseInt(num[0], 10);
            }, getName = function (match, shortNames, longNames) { var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) { return [[k, v]]; }).sort(function (a, b) { return -(a[1].length - b[1].length); }); $.each(names, function (i, pair) { var name = pair[1]; if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) { index = pair[0]; iValue += name.length; return false; } }); if (index !== -1) { return index + 1; } else { throw "Unknown name at position " + iValue; } }, checkLiteral = function () {
                if (value.charAt(iValue) !== format.charAt(iFormat)) { throw "Unexpected literal at position " + iValue; }
                iValue++;
            }; for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) { if (format.charAt(iFormat) === "'" && !lookAhead("'")) { literal = false; } else { checkLiteral(); } } else {
                    switch (format.charAt(iFormat)) {
                        case "d": day = getNumber("d"); break; case "D": getName("D", dayNamesShort, dayNames); break; case "o": doy = getNumber("o"); break; case "m": month = getNumber("m"); break; case "M": month = getName("M", monthNamesShort, monthNames); break; case "y": year = getNumber("y"); break; case "@": date = new Date(getNumber("@")); year = date.getFullYear(); month = date.getMonth() + 1; day = date.getDate(); break; case "!": date = new Date((getNumber("!") - this._ticksTo1970) / 10000); year = date.getFullYear(); month = date.getMonth() + 1; day = date.getDate(); break; case "'": if (lookAhead("'")) { checkLiteral(); } else { literal = true; }
                            break; default: checkLiteral();
                    }
                }
            }
            if (iValue < value.length) { extra = value.substr(iValue); if (!/^\s+/.test(extra)) { throw "Extra/unparsed characters found in date: " + extra; } }
            if (year === -1) { year = new Date().getFullYear(); } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                (year <= shortYearCutoff ? 0 : -100);
            }
            if (doy > -1) {
                month = 1; day = doy; do {
                    dim = this._getDaysInMonth(year, month - 1); if (day <= dim) { break; }
                    month++; day -= dim;
                } while (true);
            }
            date = this._daylightSavingAdjust(new Date(year, month - 1, day)); if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) { throw "Invalid date"; }
            return date;
        }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000), formatDate: function (format, date, settings) {
                if (!date) { return ""; }
                var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match); if (matches) { iFormat++; }
                    return matches;
                }, formatNumber = function (match, value, len) {
                    var num = "" + value; if (lookAhead(match)) { while (num.length < len) { num = "0" + num; } }
                    return num;
                }, formatName = function (match, value, shortNames, longNames) { return (lookAhead(match) ? longNames[value] : shortNames[value]); }, output = "", literal = false; if (date) {
                    for (iFormat = 0; iFormat < format.length; iFormat++) {
                        if (literal) { if (format.charAt(iFormat) === "'" && !lookAhead("'")) { literal = false; } else { output += format.charAt(iFormat); } } else {
                            switch (format.charAt(iFormat)) {
                                case "d": output += formatNumber("d", date.getDate(), 2); break; case "D": output += formatName("D", date.getDay(), dayNamesShort, dayNames); break; case "o": output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3); break; case "m": output += formatNumber("m", date.getMonth() + 1, 2); break; case "M": output += formatName("M", date.getMonth(), monthNamesShort, monthNames); break; case "y": output += (lookAhead("y") ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? "0" : "") + date.getFullYear() % 100); break; case "@": output += date.getTime(); break; case "!": output += date.getTime() * 10000 + this._ticksTo1970; break; case "'": if (lookAhead("'")) { output += "'"; } else { literal = true; }
                                    break; default: output += format.charAt(iFormat);
                            }
                        }
                    }
                }
                return output;
            }, _possibleChars: function (format) {
                var iFormat, chars = "", literal = false, lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match); if (matches) { iFormat++; }
                    return matches;
                }; for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) { if (format.charAt(iFormat) === "'" && !lookAhead("'")) { literal = false; } else { chars += format.charAt(iFormat); } } else {
                        switch (format.charAt(iFormat)) {
                            case "d": case "m": case "y": case "@": chars += "0123456789"; break; case "D": case "M": return null; case "'": if (lookAhead("'")) { chars += "'"; } else { literal = true; }
                                break; default: chars += format.charAt(iFormat);
                        }
                    }
                }
                return chars;
            }, _get: function (inst, name) { return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name]; }, _setDateFromField: function (inst, noDefault) {
                if (inst.input.val() === inst.lastVal) { return; }
                var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst); try { date = this.parseDate(dateFormat, dates, settings) || defaultDate; } catch (event) { dates = (noDefault ? "" : dates); }
                inst.selectedDay = date.getDate(); inst.drawMonth = inst.selectedMonth = date.getMonth(); inst.drawYear = inst.selectedYear = date.getFullYear(); inst.currentDay = (dates ? date.getDate() : 0); inst.currentMonth = (dates ? date.getMonth() : 0); inst.currentYear = (dates ? date.getFullYear() : 0); this._adjustInstDate(inst);
            }, _getDefaultDate: function (inst) { return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date())); }, _determineDate: function (inst, date, defaultDate) {
                var offsetNumeric = function (offset) { var date = new Date(); date.setDate(date.getDate() + offset); return date; }, offsetString = function (offset) {
                    try { return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst)); }
                    catch (e) { }
                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset); while (matches) {
                        switch (matches[2] || "d") { case "d": case "D": day += parseInt(matches[1], 10); break; case "w": case "W": day += parseInt(matches[1], 10) * 7; break; case "m": case "M": month += parseInt(matches[1], 10); day = Math.min(day, $.datepicker._getDaysInMonth(year, month)); break; case "y": case "Y": year += parseInt(matches[1], 10); day = Math.min(day, $.datepicker._getDaysInMonth(year, month)); break; }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                }, newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) : (typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime())))); newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate); if (newDate) { newDate.setHours(0); newDate.setMinutes(0); newDate.setSeconds(0); newDate.setMilliseconds(0); }
                return this._daylightSavingAdjust(newDate);
            }, _daylightSavingAdjust: function (date) {
                if (!date) { return null; }
                date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0); return date;
            }, _setDate: function (inst, date, noChange) {
                var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date())); inst.selectedDay = inst.currentDay = newDate.getDate(); inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth(); inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear(); if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) { this._notifyChange(inst); }
                this._adjustInstDate(inst); if (inst.input) { inst.input.val(clear ? "" : this._formatDate(inst)); }
            }, _getDate: function (inst) { var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay))); return startDate; }, _attachHandlers: function (inst) { var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\"); inst.dpDiv.find("[data-handler]").map(function () { var handler = { prev: function () { $.datepicker._adjustDate(id, -stepMonths, "M"); }, next: function () { $.datepicker._adjustDate(id, +stepMonths, "M"); }, hide: function () { $.datepicker._hideDatepicker(); }, today: function () { $.datepicker._gotoToday(id); }, selectDay: function () { $.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this); return false; }, selectMonth: function () { $.datepicker._selectMonthYear(id, this, "M"); return false; }, selectYear: function () { $.datepicker._selectMonthYear(id, this, "Y"); return false; } }; $(this).on(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]); }); }, _generateHTML: function (inst) {
                var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1), currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay))), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear; if (drawMonth < 0) { drawMonth += 12; drawYear--; }
                if (maxDate) { maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate())); maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw); while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) { drawMonth--; if (drawMonth < 0) { drawMonth = 11; drawYear--; } } }
                inst.drawMonth = drawMonth; inst.drawYear = drawYear; prevText = this._get(inst, "prevText"); prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst))); prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>")); nextText = this._get(inst, "nextText"); nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst))); next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : (hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>")); currentText = this._get(inst, "currentText"); gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today); currentText = (!navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst))); controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
                    this._get(inst, "closeText") + "</button>" : ""); buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
                        (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : ""; firstDay = parseInt(this._get(inst, "firstDay"), 10); firstDay = (isNaN(firstDay) ? 0 : firstDay); showWeek = this._get(inst, "showWeek"); dayNames = this._get(inst, "dayNames"); dayNamesMin = this._get(inst, "dayNamesMin"); monthNames = this._get(inst, "monthNames"); monthNamesShort = this._get(inst, "monthNamesShort"); beforeShowDay = this._get(inst, "beforeShowDay"); showOtherMonths = this._get(inst, "showOtherMonths"); selectOtherMonths = this._get(inst, "selectOtherMonths"); defaultDate = this._getDefaultDate(inst); html = ""; for (row = 0; row < numMonths[0]; row++) {
                            group = ""; this.maxRows = 4; for (col = 0; col < numMonths[1]; col++) {
                                selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay)); cornerClass = " ui-corner-all"; calender = ""; if (isMultiMonth) {
                                    calender += "<div class='ui-datepicker-group"; if (numMonths[1] > 1) { switch (col) { case 0: calender += " ui-datepicker-group-first"; cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break; case numMonths[1] - 1: calender += " ui-datepicker-group-last"; cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break; default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break; } }
                                    calender += "'>";
                                }
                                calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
                                    (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
                                    (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
                                    this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>"; thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : ""); for (dow = 0; dow < 7; dow++) { day = (dow + firstDay) % 7; thead += "<th scope='col'" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>"; }
                                calender += thead + "</tr></thead><tbody>"; daysInMonth = this._getDaysInMonth(drawYear, drawMonth); if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) { inst.selectedDay = Math.min(inst.selectedDay, daysInMonth); }
                                leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7; curRows = Math.ceil((leadDays + daysInMonth) / 7); numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); this.maxRows = numRows; printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays)); for (dRow = 0; dRow < numRows; dRow++) {
                                    calender += "<tr>"; tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
                                        this._get(inst, "calculateWeek")(printDate) + "</td>"); for (dow = 0; dow < 7; dow++) {
                                            daySettings = (beforeShowDay ? beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]); otherMonth = (printDate.getMonth() !== drawMonth); unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] || (minDate && printDate < minDate) || (maxDate && printDate > maxDate); tbody += "<td class='" +
                                                ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") +
                                                (otherMonth ? " ui-datepicker-other-month" : "") +
                                                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ? " " + this._dayOverClass : "") +
                                                (unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") +
                                                (otherMonth && !showOtherMonths ? "" : " " + daySettings[1] +
                                                    (printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") +
                                                    (printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" +
                                                ((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") +
                                                (unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" +
                                                (otherMonth && !showOtherMonths ? "&#xa0;" : (unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
                                                    (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
                                                    (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") +
                                                    (otherMonth ? " ui-priority-secondary" : "") + "' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; printDate.setDate(printDate.getDate() + 1); printDate = this._daylightSavingAdjust(printDate);
                                        }
                                    calender += tbody + "</tr>";
                                }
                                drawMonth++; if (drawMonth > 11) { drawMonth = 0; drawYear++; }
                                calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
                                    ((numMonths[0] > 0 && col === numMonths[1] - 1) ? "<div class='ui-datepicker-row-break'></div>" : "") : ""); group += calender;
                            }
                            html += group;
                        }
                html += buttonPanel; inst._keyEvent = false; return html;
            }, _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
                var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = ""; if (secondary || !changeMonth) { monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>"; } else {
                    inMinYear = (minDate && minDate.getFullYear() === drawYear); inMaxYear = (maxDate && maxDate.getFullYear() === drawYear); monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>"; for (month = 0; month < 12; month++) {
                        if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                            monthHtml += "<option value='" + month + "'" +
                            (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
                        }
                    }
                    monthHtml += "</select>";
                }
                if (!showMonthAfterYear) { html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : ""); }
                if (!inst.yearshtml) {
                    inst.yearshtml = ""; if (secondary || !changeYear) { html += "<span class='ui-datepicker-year'>" + drawYear + "</span>"; } else {
                        years = this._get(inst, "yearRange").split(":"); thisYear = new Date().getFullYear(); determineYear = function (value) { var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10))); return (isNaN(year) ? thisYear : year); }; year = determineYear(years[0]); endYear = Math.max(year, determineYear(years[1] || "")); year = (minDate ? Math.max(year, minDate.getFullYear()) : year); endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear); inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; for (; year <= endYear; year++) {
                            inst.yearshtml += "<option value='" + year + "'" +
                                (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                        }
                        inst.yearshtml += "</select>"; html += inst.yearshtml; inst.yearshtml = null;
                    }
                }
                html += this._get(inst, "yearSuffix"); if (showMonthAfterYear) { html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml; }
                html += "</div>"; return html;
            }, _adjustInstDate: function (inst, offset, period) { var year = inst.selectedYear + (period === "Y" ? offset : 0), month = inst.selectedMonth + (period === "M" ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day))); inst.selectedDay = date.getDate(); inst.drawMonth = inst.selectedMonth = date.getMonth(); inst.drawYear = inst.selectedYear = date.getFullYear(); if (period === "M" || period === "Y") { this._notifyChange(inst); } }, _restrictMinMax: function (inst, date) { var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = (minDate && date < minDate ? minDate : date); return (maxDate && newDate > maxDate ? maxDate : newDate); }, _notifyChange: function (inst) { var onChange = this._get(inst, "onChangeMonthYear"); if (onChange) { onChange.apply((inst.input ? inst.input[0] : null), [inst.selectedYear, inst.selectedMonth + 1, inst]); } }, _getNumberOfMonths: function (inst) { var numMonths = this._get(inst, "numberOfMonths"); return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths)); }, _getMinMaxDate: function (inst, minMax) { return this._determineDate(inst, this._get(inst, minMax + "Date"), null); }, _getDaysInMonth: function (year, month) { return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate(); }, _getFirstDayOfMonth: function (year, month) { return new Date(year, month, 1).getDay(); }, _canAdjustMonth: function (inst, offset, curYear, curMonth) {
                var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1)); if (offset < 0) { date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth())); }
                return this._isInRange(inst, date);
            }, _isInRange: function (inst, date) {
                var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange"); if (years) {
                    yearSplit = years.split(":"); currentYear = new Date().getFullYear(); minYear = parseInt(yearSplit[0], 10); maxYear = parseInt(yearSplit[1], 10); if (yearSplit[0].match(/[+\-].*/)) { minYear += currentYear; }
                    if (yearSplit[1].match(/[+\-].*/)) { maxYear += currentYear; }
                }
                return ((!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear));
            }, _getFormatConfig: function (inst) { var shortYearCutoff = this._get(inst, "shortYearCutoff"); shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10)); return { shortYearCutoff: shortYearCutoff, dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"), monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames") }; }, _formatDate: function (inst, day, month, year) {
                if (!day) { inst.currentDay = inst.selectedDay; inst.currentMonth = inst.selectedMonth; inst.currentYear = inst.selectedYear; }
                var date = (day ? (typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day))) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay))); return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
            }
    }); function datepicker_bindHover(dpDiv) {
        var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a"; return dpDiv.on("mouseout", selector, function () {
            $(this).removeClass("ui-state-hover"); if (this.className.indexOf("ui-datepicker-prev") !== -1) { $(this).removeClass("ui-datepicker-prev-hover"); }
            if (this.className.indexOf("ui-datepicker-next") !== -1) { $(this).removeClass("ui-datepicker-next-hover"); }
        }).on("mouseover", selector, datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"); $(this).addClass("ui-state-hover"); if (this.className.indexOf("ui-datepicker-prev") !== -1) { $(this).addClass("ui-datepicker-prev-hover"); }
            if (this.className.indexOf("ui-datepicker-next") !== -1) { $(this).addClass("ui-datepicker-next-hover"); }
        }
    }
    function datepicker_extendRemove(target, props) {
        $.extend(target, props); for (var name in props) { if (props[name] == null) { target[name] = props[name]; } }
        return target;
    }
    $.fn.datepicker = function (options) {
        if (!this.length) { return this; }
        if (!$.datepicker.initialized) { $(document).on("mousedown", $.datepicker._checkExternalClick); $.datepicker.initialized = true; }
        if ($("#" + $.datepicker._mainDivId).length === 0) { $("body").append($.datepicker.dpDiv); }
        var otherArgs = Array.prototype.slice.call(arguments, 1); if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) { return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs)); }
        if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") { return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this[0]].concat(otherArgs)); }
        return this.each(function () { typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options); });
    }; $.datepicker = new Datepicker(); $.datepicker.initialized = false; $.datepicker.uuid = new Date().getTime(); $.datepicker.version = "1.12.1"; var widgetsDatepicker = $.datepicker;/*!
 * jQuery UI Dialog 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.dialog", {
        version: "1.12.1", options: { appendTo: "body", autoOpen: true, buttons: [], classes: { "ui-dialog": "ui-corner-all", "ui-dialog-titlebar": "ui-corner-all" }, closeOnEscape: true, closeText: "Close", draggable: true, hide: null, height: "auto", maxHeight: null, maxWidth: null, minHeight: 150, minWidth: 150, modal: false, position: { my: "center", at: "center", of: window, collision: "fit", using: function (pos) { var topOffset = $(this).css(pos).offset().top; if (topOffset < 0) { $(this).css("top", pos.top - topOffset); } } }, resizable: true, show: null, title: null, width: 300, beforeClose: null, close: null, drag: null, dragStart: null, dragStop: null, focus: null, open: null, resize: null, resizeStart: null, resizeStop: null }, sizeRelatedOptions: { buttons: true, height: true, maxHeight: true, maxWidth: true, minHeight: true, minWidth: true, width: true }, resizableRelatedOptions: { maxHeight: true, maxWidth: true, minHeight: true, minWidth: true }, _create: function () {
            this.originalCss = { display: this.element[0].style.display, width: this.element[0].style.width, minHeight: this.element[0].style.minHeight, maxHeight: this.element[0].style.maxHeight, height: this.element[0].style.height }; this.originalPosition = { parent: this.element.parent(), index: this.element.parent().children().index(this.element) }; this.originalTitle = this.element.attr("title"); if (this.options.title == null && this.originalTitle != null) { this.options.title = this.originalTitle; }
            if (this.options.disabled) { this.options.disabled = false; }
            this._createWrapper(); this.element.show().removeAttr("title").appendTo(this.uiDialog); this._addClass("ui-dialog-content", "ui-widget-content"); this._createTitlebar(); this._createButtonPane(); if (this.options.draggable && $.fn.draggable) { this._makeDraggable(); }
            if (this.options.resizable && $.fn.resizable) { this._makeResizable(); }
            this._isOpen = false; this._trackFocus();
        }, _init: function () { if (this.options.autoOpen) { this.open(); } }, _appendTo: function () {
            var element = this.options.appendTo; if (element && (element.jquery || element.nodeType)) { return $(element); }
            return this.document.find(element || "body").eq(0);
        }, _destroy: function () {
            var next, originalPosition = this.originalPosition; this._untrackInstance(); this._destroyOverlay(); this.element.removeUniqueId().css(this.originalCss).detach(); this.uiDialog.remove(); if (this.originalTitle) { this.element.attr("title", this.originalTitle); }
            next = originalPosition.parent.children().eq(originalPosition.index); if (next.length && next[0] !== this.element[0]) { next.before(this.element); } else { originalPosition.parent.append(this.element); }
        }, widget: function () { return this.uiDialog; }, disable: $.noop, enable: $.noop, close: function (event) {
            var that = this; if (!this._isOpen || this._trigger("beforeClose", event) === false) { return; }
            this._isOpen = false; this._focusedElement = null; this._destroyOverlay(); this._untrackInstance(); if (!this.opener.filter(":focusable").trigger("focus").length) { $.ui.safeBlur($.ui.safeActiveElement(this.document[0])); }
            this._hide(this.uiDialog, this.options.hide, function () { that._trigger("close", event); });
        }, isOpen: function () { return this._isOpen; }, moveToTop: function () { this._moveToTop(); }, _moveToTop: function (event, silent) {
            var moved = false, zIndices = this.uiDialog.siblings(".ui-front:visible").map(function () { return +$(this).css("z-index"); }).get(), zIndexMax = Math.max.apply(null, zIndices); if (zIndexMax >= +this.uiDialog.css("z-index")) { this.uiDialog.css("z-index", zIndexMax + 1); moved = true; }
            if (moved && !silent) { this._trigger("focus", event); }
            return moved;
        }, open: function () {
            var that = this; if (this._isOpen) {
                if (this._moveToTop()) { this._focusTabbable(); }
                return;
            }
            this._isOpen = true; this.opener = $($.ui.safeActiveElement(this.document[0])); this._size(); this._position(); this._createOverlay(); this._moveToTop(null, true); if (this.overlay) { this.overlay.css("z-index", this.uiDialog.css("z-index") - 1); }
            this._show(this.uiDialog, this.options.show, function () { that._focusTabbable(); that._trigger("focus"); }); this._makeFocusTarget(); this._trigger("open");
        }, _focusTabbable: function () {
            var hasFocus = this._focusedElement; if (!hasFocus) { hasFocus = this.element.find("[autofocus]"); }
            if (!hasFocus.length) { hasFocus = this.element.find(":tabbable"); }
            if (!hasFocus.length) { hasFocus = this.uiDialogButtonPane.find(":tabbable"); }
            if (!hasFocus.length) { hasFocus = this.uiDialogTitlebarClose.filter(":tabbable"); }
            if (!hasFocus.length) { hasFocus = this.uiDialog; }
            hasFocus.eq(0).trigger("focus");
        }, _keepFocus: function (event) {
            function checkFocus() { var activeElement = $.ui.safeActiveElement(this.document[0]), isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement); if (!isActive) { this._focusTabbable(); } }
            event.preventDefault(); checkFocus.call(this); this._delay(checkFocus);
        }, _createWrapper: function () {
            this.uiDialog = $("<div>").hide().attr({ tabIndex: -1, role: "dialog" }).appendTo(this._appendTo()); this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"); this._on(this.uiDialog, {
                keydown: function (event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) { event.preventDefault(); this.close(event); return; }
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) { return; }
                    var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last"); if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) { this._delay(function () { first.trigger("focus"); }); event.preventDefault(); } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) { this._delay(function () { last.trigger("focus"); }); event.preventDefault(); }
                }, mousedown: function (event) { if (this._moveToTop(event)) { this._focusTabbable(); } }
            }); if (!this.element.find("[aria-describedby]").length) { this.uiDialog.attr({ "aria-describedby": this.element.uniqueId().attr("id") }); }
        }, _createTitlebar: function () { var uiDialogTitle; this.uiDialogTitlebar = $("<div>"); this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"); this._on(this.uiDialogTitlebar, { mousedown: function (event) { if (!$(event.target).closest(".ui-dialog-titlebar-close")) { this.uiDialog.trigger("focus"); } } }); this.uiDialogTitlebarClose = $("<button type='button'></button>").button({ label: $("<a>").text(this.options.closeText).html(), icon: "ui-icon-closethick", showLabel: false }).appendTo(this.uiDialogTitlebar); this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"); this._on(this.uiDialogTitlebarClose, { click: function (event) { event.preventDefault(); this.close(event); } }); uiDialogTitle = $("<span>").uniqueId().prependTo(this.uiDialogTitlebar); this._addClass(uiDialogTitle, "ui-dialog-title"); this._title(uiDialogTitle); this.uiDialogTitlebar.prependTo(this.uiDialog); this.uiDialog.attr({ "aria-labelledby": uiDialogTitle.attr("id") }); }, _title: function (title) { if (this.options.title) { title.text(this.options.title); } else { title.html("&#160;"); } }, _createButtonPane: function () { this.uiDialogButtonPane = $("<div>"); this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"); this.uiButtonSet = $("<div>").appendTo(this.uiDialogButtonPane); this._addClass(this.uiButtonSet, "ui-dialog-buttonset"); this._createButtons(); }, _createButtons: function () {
            var that = this, buttons = this.options.buttons; this.uiDialogButtonPane.remove(); this.uiButtonSet.empty(); if ($.isEmptyObject(buttons) || ($.isArray(buttons) && !buttons.length)) { this._removeClass(this.uiDialog, "ui-dialog-buttons"); return; }
            $.each(buttons, function (name, props) {
                var click, buttonOptions; props = $.isFunction(props) ? { click: props, text: name } : props; props = $.extend({ type: "button" }, props); click = props.click; buttonOptions = { icon: props.icon, iconPosition: props.iconPosition, showLabel: props.showLabel, icons: props.icons, text: props.text }; delete props.click; delete props.icon; delete props.iconPosition; delete props.showLabel; delete props.icons; if (typeof props.text === "boolean") { delete props.text; }
                $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet).on("click", function () { click.apply(that.element[0], arguments); });
            }); this._addClass(this.uiDialog, "ui-dialog-buttons"); this.uiDialogButtonPane.appendTo(this.uiDialog);
        }, _makeDraggable: function () {
            var that = this, options = this.options; function filteredUi(ui) { return { position: ui.position, offset: ui.offset }; }
            this.uiDialog.draggable({ cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function (event, ui) { that._addClass($(this), "ui-dialog-dragging"); that._blockFrames(); that._trigger("dragStart", event, filteredUi(ui)); }, drag: function (event, ui) { that._trigger("drag", event, filteredUi(ui)); }, stop: function (event, ui) { var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop(); options.position = { my: "left top", at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top, of: that.window }; that._removeClass($(this), "ui-dialog-dragging"); that._unblockFrames(); that._trigger("dragStop", event, filteredUi(ui)); } });
        }, _makeResizable: function () {
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css("position"), resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw"; function filteredUi(ui) { return { originalPosition: ui.originalPosition, originalSize: ui.originalSize, position: ui.position, size: ui.size }; }
            this.uiDialog.resizable({ cancel: ".ui-dialog-content", containment: "document", alsoResize: this.element, maxWidth: options.maxWidth, maxHeight: options.maxHeight, minWidth: options.minWidth, minHeight: this._minHeight(), handles: resizeHandles, start: function (event, ui) { that._addClass($(this), "ui-dialog-resizing"); that._blockFrames(); that._trigger("resizeStart", event, filteredUi(ui)); }, resize: function (event, ui) { that._trigger("resize", event, filteredUi(ui)); }, stop: function (event, ui) { var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop(); options.height = that.uiDialog.height(); options.width = that.uiDialog.width(); options.position = { my: "left top", at: "left" + (left >= 0 ? "+" : "") + left + " " + "top" + (top >= 0 ? "+" : "") + top, of: that.window }; that._removeClass($(this), "ui-dialog-resizing"); that._unblockFrames(); that._trigger("resizeStop", event, filteredUi(ui)); } }).css("position", position);
        }, _trackFocus: function () { this._on(this.widget(), { focusin: function (event) { this._makeFocusTarget(); this._focusedElement = $(event.target); } }); }, _makeFocusTarget: function () { this._untrackInstance(); this._trackingInstances().unshift(this); }, _untrackInstance: function () { var instances = this._trackingInstances(), exists = $.inArray(this, instances); if (exists !== -1) { instances.splice(exists, 1); } }, _trackingInstances: function () {
            var instances = this.document.data("ui-dialog-instances"); if (!instances) { instances = []; this.document.data("ui-dialog-instances", instances); }
            return instances;
        }, _minHeight: function () { var options = this.options; return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height); }, _position: function () {
            var isVisible = this.uiDialog.is(":visible"); if (!isVisible) { this.uiDialog.show(); }
            this.uiDialog.position(this.options.position); if (!isVisible) { this.uiDialog.hide(); }
        }, _setOptions: function (options) {
            var that = this, resize = false, resizableOptions = {}; $.each(options, function (key, value) {
                that._setOption(key, value); if (key in that.sizeRelatedOptions) { resize = true; }
                if (key in that.resizableRelatedOptions) { resizableOptions[key] = value; }
            }); if (resize) { this._size(); this._position(); }
            if (this.uiDialog.is(":data(ui-resizable)")) { this.uiDialog.resizable("option", resizableOptions); }
        }, _setOption: function (key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog; if (key === "disabled") { return; }
            this._super(key, value); if (key === "appendTo") { this.uiDialog.appendTo(this._appendTo()); }
            if (key === "buttons") { this._createButtons(); }
            if (key === "closeText") { this.uiDialogTitlebarClose.button({ label: $("<a>").text("" + this.options.closeText).html() }); }
            if (key === "draggable") {
                isDraggable = uiDialog.is(":data(ui-draggable)"); if (isDraggable && !value) { uiDialog.draggable("destroy"); }
                if (!isDraggable && value) { this._makeDraggable(); }
            }
            if (key === "position") { this._position(); }
            if (key === "resizable") {
                isResizable = uiDialog.is(":data(ui-resizable)"); if (isResizable && !value) { uiDialog.resizable("destroy"); }
                if (isResizable && typeof value === "string") { uiDialog.resizable("option", "handles", value); }
                if (!isResizable && value !== false) { this._makeResizable(); }
            }
            if (key === "title") { this._title(this.uiDialogTitlebar.find(".ui-dialog-title")); }
        }, _size: function () {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options; this.element.show().css({ width: "auto", minHeight: 0, maxHeight: "none", height: 0 }); if (options.minWidth > options.width) { options.width = options.minWidth; }
            nonContentHeight = this.uiDialog.css({ height: "auto", width: options.width }).outerHeight(); minContentHeight = Math.max(0, options.minHeight - nonContentHeight); maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none"; if (options.height === "auto") { this.element.css({ minHeight: minContentHeight, maxHeight: maxContentHeight, height: "auto" }); } else { this.element.height(Math.max(0, options.height - nonContentHeight)); }
            if (this.uiDialog.is(":data(ui-resizable)")) { this.uiDialog.resizable("option", "minHeight", this._minHeight()); }
        }, _blockFrames: function () { this.iframeBlocks = this.document.find("iframe").map(function () { var iframe = $(this); return $("<div>").css({ position: "absolute", width: iframe.outerWidth(), height: iframe.outerHeight() }).appendTo(iframe.parent()).offset(iframe.offset())[0]; }); }, _unblockFrames: function () { if (this.iframeBlocks) { this.iframeBlocks.remove(); delete this.iframeBlocks; } }, _allowInteraction: function (event) {
            if ($(event.target).closest(".ui-dialog").length) { return true; }
            return !!$(event.target).closest(".ui-datepicker").length;
        }, _createOverlay: function () {
            if (!this.options.modal) { return; }
            var isOpening = true; this._delay(function () { isOpening = false; }); if (!this.document.data("ui-dialog-overlays")) {
                this._on(this.document, {
                    focusin: function (event) {
                        if (isOpening) { return; }
                        if (!this._allowInteraction(event)) { event.preventDefault(); this._trackingInstances()[0]._focusTabbable(); }
                    }
                });
            }
            this.overlay = $("<div>").appendTo(this._appendTo()); this._addClass(this.overlay, null, "ui-widget-overlay ui-front"); this._on(this.overlay, { mousedown: "_keepFocus" }); this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
        }, _destroyOverlay: function () {
            if (!this.options.modal) { return; }
            if (this.overlay) {
                var overlays = this.document.data("ui-dialog-overlays") - 1; if (!overlays) { this._off(this.document, "focusin"); this.document.removeData("ui-dialog-overlays"); } else { this.document.data("ui-dialog-overlays", overlays); }
                this.overlay.remove(); this.overlay = null;
            }
        }
    }); if ($.uiBackCompat !== false) {
        $.widget("ui.dialog", $.ui.dialog, {
            options: { dialogClass: "" }, _createWrapper: function () { this._super(); this.uiDialog.addClass(this.options.dialogClass); }, _setOption: function (key, value) {
                if (key === "dialogClass") { this.uiDialog.removeClass(this.options.dialogClass).addClass(value); }
                this._superApply(arguments);
            }
        });
    }
    var widgetsDialog = $.ui.dialog;/*!
 * jQuery UI Progressbar 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsProgressbar = $.widget("ui.progressbar", {
        version: "1.12.1", options: { classes: { "ui-progressbar": "ui-corner-all", "ui-progressbar-value": "ui-corner-left", "ui-progressbar-complete": "ui-corner-right" }, max: 100, value: 0, change: null, complete: null }, min: 0, _create: function () { this.oldValue = this.options.value = this._constrainedValue(); this.element.attr({ role: "progressbar", "aria-valuemin": this.min }); this._addClass("ui-progressbar", "ui-widget ui-widget-content"); this.valueDiv = $("<div>").appendTo(this.element); this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header"); this._refreshValue(); }, _destroy: function () { this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"); this.valueDiv.remove(); }, value: function (newValue) {
            if (newValue === undefined) { return this.options.value; }
            this.options.value = this._constrainedValue(newValue); this._refreshValue();
        }, _constrainedValue: function (newValue) {
            if (newValue === undefined) { newValue = this.options.value; }
            this.indeterminate = newValue === false; if (typeof newValue !== "number") { newValue = 0; }
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
        }, _setOptions: function (options) { var value = options.value; delete options.value; this._super(options); this.options.value = this._constrainedValue(value); this._refreshValue(); }, _setOption: function (key, value) {
            if (key === "max") { value = Math.max(this.min, value); }
            this._super(key, value);
        }, _setOptionDisabled: function (value) { this._super(value); this.element.attr("aria-disabled", value); this._toggleClass(null, "ui-state-disabled", !!value); }, _percentage: function () { return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min); }, _refreshValue: function () {
            var value = this.options.value, percentage = this._percentage(); this.valueDiv.toggle(this.indeterminate || value > this.min).width(percentage.toFixed(0) + "%"); this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, value === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate); if (this.indeterminate) { this.element.removeAttr("aria-valuenow"); if (!this.overlayDiv) { this.overlayDiv = $("<div>").appendTo(this.valueDiv); this._addClass(this.overlayDiv, "ui-progressbar-overlay"); } } else { this.element.attr({ "aria-valuemax": this.options.max, "aria-valuenow": value }); if (this.overlayDiv) { this.overlayDiv.remove(); this.overlayDiv = null; } }
            if (this.oldValue !== value) { this.oldValue = value; this._trigger("change"); }
            if (value === this.options.max) { this._trigger("complete"); }
        }
    });/*!
 * jQuery UI Selectmenu 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsSelectmenu = $.widget("ui.selectmenu", [$.ui.formResetMixin, {
        version: "1.12.1", defaultElement: "<select>", options: { appendTo: null, classes: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" }, disabled: null, icons: { button: "ui-icon-triangle-1-s" }, position: { my: "left top", at: "left bottom", collision: "none" }, width: false, change: null, close: null, focus: null, open: null, select: null }, _create: function () { var selectmenuId = this.element.uniqueId().attr("id"); this.ids = { element: selectmenuId, button: selectmenuId + "-button", menu: selectmenuId + "-menu" }; this._drawButton(); this._drawMenu(); this._bindFormResetHandler(); this._rendered = false; this.menuItems = $(); }, _drawButton: function () {
            var icon, that = this, item = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex); this.labels = this.element.labels().attr("for", this.ids.button); this._on(this.labels, { click: function (event) { this.button.focus(); event.preventDefault(); } }); this.element.hide(); this.button = $("<span>", { tabindex: this.options.disabled ? -1 : 0, id: this.ids.button, role: "combobox", "aria-expanded": "false", "aria-autocomplete": "list", "aria-owns": this.ids.menu, "aria-haspopup": "true", title: this.element.attr("title") }).insertAfter(this.element); this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget"); icon = $("<span>").appendTo(this.button); this._addClass(icon, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button); this.buttonItem = this._renderButtonItem(item).appendTo(this.button); if (this.options.width !== false) { this._resizeButton(); }
            this._on(this.button, this._buttonEvents); this.button.one("focusin", function () { if (!that._rendered) { that._refreshMenu(); } });
        }, _drawMenu: function () {
            var that = this; this.menu = $("<ul>", { "aria-hidden": "true", "aria-labelledby": this.ids.button, id: this.ids.menu }); this.menuWrap = $("<div>").append(this.menu); this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front"); this.menuWrap.appendTo(this._appendTo()); this.menuInstance = this.menu.menu({
                classes: { "ui-menu": "ui-corner-bottom" }, role: "listbox", select: function (event, ui) { event.preventDefault(); that._setSelection(); that._select(ui.item.data("ui-selectmenu-item"), event); }, focus: function (event, ui) {
                    var item = ui.item.data("ui-selectmenu-item"); if (that.focusIndex != null && item.index !== that.focusIndex) { that._trigger("focus", event, { item: item }); if (!that.isOpen) { that._select(item, event); } }
                    that.focusIndex = item.index; that.button.attr("aria-activedescendant", that.menuItems.eq(item.index).attr("id"));
                }
            }).menu("instance"); this.menuInstance._off(this.menu, "mouseleave"); this.menuInstance._closeOnDocumentClick = function () { return false; }; this.menuInstance._isDivider = function () { return false; };
        }, refresh: function () { this._refreshMenu(); this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {})); if (this.options.width === null) { this._resizeButton(); } }, _refreshMenu: function () {
            var item, options = this.element.find("option"); this.menu.empty(); this._parseOptions(options); this._renderMenu(this.menu, this.items); this.menuInstance.refresh(); this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"); this._rendered = true; if (!options.length) { return; }
            item = this._getSelectedItem(); this.menuInstance.focus(null, item); this._setAria(item.data("ui-selectmenu-item")); this._setOption("disabled", this.element.prop("disabled"));
        }, open: function (event) {
            if (this.options.disabled) { return; }
            if (!this._rendered) { this._refreshMenu(); } else { this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active"); this.menuInstance.focus(null, this._getSelectedItem()); }
            if (!this.menuItems.length) { return; }
            this.isOpen = true; this._toggleAttr(); this._resizeMenu(); this._position(); this._on(this.document, this._documentClick); this._trigger("open", event);
        }, _position: function () { this.menuWrap.position($.extend({ of: this.button }, this.options.position)); }, close: function (event) {
            if (!this.isOpen) { return; }
            this.isOpen = false; this._toggleAttr(); this.range = null; this._off(this.document); this._trigger("close", event);
        }, widget: function () { return this.button; }, menuWidget: function () { return this.menu; }, _renderButtonItem: function (item) { var buttonItem = $("<span>"); this._setText(buttonItem, item.label); this._addClass(buttonItem, "ui-selectmenu-text"); return buttonItem; }, _renderMenu: function (ul, items) {
            var that = this, currentOptgroup = ""; $.each(items, function (index, item) {
                var li; if (item.optgroup !== currentOptgroup) {
                    li = $("<li>", { text: item.optgroup }); that._addClass(li, "ui-selectmenu-optgroup", "ui-menu-divider" +
                        (item.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : "")); li.appendTo(ul); currentOptgroup = item.optgroup;
                }
                that._renderItemData(ul, item);
            });
        }, _renderItemData: function (ul, item) { return this._renderItem(ul, item).data("ui-selectmenu-item", item); }, _renderItem: function (ul, item) {
            var li = $("<li>"), wrapper = $("<div>", { title: item.element.attr("title") }); if (item.disabled) { this._addClass(li, null, "ui-state-disabled"); }
            this._setText(wrapper, item.label); return li.append(wrapper).appendTo(ul);
        }, _setText: function (element, value) { if (value) { element.text(value); } else { element.html("&#160;"); } }, _move: function (direction, event) {
            var item, next, filter = ".ui-menu-item"; if (this.isOpen) { item = this.menuItems.eq(this.focusIndex).parent("li"); } else { item = this.menuItems.eq(this.element[0].selectedIndex).parent("li"); filter += ":not(.ui-state-disabled)"; }
            if (direction === "first" || direction === "last") { next = item[direction === "first" ? "prevAll" : "nextAll"](filter).eq(-1); } else { next = item[direction + "All"](filter).eq(0); }
            if (next.length) { this.menuInstance.focus(event, next); }
        }, _getSelectedItem: function () { return this.menuItems.eq(this.element[0].selectedIndex).parent("li"); }, _toggle: function (event) { this[this.isOpen ? "close" : "open"](event); }, _setSelection: function () {
            var selection; if (!this.range) { return; }
            if (window.getSelection) { selection = window.getSelection(); selection.removeAllRanges(); selection.addRange(this.range); } else { this.range.select(); }
            this.button.focus();
        }, _documentClick: {
            mousedown: function (event) {
                if (!this.isOpen) { return; }
                if (!$(event.target).closest(".ui-selectmenu-menu, #" +
                    $.ui.escapeSelector(this.ids.button)).length) { this.close(event); }
            }
        }, _buttonEvents: {
            mousedown: function () { var selection; if (window.getSelection) { selection = window.getSelection(); if (selection.rangeCount) { this.range = selection.getRangeAt(0); } } else { this.range = document.selection.createRange(); } }, click: function (event) { this._setSelection(); this._toggle(event); }, keydown: function (event) {
                var preventDefault = true; switch (event.keyCode) {
                    case $.ui.keyCode.TAB: case $.ui.keyCode.ESCAPE: this.close(event); preventDefault = false; break; case $.ui.keyCode.ENTER: if (this.isOpen) { this._selectFocusedItem(event); }
                        break; case $.ui.keyCode.UP: if (event.altKey) { this._toggle(event); } else { this._move("prev", event); }
                        break; case $.ui.keyCode.DOWN: if (event.altKey) { this._toggle(event); } else { this._move("next", event); }
                        break; case $.ui.keyCode.SPACE: if (this.isOpen) { this._selectFocusedItem(event); } else { this._toggle(event); }
                        break; case $.ui.keyCode.LEFT: this._move("prev", event); break; case $.ui.keyCode.RIGHT: this._move("next", event); break; case $.ui.keyCode.HOME: case $.ui.keyCode.PAGE_UP: this._move("first", event); break; case $.ui.keyCode.END: case $.ui.keyCode.PAGE_DOWN: this._move("last", event); break; default: this.menu.trigger(event); preventDefault = false;
                }
                if (preventDefault) { event.preventDefault(); }
            }
        }, _selectFocusedItem: function (event) { var item = this.menuItems.eq(this.focusIndex).parent("li"); if (!item.hasClass("ui-state-disabled")) { this._select(item.data("ui-selectmenu-item"), event); } }, _select: function (item, event) {
            var oldIndex = this.element[0].selectedIndex; this.element[0].selectedIndex = item.index; this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(item)); this._setAria(item); this._trigger("select", event, { item: item }); if (item.index !== oldIndex) { this._trigger("change", event, { item: item }); }
            this.close(event);
        }, _setAria: function (item) { var id = this.menuItems.eq(item.index).attr("id"); this.button.attr({ "aria-labelledby": id, "aria-activedescendant": id }); this.menu.attr("aria-activedescendant", id); }, _setOption: function (key, value) {
            if (key === "icons") { var icon = this.button.find("span.ui-icon"); this._removeClass(icon, null, this.options.icons.button)._addClass(icon, null, value.button); }
            this._super(key, value); if (key === "appendTo") { this.menuWrap.appendTo(this._appendTo()); }
            if (key === "width") { this._resizeButton(); }
        }, _setOptionDisabled: function (value) { this._super(value); this.menuInstance.option("disabled", value); this.button.attr("aria-disabled", value); this._toggleClass(this.button, null, "ui-state-disabled", value); this.element.prop("disabled", value); if (value) { this.button.attr("tabindex", -1); this.close(); } else { this.button.attr("tabindex", 0); } }, _appendTo: function () {
            var element = this.options.appendTo; if (element) { element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0); }
            if (!element || !element[0]) { element = this.element.closest(".ui-front, dialog"); }
            if (!element.length) { element = this.document[0].body; }
            return element;
        }, _toggleAttr: function () {
            this.button.attr("aria-expanded", this.isOpen); this._removeClass(this.button, "ui-selectmenu-button-" +
                (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" +
                    (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen); this.menu.attr("aria-hidden", !this.isOpen);
        }, _resizeButton: function () {
            var width = this.options.width; if (width === false) { this.button.css("width", ""); return; }
            if (width === null) { width = this.element.show().outerWidth(); this.element.hide(); }
            this.button.outerWidth(width);
        }, _resizeMenu: function () { this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1)); }, _getCreateOptions: function () { var options = this._super(); options.disabled = this.element.prop("disabled"); return options; }, _parseOptions: function (options) { var that = this, data = []; options.each(function (index, item) { data.push(that._parseOption($(item), index)); }); this.items = data; }, _parseOption: function (option, index) { var optgroup = option.parent("optgroup"); return { element: option, index: index, value: option.val(), label: option.text(), optgroup: optgroup.attr("label") || "", disabled: optgroup.prop("disabled") || option.prop("disabled") }; }, _destroy: function () { this._unbindFormResetHandler(); this.menuWrap.remove(); this.button.remove(); this.element.show(); this.element.removeUniqueId(); this.labels.attr("for", this.ids.element); }
    }]);/*!
 * jQuery UI Slider 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var widgetsSlider = $.widget("ui.slider", $.ui.mouse, {
        version: "1.12.1", widgetEventPrefix: "slide", options: { animate: false, classes: { "ui-slider": "ui-corner-all", "ui-slider-handle": "ui-corner-all", "ui-slider-range": "ui-corner-all ui-widget-header" }, distance: 0, max: 100, min: 0, orientation: "horizontal", range: false, step: 1, value: 0, values: null, change: null, slide: null, start: null, stop: null }, numPages: 5, _create: function () { this._keySliding = false; this._mouseSliding = false; this._animateOff = true; this._handleIndex = null; this._detectOrientation(); this._mouseInit(); this._calculateNewMax(); this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content"); this._refresh(); this._animateOff = false; }, _refresh: function () { this._createRange(); this._createHandles(); this._setupEvents(); this._refreshValue(); }, _createHandles: function () {
            var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle"), handle = "<span tabindex='0'></span>", handles = []; handleCount = (options.values && options.values.length) || 1; if (existingHandles.length > handleCount) { existingHandles.slice(handleCount).remove(); existingHandles = existingHandles.slice(0, handleCount); }
            for (i = existingHandles.length; i < handleCount; i++) { handles.push(handle); }
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element)); this._addClass(this.handles, "ui-slider-handle", "ui-state-default"); this.handle = this.handles.eq(0); this.handles.each(function (i) { $(this).data("ui-slider-handle-index", i).attr("tabIndex", 0); });
        }, _createRange: function () {
            var options = this.options; if (options.range) {
                if (options.range === true) { if (!options.values) { options.values = [this._valueMin(), this._valueMin()]; } else if (options.values.length && options.values.length !== 2) { options.values = [options.values[0], options.values[0]]; } else if ($.isArray(options.values)) { options.values = options.values.slice(0); } }
                if (!this.range || !this.range.length) { this.range = $("<div>").appendTo(this.element); this._addClass(this.range, "ui-slider-range"); } else { this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max"); this.range.css({ "left": "", "bottom": "" }); }
                if (options.range === "min" || options.range === "max") { this._addClass(this.range, "ui-slider-range-" + options.range); }
            } else {
                if (this.range) { this.range.remove(); }
                this.range = null;
            }
        }, _setupEvents: function () { this._off(this.handles); this._on(this.handles, this._handleEvents); this._hoverable(this.handles); this._focusable(this.handles); }, _destroy: function () {
            this.handles.remove(); if (this.range) { this.range.remove(); }
            this._mouseDestroy();
        }, _mouseCapture: function (event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options; if (o.disabled) { return false; }
            this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }; this.elementOffset = this.element.offset(); position = { x: event.pageX, y: event.pageY }; normValue = this._normValueFromMouse(position); distance = this._valueMax() - this._valueMin() + 1; this.handles.each(function (i) { var thisDistance = Math.abs(normValue - that.values(i)); if ((distance > thisDistance) || (distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min))) { distance = thisDistance; closestHandle = $(this); index = i; } }); allowed = this._start(event, index); if (allowed === false) { return false; }
            this._mouseSliding = true; this._handleIndex = index; this._addClass(closestHandle, null, "ui-state-active"); closestHandle.trigger("focus"); offset = closestHandle.offset(); mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle"); this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
                left: event.pageX - offset.left - (closestHandle.width() / 2), top: event.pageY - offset.top -
                    (closestHandle.height() / 2) -
                    (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) -
                    (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) +
                    (parseInt(closestHandle.css("marginTop"), 10) || 0)
            }; if (!this.handles.hasClass("ui-state-hover")) { this._slide(event, index, normValue); }
            this._animateOff = true; return true;
        }, _mouseStart: function () { return true; }, _mouseDrag: function (event) { var position = { x: event.pageX, y: event.pageY }, normValue = this._normValueFromMouse(position); this._slide(event, this._handleIndex, normValue); return false; }, _mouseStop: function (event) { this._removeClass(this.handles, null, "ui-state-active"); this._mouseSliding = false; this._stop(event, this._handleIndex); this._change(event, this._handleIndex); this._handleIndex = null; this._clickOffset = null; this._animateOff = false; return false; }, _detectOrientation: function () { this.orientation = (this.options.orientation === "vertical") ? "vertical" : "horizontal"; }, _normValueFromMouse: function (position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse; if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width; pixelMouse = position.x - this.elementOffset.left -
                    (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height; pixelMouse = position.y - this.elementOffset.top -
                    (this._clickOffset ? this._clickOffset.top : 0);
            }
            percentMouse = (pixelMouse / pixelTotal); if (percentMouse > 1) { percentMouse = 1; }
            if (percentMouse < 0) { percentMouse = 0; }
            if (this.orientation === "vertical") { percentMouse = 1 - percentMouse; }
            valueTotal = this._valueMax() - this._valueMin(); valueMouse = this._valueMin() + percentMouse * valueTotal; return this._trimAlignValue(valueMouse);
        }, _uiHash: function (index, value, values) {
            var uiHash = { handle: this.handles[index], handleIndex: index, value: value !== undefined ? value : this.value() }; if (this._hasMultipleValues()) { uiHash.value = value !== undefined ? value : this.values(index); uiHash.values = values || this.values(); }
            return uiHash;
        }, _hasMultipleValues: function () { return this.options.values && this.options.values.length; }, _start: function (event, index) { return this._trigger("start", event, this._uiHash(index)); }, _slide: function (event, index, newVal) {
            var allowed, otherVal, currentValue = this.value(), newValues = this.values(); if (this._hasMultipleValues()) {
                otherVal = this.values(index ? 0 : 1); currentValue = this.values(index); if (this.options.values.length === 2 && this.options.range === true) { newVal = index === 0 ? Math.min(otherVal, newVal) : Math.max(otherVal, newVal); }
                newValues[index] = newVal;
            }
            if (newVal === currentValue) { return; }
            allowed = this._trigger("slide", event, this._uiHash(index, newVal, newValues)); if (allowed === false) { return; }
            if (this._hasMultipleValues()) { this.values(index, newVal); } else { this.value(newVal); }
        }, _stop: function (event, index) { this._trigger("stop", event, this._uiHash(index)); }, _change: function (event, index) { if (!this._keySliding && !this._mouseSliding) { this._lastChangedValue = index; this._trigger("change", event, this._uiHash(index)); } }, value: function (newValue) {
            if (arguments.length) { this.options.value = this._trimAlignValue(newValue); this._refreshValue(); this._change(null, 0); return; }
            return this._value();
        }, values: function (index, newValue) {
            var vals, newValues, i; if (arguments.length > 1) { this.options.values[index] = this._trimAlignValue(newValue); this._refreshValue(); this._change(null, index); return; }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values; newValues = arguments[0]; for (i = 0; i < vals.length; i += 1) { vals[i] = this._trimAlignValue(newValues[i]); this._change(null, i); }
                    this._refreshValue();
                } else { if (this._hasMultipleValues()) { return this._values(index); } else { return this.value(); } }
            } else { return this._values(); }
        }, _setOption: function (key, value) {
            var i, valsLength = 0; if (key === "range" && this.options.range === true) { if (value === "min") { this.options.value = this._values(0); this.options.values = null; } else if (value === "max") { this.options.value = this._values(this.options.values.length - 1); this.options.values = null; } }
            if ($.isArray(this.options.values)) { valsLength = this.options.values.length; }
            this._super(key, value); switch (key) {
                case "orientation": this._detectOrientation(); this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation); this._refreshValue(); if (this.options.range) { this._refreshRange(value); }
                    this.handles.css(value === "horizontal" ? "bottom" : "left", ""); break; case "value": this._animateOff = true; this._refreshValue(); this._change(null, 0); this._animateOff = false; break; case "values": this._animateOff = true; this._refreshValue(); for (i = valsLength - 1; i >= 0; i--) { this._change(null, i); }
                    this._animateOff = false; break; case "step": case "min": case "max": this._animateOff = true; this._calculateNewMax(); this._refreshValue(); this._animateOff = false; break; case "range": this._animateOff = true; this._refresh(); this._animateOff = false; break;
            }
        }, _setOptionDisabled: function (value) { this._super(value); this._toggleClass(null, "ui-state-disabled", !!value); }, _value: function () { var val = this.options.value; val = this._trimAlignValue(val); return val; }, _values: function (index) {
            var val, vals, i; if (arguments.length) { val = this.options.values[index]; val = this._trimAlignValue(val); return val; } else if (this._hasMultipleValues()) {
                vals = this.options.values.slice(); for (i = 0; i < vals.length; i += 1) { vals[i] = this._trimAlignValue(vals[i]); }
                return vals;
            } else { return []; }
        }, _trimAlignValue: function (val) {
            if (val <= this._valueMin()) { return this._valueMin(); }
            if (val >= this._valueMax()) { return this._valueMax(); }
            var step = (this.options.step > 0) ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep; if (Math.abs(valModStep) * 2 >= step) { alignValue += (valModStep > 0) ? step : (-step); }
            return parseFloat(alignValue.toFixed(5));
        }, _calculateNewMax: function () {
            var max = this.options.max, min = this._valueMin(), step = this.options.step, aboveMin = Math.round((max - min) / step) * step; max = aboveMin + min; if (max > this.options.max) { max -= step; }
            this.max = parseFloat(max.toFixed(this._precision()));
        }, _precision: function () {
            var precision = this._precisionOf(this.options.step); if (this.options.min !== null) { precision = Math.max(precision, this._precisionOf(this.options.min)); }
            return precision;
        }, _precisionOf: function (num) { var str = num.toString(), decimal = str.indexOf("."); return decimal === -1 ? 0 : str.length - decimal - 1; }, _valueMin: function () { return this.options.min; }, _valueMax: function () { return this.max; }, _refreshRange: function (orientation) {
            if (orientation === "vertical") { this.range.css({ "width": "", "left": "" }); }
            if (orientation === "horizontal") { this.range.css({ "height": "", "bottom": "" }); }
        }, _refreshValue: function () {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = (!this._animateOff) ? o.animate : false, _set = {}; if (this._hasMultipleValues()) {
                this.handles.each(function (i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() -
                        that._valueMin()) * 100; _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%"; $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate); if (that.options.range === true) {
                            if (that.orientation === "horizontal") {
                                if (i === 0) { that.range.stop(1, 1)[animate ? "animate" : "css"]({ left: valPercent + "%" }, o.animate); }
                                if (i === 1) { that.range[animate ? "animate" : "css"]({ width: (valPercent - lastValPercent) + "%" }, { queue: false, duration: o.animate }); }
                            } else {
                                if (i === 0) { that.range.stop(1, 1)[animate ? "animate" : "css"]({ bottom: (valPercent) + "%" }, o.animate); }
                                if (i === 1) { that.range[animate ? "animate" : "css"]({ height: (valPercent - lastValPercent) + "%" }, { queue: false, duration: o.animate }); }
                            }
                        }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value(); valueMin = this._valueMin(); valueMax = this._valueMax(); valPercent = (valueMax !== valueMin) ? (value - valueMin) / (valueMax - valueMin) * 100 : 0; _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%"; this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate); if (oRange === "min" && this.orientation === "horizontal") { this.range.stop(1, 1)[animate ? "animate" : "css"]({ width: valPercent + "%" }, o.animate); }
                if (oRange === "max" && this.orientation === "horizontal") { this.range.stop(1, 1)[animate ? "animate" : "css"]({ width: (100 - valPercent) + "%" }, o.animate); }
                if (oRange === "min" && this.orientation === "vertical") { this.range.stop(1, 1)[animate ? "animate" : "css"]({ height: valPercent + "%" }, o.animate); }
                if (oRange === "max" && this.orientation === "vertical") { this.range.stop(1, 1)[animate ? "animate" : "css"]({ height: (100 - valPercent) + "%" }, o.animate); }
            }
        }, _handleEvents: {
            keydown: function (event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index"); switch (event.keyCode) {
                    case $.ui.keyCode.HOME: case $.ui.keyCode.END: case $.ui.keyCode.PAGE_UP: case $.ui.keyCode.PAGE_DOWN: case $.ui.keyCode.UP: case $.ui.keyCode.RIGHT: case $.ui.keyCode.DOWN: case $.ui.keyCode.LEFT: event.preventDefault(); if (!this._keySliding) { this._keySliding = true; this._addClass($(event.target), null, "ui-state-active"); allowed = this._start(event, index); if (allowed === false) { return; } }
                        break;
                }
                step = this.options.step; if (this._hasMultipleValues()) { curVal = newVal = this.values(index); } else { curVal = newVal = this.value(); }
                switch (event.keyCode) {
                    case $.ui.keyCode.HOME: newVal = this._valueMin(); break; case $.ui.keyCode.END: newVal = this._valueMax(); break; case $.ui.keyCode.PAGE_UP: newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / this.numPages)); break; case $.ui.keyCode.PAGE_DOWN: newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / this.numPages)); break; case $.ui.keyCode.UP: case $.ui.keyCode.RIGHT: if (curVal === this._valueMax()) { return; }
                        newVal = this._trimAlignValue(curVal + step); break; case $.ui.keyCode.DOWN: case $.ui.keyCode.LEFT: if (curVal === this._valueMin()) { return; }
                        newVal = this._trimAlignValue(curVal - step); break;
                }
                this._slide(event, index, newVal);
            }, keyup: function (event) { var index = $(event.target).data("ui-slider-handle-index"); if (this._keySliding) { this._keySliding = false; this._stop(event, index); this._change(event, index); this._removeClass($(event.target), null, "ui-state-active"); } }
        }
    });/*!
 * jQuery UI Spinner 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */function spinnerModifer(fn) { return function () { var previous = this.element.val(); fn.apply(this, arguments); this._refresh(); if (previous !== this.element.val()) { this._trigger("change"); } }; }
    $.widget("ui.spinner", {
        version: "1.12.1", defaultElement: "<input>", widgetEventPrefix: "spin", options: { classes: { "ui-spinner": "ui-corner-all", "ui-spinner-down": "ui-corner-br", "ui-spinner-up": "ui-corner-tr" }, culture: null, icons: { down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n" }, incremental: true, max: null, min: null, numberFormat: null, page: 10, step: 1, change: null, spin: null, start: null, stop: null }, _create: function () {
            this._setOption("max", this.options.max); this._setOption("min", this.options.min); this._setOption("step", this.options.step); if (this.value() !== "") { this._value(this.element.val(), true); }
            this._draw(); this._on(this._events); this._refresh(); this._on(this.window, { beforeunload: function () { this.element.removeAttr("autocomplete"); } });
        }, _getCreateOptions: function () { var options = this._super(); var element = this.element; $.each(["min", "max", "step"], function (i, option) { var value = element.attr(option); if (value != null && value.length) { options[option] = value; } }); return options; }, _events: {
            keydown: function (event) { if (this._start(event) && this._keydown(event)) { event.preventDefault(); } }, keyup: "_stop", focus: function () { this.previous = this.element.val(); }, blur: function (event) {
                if (this.cancelBlur) { delete this.cancelBlur; return; }
                this._stop(); this._refresh(); if (this.previous !== this.element.val()) { this._trigger("change", event); }
            }, mousewheel: function (event, delta) {
                if (!delta) { return; }
                if (!this.spinning && !this._start(event)) { return false; }
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event); clearTimeout(this.mousewheelTimer); this.mousewheelTimer = this._delay(function () { if (this.spinning) { this._stop(event); } }, 100); event.preventDefault();
            }, "mousedown .ui-spinner-button": function (event) {
                var previous; previous = this.element[0] === $.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val(); function checkFocus() { var isActive = this.element[0] === $.ui.safeActiveElement(this.document[0]); if (!isActive) { this.element.trigger("focus"); this.previous = previous; this._delay(function () { this.previous = previous; }); } }
                event.preventDefault(); checkFocus.call(this); this.cancelBlur = true; this._delay(function () { delete this.cancelBlur; checkFocus.call(this); }); if (this._start(event) === false) { return; }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            }, "mouseup .ui-spinner-button": "_stop", "mouseenter .ui-spinner-button": function (event) {
                if (!$(event.currentTarget).hasClass("ui-state-active")) { return; }
                if (this._start(event) === false) { return false; }
                this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
            }, "mouseleave .ui-spinner-button": "_stop"
        }, _enhance: function () { this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>"); }, _draw: function () { this._enhance(); this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content"); this._addClass("ui-spinner-input"); this.element.attr("role", "spinbutton"); this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", true).button({ classes: { "ui-button": "" } }); this._removeClass(this.buttons, "ui-corner-all"); this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up"); this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down"); this.buttons.first().button({ "icon": this.options.icons.up, "showLabel": false }); this.buttons.last().button({ "icon": this.options.icons.down, "showLabel": false }); if (this.buttons.height() > Math.ceil(this.uiSpinner.height() * 0.5) && this.uiSpinner.height() > 0) { this.uiSpinner.height(this.uiSpinner.height()); } }, _keydown: function (event) {
            var options = this.options, keyCode = $.ui.keyCode; switch (event.keyCode) { case keyCode.UP: this._repeat(null, 1, event); return true; case keyCode.DOWN: this._repeat(null, -1, event); return true; case keyCode.PAGE_UP: this._repeat(null, options.page, event); return true; case keyCode.PAGE_DOWN: this._repeat(null, -options.page, event); return true; }
            return false;
        }, _start: function (event) {
            if (!this.spinning && this._trigger("start", event) === false) { return false; }
            if (!this.counter) { this.counter = 1; }
            this.spinning = true; return true;
        }, _repeat: function (i, steps, event) { i = i || 500; clearTimeout(this.timer); this.timer = this._delay(function () { this._repeat(40, steps, event); }, i); this._spin(steps * this.options.step, event); }, _spin: function (step, event) {
            var value = this.value() || 0; if (!this.counter) { this.counter = 1; }
            value = this._adjustValue(value + step * this._increment(this.counter)); if (!this.spinning || this._trigger("spin", event, { value: value }) !== false) { this._value(value); this.counter++; }
        }, _increment: function (i) {
            var incremental = this.options.incremental; if (incremental) { return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1); }
            return 1;
        }, _precision: function () {
            var precision = this._precisionOf(this.options.step); if (this.options.min !== null) { precision = Math.max(precision, this._precisionOf(this.options.min)); }
            return precision;
        }, _precisionOf: function (num) { var str = num.toString(), decimal = str.indexOf("."); return decimal === -1 ? 0 : str.length - decimal - 1; }, _adjustValue: function (value) {
            var base, aboveMin, options = this.options; base = options.min !== null ? options.min : 0; aboveMin = value - base; aboveMin = Math.round(aboveMin / options.step) * options.step; value = base + aboveMin; value = parseFloat(value.toFixed(this._precision())); if (options.max !== null && value > options.max) { return options.max; }
            if (options.min !== null && value < options.min) { return options.min; }
            return value;
        }, _stop: function (event) {
            if (!this.spinning) { return; }
            clearTimeout(this.timer); clearTimeout(this.mousewheelTimer); this.counter = 0; this.spinning = false; this._trigger("stop", event);
        }, _setOption: function (key, value) {
            var prevValue, first, last; if (key === "culture" || key === "numberFormat") { prevValue = this._parse(this.element.val()); this.options[key] = value; this.element.val(this._format(prevValue)); return; }
            if (key === "max" || key === "min" || key === "step") { if (typeof value === "string") { value = this._parse(value); } }
            if (key === "icons") { first = this.buttons.first().find(".ui-icon"); this._removeClass(first, null, this.options.icons.up); this._addClass(first, null, value.up); last = this.buttons.last().find(".ui-icon"); this._removeClass(last, null, this.options.icons.down); this._addClass(last, null, value.down); }
            this._super(key, value);
        }, _setOptionDisabled: function (value) { this._super(value); this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!value); this.element.prop("disabled", !!value); this.buttons.button(value ? "disable" : "enable"); }, _setOptions: spinnerModifer(function (options) { this._super(options); }), _parse: function (val) {
            if (typeof val === "string" && val !== "") { val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val; }
            return val === "" || isNaN(val) ? null : val;
        }, _format: function (value) {
            if (value === "") { return ""; }
            return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
        }, _refresh: function () { this.element.attr({ "aria-valuemin": this.options.min, "aria-valuemax": this.options.max, "aria-valuenow": this._parse(this.element.val()) }); }, isValid: function () {
            var value = this.value(); if (value === null) { return false; }
            return value === this._adjustValue(value);
        }, _value: function (value, allowAny) {
            var parsed; if (value !== "") {
                parsed = this._parse(value); if (parsed !== null) {
                    if (!allowAny) { parsed = this._adjustValue(parsed); }
                    value = this._format(parsed);
                }
            }
            this.element.val(value); this._refresh();
        }, _destroy: function () { this.element.prop("disabled", false).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"); this.uiSpinner.replaceWith(this.element); }, stepUp: spinnerModifer(function (steps) { this._stepUp(steps); }), _stepUp: function (steps) { if (this._start()) { this._spin((steps || 1) * this.options.step); this._stop(); } }, stepDown: spinnerModifer(function (steps) { this._stepDown(steps); }), _stepDown: function (steps) { if (this._start()) { this._spin((steps || 1) * -this.options.step); this._stop(); } }, pageUp: spinnerModifer(function (pages) { this._stepUp((pages || 1) * this.options.page); }), pageDown: spinnerModifer(function (pages) { this._stepDown((pages || 1) * this.options.page); }), value: function (newVal) {
            if (!arguments.length) { return this._parse(this.element.val()); }
            spinnerModifer(this._value).call(this, newVal);
        }, widget: function () { return this.uiSpinner; }
    }); if ($.uiBackCompat !== false) { $.widget("ui.spinner", $.ui.spinner, { _enhance: function () { this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml()); }, _uiSpinnerHtml: function () { return "<span>"; }, _buttonHtml: function () { return "<a></a><a></a>"; } }); }
    var widgetsSpinner = $.ui.spinner;/*!
 * jQuery UI Tabs 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.tabs", {
        version: "1.12.1", delay: 300, options: { active: null, classes: { "ui-tabs": "ui-corner-all", "ui-tabs-nav": "ui-corner-all", "ui-tabs-panel": "ui-corner-bottom", "ui-tabs-tab": "ui-corner-top" }, collapsible: false, event: "click", heightStyle: "content", hide: null, show: null, activate: null, beforeActivate: null, beforeLoad: null, load: null }, _isLocal: (function () {
            var rhash = /#.*$/; return function (anchor) {
                var anchorUrl, locationUrl; anchorUrl = anchor.href.replace(rhash, ""); locationUrl = location.href.replace(rhash, ""); try { anchorUrl = decodeURIComponent(anchorUrl); } catch (error) { }
                try { locationUrl = decodeURIComponent(locationUrl); } catch (error) { }
                return anchor.hash.length > 1 && anchorUrl === locationUrl;
            };
        })(), _create: function () {
            var that = this, options = this.options; this.running = false; this._addClass("ui-tabs", "ui-widget ui-widget-content"); this._toggleClass("ui-tabs-collapsible", null, options.collapsible); this._processTabs(); options.active = this._initialActive(); if ($.isArray(options.disabled)) { options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function (li) { return that.tabs.index(li); }))).sort(); }
            if (this.options.active !== false && this.anchors.length) { this.active = this._findActive(options.active); } else { this.active = $(); }
            this._refresh(); if (this.active.length) { this.load(options.active); }
        }, _initialActive: function () {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1); if (active === null) {
                if (locationHash) { this.tabs.each(function (i, tab) { if ($(tab).attr("aria-controls") === locationHash) { active = i; return false; } }); }
                if (active === null) { active = this.tabs.index(this.tabs.filter(".ui-tabs-active")); }
                if (active === null || active === -1) { active = this.tabs.length ? 0 : false; }
            }
            if (active !== false) { active = this.tabs.index(this.tabs.eq(active)); if (active === -1) { active = collapsible ? false : 0; } }
            if (!collapsible && active === false && this.anchors.length) { active = 0; }
            return active;
        }, _getCreateEventData: function () { return { tab: this.active, panel: !this.active.length ? $() : this._getPanelForTab(this.active) }; }, _tabKeydown: function (event) {
            var focusedTab = $($.ui.safeActiveElement(this.document[0])).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = true; if (this._handlePageNav(event)) { return; }
            switch (event.keyCode) { case $.ui.keyCode.RIGHT: case $.ui.keyCode.DOWN: selectedIndex++; break; case $.ui.keyCode.UP: case $.ui.keyCode.LEFT: goingForward = false; selectedIndex--; break; case $.ui.keyCode.END: selectedIndex = this.anchors.length - 1; break; case $.ui.keyCode.HOME: selectedIndex = 0; break; case $.ui.keyCode.SPACE: event.preventDefault(); clearTimeout(this.activating); this._activate(selectedIndex); return; case $.ui.keyCode.ENTER: event.preventDefault(); clearTimeout(this.activating); this._activate(selectedIndex === this.options.active ? false : selectedIndex); return; default: return; }
            event.preventDefault(); clearTimeout(this.activating); selectedIndex = this._focusNextTab(selectedIndex, goingForward); if (!event.ctrlKey && !event.metaKey) { focusedTab.attr("aria-selected", "false"); this.tabs.eq(selectedIndex).attr("aria-selected", "true"); this.activating = this._delay(function () { this.option("active", selectedIndex); }, this.delay); }
        }, _panelKeydown: function (event) {
            if (this._handlePageNav(event)) { return; }
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) { event.preventDefault(); this.active.trigger("focus"); }
        }, _handlePageNav: function (event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) { this._activate(this._focusNextTab(this.options.active - 1, false)); return true; }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) { this._activate(this._focusNextTab(this.options.active + 1, true)); return true; }
        }, _findNextTab: function (index, goingForward) {
            var lastTabIndex = this.tabs.length - 1; function constrain() {
                if (index > lastTabIndex) { index = 0; }
                if (index < 0) { index = lastTabIndex; }
                return index;
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) { index = goingForward ? index + 1 : index - 1; }
            return index;
        }, _focusNextTab: function (index, goingForward) { index = this._findNextTab(index, goingForward); this.tabs.eq(index).trigger("focus"); return index; }, _setOption: function (key, value) {
            if (key === "active") { this._activate(value); return; }
            this._super(key, value); if (key === "collapsible") { this._toggleClass("ui-tabs-collapsible", null, value); if (!value && this.options.active === false) { this._activate(0); } }
            if (key === "event") { this._setupEvents(value); }
            if (key === "heightStyle") { this._setupHeightStyle(value); }
        }, _sanitizeSelector: function (hash) { return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""; }, refresh: function () {
            var options = this.options, lis = this.tablist.children(":has(a[href])"); options.disabled = $.map(lis.filter(".ui-state-disabled"), function (tab) { return lis.index(tab); }); this._processTabs(); if (options.active === false || !this.anchors.length) { options.active = false; this.active = $(); } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) { if (this.tabs.length === options.disabled.length) { options.active = false; this.active = $(); } else { this._activate(this._findNextTab(Math.max(0, options.active - 1), false)); } } else { options.active = this.tabs.index(this.active); }
            this._refresh();
        }, _refresh: function () { this._setOptionDisabled(this.options.disabled); this._setupEvents(this.options.event); this._setupHeightStyle(this.options.heightStyle); this.tabs.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }); this.panels.not(this._getPanelForTab(this.active)).hide().attr({ "aria-hidden": "true" }); if (!this.active.length) { this.tabs.eq(0).attr("tabIndex", 0); } else { this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }); this._addClass(this.active, "ui-tabs-active", "ui-state-active"); this._getPanelForTab(this.active).show().attr({ "aria-hidden": "false" }); } }, _processTabs: function () {
            var that = this, prevTabs = this.tabs, prevAnchors = this.anchors, prevPanels = this.panels; this.tablist = this._getList().attr("role", "tablist"); this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header"); this.tablist.on("mousedown" + this.eventNamespace, "> li", function (event) { if ($(this).is(".ui-state-disabled")) { event.preventDefault(); } }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function () { if ($(this).closest("li").is(".ui-state-disabled")) { this.blur(); } }); this.tabs = this.tablist.find("> li:has(a[href])").attr({ role: "tab", tabIndex: -1 }); this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default"); this.anchors = this.tabs.map(function () { return $("a", this)[0]; }).attr({ role: "presentation", tabIndex: -1 }); this._addClass(this.anchors, "ui-tabs-anchor"); this.panels = $(); this.anchors.each(function (i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls"); if (that._isLocal(anchor)) { selector = anchor.hash; panelId = selector.substring(1); panel = that.element.find(that._sanitizeSelector(selector)); } else {
                    panelId = tab.attr("aria-controls") || $({}).uniqueId()[0].id; selector = "#" + panelId; panel = that.element.find(selector); if (!panel.length) { panel = that._createPanel(panelId); panel.insertAfter(that.panels[i - 1] || that.tablist); }
                    panel.attr("aria-live", "polite");
                }
                if (panel.length) { that.panels = that.panels.add(panel); }
                if (originalAriaControls) { tab.data("ui-tabs-aria-controls", originalAriaControls); }
                tab.attr({ "aria-controls": panelId, "aria-labelledby": anchorId }); panel.attr("aria-labelledby", anchorId);
            }); this.panels.attr("role", "tabpanel"); this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content"); if (prevTabs) { this._off(prevTabs.not(this.tabs)); this._off(prevAnchors.not(this.anchors)); this._off(prevPanels.not(this.panels)); }
        }, _getList: function () { return this.tablist || this.element.find("ol, ul").eq(0); }, _createPanel: function (id) { return $("<div>").attr("id", id).data("ui-tabs-destroy", true); }, _setOptionDisabled: function (disabled) {
            var currentItem, li, i; if ($.isArray(disabled)) { if (!disabled.length) { disabled = false; } else if (disabled.length === this.anchors.length) { disabled = true; } }
            for (i = 0; (li = this.tabs[i]); i++) { currentItem = $(li); if (disabled === true || $.inArray(i, disabled) !== -1) { currentItem.attr("aria-disabled", "true"); this._addClass(currentItem, null, "ui-state-disabled"); } else { currentItem.removeAttr("aria-disabled"); this._removeClass(currentItem, null, "ui-state-disabled"); } }
            this.options.disabled = disabled; this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, disabled === true);
        }, _setupEvents: function (event) {
            var events = {}; if (event) { $.each(event.split(" "), function (index, eventName) { events[eventName] = "_eventHandler"; }); }
            this._off(this.anchors.add(this.tabs).add(this.panels)); this._on(true, this.anchors, { click: function (event) { event.preventDefault(); } }); this._on(this.anchors, events); this._on(this.tabs, { keydown: "_tabKeydown" }); this._on(this.panels, { keydown: "_panelKeydown" }); this._focusable(this.tabs); this._hoverable(this.tabs);
        }, _setupHeightStyle: function (heightStyle) {
            var maxHeight, parent = this.element.parent(); if (heightStyle === "fill") {
                maxHeight = parent.height(); maxHeight -= this.element.outerHeight() - this.element.height(); this.element.siblings(":visible").each(function () {
                    var elem = $(this), position = elem.css("position"); if (position === "absolute" || position === "fixed") { return; }
                    maxHeight -= elem.outerHeight(true);
                }); this.element.children().not(this.panels).each(function () { maxHeight -= $(this).outerHeight(true); }); this.panels.each(function () {
                    $(this).height(Math.max(0, maxHeight -
                        $(this).innerHeight() + $(this).height()));
                }).css("overflow", "auto");
            } else if (heightStyle === "auto") { maxHeight = 0; this.panels.each(function () { maxHeight = Math.max(maxHeight, $(this).height("").height()); }).height(maxHeight); }
        }, _eventHandler: function (event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = !active.length ? $() : this._getPanelForTab(active), eventData = { oldTab: active, oldPanel: toHide, newTab: collapsing ? $() : tab, newPanel: toShow }; event.preventDefault(); if (tab.hasClass("ui-state-disabled") || tab.hasClass("ui-tabs-loading") || this.running || (clickedIsActive && !options.collapsible) || (this._trigger("beforeActivate", event, eventData) === false)) { return; }
            options.active = collapsing ? false : this.tabs.index(tab); this.active = clickedIsActive ? $() : tab; if (this.xhr) { this.xhr.abort(); }
            if (!toHide.length && !toShow.length) { $.error("jQuery UI Tabs: Mismatching fragment identifier."); }
            if (toShow.length) { this.load(this.tabs.index(tab), event); }
            this._toggle(event, eventData);
        }, _toggle: function (event, eventData) {
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel; this.running = true; function complete() { that.running = false; that._trigger("activate", event, eventData); }
            function show() { that._addClass(eventData.newTab.closest("li"), "ui-tabs-active", "ui-state-active"); if (toShow.length && that.options.show) { that._show(toShow, that.options.show, complete); } else { toShow.show(); complete(); } }
            if (toHide.length && this.options.hide) { this._hide(toHide, this.options.hide, function () { that._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"); show(); }); } else { this._removeClass(eventData.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"); toHide.hide(); show(); }
            toHide.attr("aria-hidden", "true"); eventData.oldTab.attr({ "aria-selected": "false", "aria-expanded": "false" }); if (toShow.length && toHide.length) { eventData.oldTab.attr("tabIndex", -1); } else if (toShow.length) { this.tabs.filter(function () { return $(this).attr("tabIndex") === 0; }).attr("tabIndex", -1); }
            toShow.attr("aria-hidden", "false"); eventData.newTab.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
        }, _activate: function (index) {
            var anchor, active = this._findActive(index); if (active[0] === this.active[0]) { return; }
            if (!active.length) { active = this.active; }
            anchor = active.find(".ui-tabs-anchor")[0]; this._eventHandler({ target: anchor, currentTarget: anchor, preventDefault: $.noop });
        }, _findActive: function (index) { return index === false ? $() : this.tabs.eq(index); }, _getIndex: function (index) {
            if (typeof index === "string") {
                index = this.anchors.index(this.anchors.filter("[href$='" +
                    $.ui.escapeSelector(index) + "']"));
            }
            return index;
        }, _destroy: function () {
            if (this.xhr) { this.xhr.abort(); }
            this.tablist.removeAttr("role").off(this.eventNamespace); this.anchors.removeAttr("role tabIndex").removeUniqueId(); this.tabs.add(this.panels).each(function () { if ($.data(this, "ui-tabs-destroy")) { $(this).remove(); } else { $(this).removeAttr("role tabIndex " + "aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded"); } }); this.tabs.each(function () { var li = $(this), prev = li.data("ui-tabs-aria-controls"); if (prev) { li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls"); } else { li.removeAttr("aria-controls"); } }); this.panels.show(); if (this.options.heightStyle !== "content") { this.panels.css("height", ""); }
        }, enable: function (index) {
            var disabled = this.options.disabled; if (disabled === false) { return; }
            if (index === undefined) { disabled = false; } else { index = this._getIndex(index); if ($.isArray(disabled)) { disabled = $.map(disabled, function (num) { return num !== index ? num : null; }); } else { disabled = $.map(this.tabs, function (li, num) { return num !== index ? num : null; }); } }
            this._setOptionDisabled(disabled);
        }, disable: function (index) {
            var disabled = this.options.disabled; if (disabled === true) { return; }
            if (index === undefined) { disabled = true; } else {
                index = this._getIndex(index); if ($.inArray(index, disabled) !== -1) { return; }
                if ($.isArray(disabled)) { disabled = $.merge([index], disabled).sort(); } else { disabled = [index]; }
            }
            this._setOptionDisabled(disabled);
        }, load: function (index, event) {
            index = this._getIndex(index); var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = { tab: tab, panel: panel }, complete = function (jqXHR, status) {
                if (status === "abort") { that.panels.stop(false, true); }
                that._removeClass(tab, "ui-tabs-loading"); panel.removeAttr("aria-busy"); if (jqXHR === that.xhr) { delete that.xhr; }
            }; if (this._isLocal(anchor[0])) { return; }
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData)); if (this.xhr && this.xhr.statusText !== "canceled") { this._addClass(tab, "ui-tabs-loading"); panel.attr("aria-busy", "true"); this.xhr.done(function (response, status, jqXHR) { setTimeout(function () { panel.html(response); that._trigger("load", event, eventData); complete(jqXHR, status); }, 1); }).fail(function (jqXHR, status) { setTimeout(function () { complete(jqXHR, status); }, 1); }); }
        }, _ajaxSettings: function (anchor, event, eventData) { var that = this; return { url: anchor.attr("href").replace(/#.*$/, ""), beforeSend: function (jqXHR, settings) { return that._trigger("beforeLoad", event, $.extend({ jqXHR: jqXHR, ajaxSettings: settings }, eventData)); } }; }, _getPanelForTab: function (tab) { var id = $(tab).attr("aria-controls"); return this.element.find(this._sanitizeSelector("#" + id)); }
    }); if ($.uiBackCompat !== false) { $.widget("ui.tabs", $.ui.tabs, { _processTabs: function () { this._superApply(arguments); this._addClass(this.tabs, "ui-tab"); } }); }
    var widgetsTabs = $.ui.tabs;/*!
 * jQuery UI Tooltip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */$.widget("ui.tooltip", {
        version: "1.12.1", options: { classes: { "ui-tooltip": "ui-corner-all ui-widget-shadow" }, content: function () { var title = $(this).attr("title") || ""; return $("<a>").text(title).html(); }, hide: true, items: "[title]:not([disabled])", position: { my: "left top+15", at: "left bottom", collision: "flipfit flip" }, show: true, track: false, close: null, open: null }, _addDescribedBy: function (elem, id) { var describedby = (elem.attr("aria-describedby") || "").split(/\s+/); describedby.push(id); elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" "))); }, _removeDescribedBy: function (elem) {
            var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $.inArray(id, describedby); if (index !== -1) { describedby.splice(index, 1); }
            elem.removeData("ui-tooltip-id"); describedby = $.trim(describedby.join(" ")); if (describedby) { elem.attr("aria-describedby", describedby); } else { elem.removeAttr("aria-describedby"); }
        }, _create: function () { this._on({ mouseover: "open", focusin: "open" }); this.tooltips = {}; this.parents = {}; this.liveRegion = $("<div>").attr({ role: "log", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body); this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"); this.disabledTitles = $([]); }, _setOption: function (key, value) { var that = this; this._super(key, value); if (key === "content") { $.each(this.tooltips, function (id, tooltipData) { that._updateContent(tooltipData.element); }); } }, _setOptionDisabled: function (value) { this[value ? "_disable" : "_enable"](); }, _disable: function () { var that = this; $.each(this.tooltips, function (id, tooltipData) { var event = $.Event("blur"); event.target = event.currentTarget = tooltipData.element[0]; that.close(event, true); }); this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () { var element = $(this); if (element.is("[title]")) { return element.data("ui-tooltip-title", element.attr("title")).removeAttr("title"); } })); }, _enable: function () { this.disabledTitles.each(function () { var element = $(this); if (element.data("ui-tooltip-title")) { element.attr("title", element.data("ui-tooltip-title")); } }); this.disabledTitles = $([]); }, open: function (event) {
            var that = this, target = $(event ? event.target : this.element).closest(this.options.items); if (!target.length || target.data("ui-tooltip-id")) { return; }
            if (target.attr("title")) { target.data("ui-tooltip-title", target.attr("title")); }
            target.data("ui-tooltip-open", true); if (event && event.type === "mouseover") {
                target.parents().each(function () {
                    var parent = $(this), blurEvent; if (parent.data("ui-tooltip-open")) { blurEvent = $.Event("blur"); blurEvent.target = blurEvent.currentTarget = this; that.close(blurEvent, true); }
                    if (parent.attr("title")) { parent.uniqueId(); that.parents[this.id] = { element: this, title: parent.attr("title") }; parent.attr("title", ""); }
                });
            }
            this._registerCloseHandlers(event, target); this._updateContent(target, event);
        }, _updateContent: function (target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null; if (typeof contentOption === "string" || contentOption.nodeType || contentOption.jquery) { return this._open(event, target, contentOption); }
            content = contentOption.call(target[0], function (response) {
                that._delay(function () {
                    if (!target.data("ui-tooltip-open")) { return; }
                    if (event) { event.type = eventType; }
                    this._open(event, target, response);
                });
            }); if (content) { this._open(event, target, content); }
        }, _open: function (event, target, content) {
            var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position); if (!content) { return; }
            tooltipData = this._find(target); if (tooltipData) { tooltipData.tooltip.find(".ui-tooltip-content").html(content); return; }
            if (target.is("[title]")) { if (event && event.type === "mouseover") { target.attr("title", ""); } else { target.removeAttr("title"); } }
            tooltipData = this._tooltip(target); tooltip = tooltipData.tooltip; this._addDescribedBy(target, tooltip.attr("id")); tooltip.find(".ui-tooltip-content").html(content); this.liveRegion.children().hide(); a11yContent = $("<div>").html(tooltip.find(".ui-tooltip-content").html()); a11yContent.removeAttr("name").find("[name]").removeAttr("name"); a11yContent.removeAttr("id").find("[id]").removeAttr("id"); a11yContent.appendTo(this.liveRegion); function position(event) {
                positionOption.of = event; if (tooltip.is(":hidden")) { return; }
                tooltip.position(positionOption);
            }
            if (this.options.track && event && /^mouse/.test(event.type)) { this._on(this.document, { mousemove: position }); position(event); } else { tooltip.position($.extend({ of: target }, this.options.position)); }
            tooltip.hide(); this._show(tooltip, this.options.show); if (this.options.track && this.options.show && this.options.show.delay) { delayedShow = this.delayedShow = setInterval(function () { if (tooltip.is(":visible")) { position(positionOption.of); clearInterval(delayedShow); } }, $.fx.interval); }
            this._trigger("open", event, { tooltip: tooltip });
        }, _registerCloseHandlers: function (event, target) {
            var events = { keyup: function (event) { if (event.keyCode === $.ui.keyCode.ESCAPE) { var fakeEvent = $.Event(event); fakeEvent.currentTarget = target[0]; this.close(fakeEvent, true); } } }; if (target[0] !== this.element[0]) { events.remove = function () { this._removeTooltip(this._find(target).tooltip); }; }
            if (!event || event.type === "mouseover") { events.mouseleave = "close"; }
            if (!event || event.type === "focusin") { events.focusout = "close"; }
            this._on(true, target, events);
        }, close: function (event) {
            var tooltip, that = this, target = $(event ? event.currentTarget : this.element), tooltipData = this._find(target); if (!tooltipData) { target.removeData("ui-tooltip-open"); return; }
            tooltip = tooltipData.tooltip; if (tooltipData.closing) { return; }
            clearInterval(this.delayedShow); if (target.data("ui-tooltip-title") && !target.attr("title")) { target.attr("title", target.data("ui-tooltip-title")); }
            this._removeDescribedBy(target); tooltipData.hiding = true; tooltip.stop(true); this._hide(tooltip, this.options.hide, function () { that._removeTooltip($(this)); }); target.removeData("ui-tooltip-open"); this._off(target, "mouseleave focusout keyup"); if (target[0] !== this.element[0]) { this._off(target, "remove"); }
            this._off(this.document, "mousemove"); if (event && event.type === "mouseleave") { $.each(this.parents, function (id, parent) { $(parent.element).attr("title", parent.title); delete that.parents[id]; }); }
            tooltipData.closing = true; this._trigger("close", event, { tooltip: tooltip }); if (!tooltipData.hiding) { tooltipData.closing = false; }
        }, _tooltip: function (element) { var tooltip = $("<div>").attr("role", "tooltip"), content = $("<div>").appendTo(tooltip), id = tooltip.uniqueId().attr("id"); this._addClass(content, "ui-tooltip-content"); this._addClass(tooltip, "ui-tooltip", "ui-widget ui-widget-content"); tooltip.appendTo(this._appendTo(element)); return this.tooltips[id] = { element: element, tooltip: tooltip }; }, _find: function (target) { var id = target.data("ui-tooltip-id"); return id ? this.tooltips[id] : null; }, _removeTooltip: function (tooltip) { tooltip.remove(); delete this.tooltips[tooltip.attr("id")]; }, _appendTo: function (target) {
            var element = target.closest(".ui-front, dialog"); if (!element.length) { element = this.document[0].body; }
            return element;
        }, _destroy: function () {
            var that = this; $.each(this.tooltips, function (id, tooltipData) {
                var event = $.Event("blur"), element = tooltipData.element; event.target = event.currentTarget = element[0]; that.close(event, true); $("#" + id).remove(); if (element.data("ui-tooltip-title")) {
                    if (!element.attr("title")) { element.attr("title", element.data("ui-tooltip-title")); }
                    element.removeData("ui-tooltip-title");
                }
            }); this.liveRegion.remove();
        }
    }); if ($.uiBackCompat !== false) {
        $.widget("ui.tooltip", $.ui.tooltip, {
            options: { tooltipClass: null }, _tooltip: function () {
                var tooltipData = this._superApply(arguments); if (this.options.tooltipClass) { tooltipData.tooltip.addClass(this.options.tooltipClass); }
                return tooltipData;
            }
        });
    }
    var widgetsTooltip = $.ui.tooltip;/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var dataSpace = "ui-effects-", dataSpaceStyle = "ui-effects-style", dataSpaceAnimated = "ui-effects-animated", jQuery = $; $.effects = { effect: {} };/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */(function (jQuery, undefined) {
        var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor " + "borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (execResult) { return [execResult[1], execResult[2], execResult[3], execResult[4]]; } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (execResult) { return [execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4]]; } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function (execResult) { return [parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16)]; } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (execResult) { return [parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16)]; } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function (execResult) { return [execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4]]; } }], color = jQuery.Color = function (color, green, blue, alpha) { return new jQuery.Color.fn.parse(color, green, blue, alpha); }, spaces = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } }, propTypes = { "byte": { floor: true, max: 255 }, "percent": { max: 1 }, "degrees": { mod: 360, floor: true } }, support = color.support = {}, supportElem = jQuery("<p>")[0], colors, each = jQuery.each; supportElem.style.cssText = "background-color:rgba(1,1,1,.5)"; support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1; each(spaces, function (spaceName, space) { space.cache = "_" + spaceName; space.props.alpha = { idx: 3, type: "percent", def: 1 }; }); function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {}; if (value == null) { return (allowEmpty || !prop.def) ? null : prop.def; }
            value = type.floor ? ~~value : parseFloat(value); if (isNaN(value)) { return prop.def; }
            if (type.mod) { return (value + type.mod) % type.mod; }
            return 0 > value ? 0 : type.max < value ? type.max : value;
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = []; string = string.toLowerCase(); each(stringParsers, function (i, parser) { var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba"; if (values) { parsed = inst[spaceName](values); inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache]; rgba = inst._rgba = parsed._rgba; return false; } }); if (rgba.length) {
                if (rgba.join() === "0,0,0,0") { jQuery.extend(rgba, colors.transparent); }
                return inst;
            }
            return colors[string];
        }
        color.fn = jQuery.extend(color.prototype, {
            parse: function (red, green, blue, alpha) {
                if (red === undefined) { this._rgba = [null, null, null, null]; return this; }
                if (red.jquery || red.nodeType) { red = jQuery(red).css(green); green = undefined; }
                var inst = this, type = jQuery.type(red), rgba = this._rgba = []; if (green !== undefined) { red = [red, green, blue, alpha]; type = "array"; }
                if (type === "string") { return this.parse(stringParse(red) || colors._default); }
                if (type === "array") { each(spaces.rgba.props, function (key, prop) { rgba[prop.idx] = clamp(red[prop.idx], prop); }); return this; }
                if (type === "object") {
                    if (red instanceof color) { each(spaces, function (spaceName, space) { if (red[space.cache]) { inst[space.cache] = red[space.cache].slice(); } }); } else {
                        each(spaces, function (spaceName, space) {
                            var cache = space.cache; each(space.props, function (key, prop) {
                                if (!inst[cache] && space.to) {
                                    if (key === "alpha" || red[key] == null) { return; }
                                    inst[cache] = space.to(inst._rgba);
                                }
                                inst[cache][prop.idx] = clamp(red[key], prop, true);
                            }); if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) { inst[cache][3] = 1; if (space.from) { inst._rgba = space.from(inst[cache]); } }
                        });
                    }
                    return this;
                }
            }, is: function (compare) {
                var is = color(compare), same = true, inst = this; each(spaces, function (_, space) {
                    var localCache, isCache = is[space.cache]; if (isCache) { localCache = inst[space.cache] || space.to && space.to(inst._rgba) || []; each(space.props, function (_, prop) { if (isCache[prop.idx] != null) { same = (isCache[prop.idx] === localCache[prop.idx]); return same; } }); }
                    return same;
                }); return same;
            }, _space: function () { var used = [], inst = this; each(spaces, function (spaceName, space) { if (inst[space.cache]) { used.push(spaceName); } }); return used.pop(); }, transition: function (other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = this.alpha() === 0 ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice(); end = end[space.cache]; each(space.props, function (key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {}; if (endValue === null) { return; }
                    if (startValue === null) { result[index] = endValue; } else {
                        if (type.mod) { if (endValue - startValue > type.mod / 2) { startValue += type.mod; } else if (startValue - endValue > type.mod / 2) { startValue -= type.mod; } }
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                    }
                }); return this[spaceName](result);
            }, blend: function (opaque) {
                if (this._rgba[3] === 1) { return this; }
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba; return color(jQuery.map(rgb, function (v, i) { return (1 - a) * blend[i] + a * v; }));
            }, toRgbaString: function () {
                var prefix = "rgba(", rgba = jQuery.map(this._rgba, function (v, i) { return v == null ? (i > 2 ? 1 : 0) : v; }); if (rgba[3] === 1) { rgba.pop(); prefix = "rgb("; }
                return prefix + rgba.join() + ")";
            }, toHslaString: function () {
                var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function (v, i) {
                    if (v == null) { v = i > 2 ? 1 : 0; }
                    if (i && i < 3) { v = Math.round(v * 100) + "%"; }
                    return v;
                }); if (hsla[3] === 1) { hsla.pop(); prefix = "hsl("; }
                return prefix + hsla.join() + ")";
            }, toHexString: function (includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop(); if (includeAlpha) { rgba.push(~~(alpha * 255)); }
                return "#" + jQuery.map(rgba, function (v) { v = (v || 0).toString(16); return v.length === 1 ? "0" + v : v; }).join("");
            }, toString: function () { return this._rgba[3] === 0 ? "transparent" : this.toRgbaString(); }
        }); color.fn.parse.prototype = color.fn; function hue2rgb(p, q, h) {
            h = (h + 1) % 1; if (h * 6 < 1) { return p + (q - p) * h * 6; }
            if (h * 2 < 1) { return q; }
            if (h * 3 < 2) { return p + (q - p) * ((2 / 3) - h) * 6; }
            return p;
        }
        spaces.hsla.to = function (rgba) {
            if (rgba[0] == null || rgba[1] == null || rgba[2] == null) { return [null, null, null, rgba[3]]; }
            var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * 0.5, h, s; if (min === max) { h = 0; } else if (r === max) { h = (60 * (g - b) / diff) + 360; } else if (g === max) { h = (60 * (b - r) / diff) + 120; } else { h = (60 * (r - g) / diff) + 240; }
            if (diff === 0) { s = 0; } else if (l <= 0.5) { s = diff / add; } else { s = diff / (2 - add); }
            return [Math.round(h) % 360, s, l, a == null ? 1 : a];
        }; spaces.hsla.from = function (hsla) {
            if (hsla[0] == null || hsla[1] == null || hsla[2] == null) { return [null, null, null, hsla[3]]; }
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= 0.5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q; return [Math.round(hue2rgb(p, q, h + (1 / 3)) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - (1 / 3)) * 255), a];
        }; each(spaces, function (spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from; color.fn[spaceName] = function (value) {
                if (to && !this[cache]) { this[cache] = to(this._rgba); }
                if (value === undefined) { return this[cache].slice(); }
                var ret, type = jQuery.type(value), arr = (type === "array" || type === "object") ? value : arguments, local = this[cache].slice(); each(props, function (key, prop) {
                    var val = arr[type === "object" ? key : prop.idx]; if (val == null) { val = local[prop.idx]; }
                    local[prop.idx] = clamp(val, prop);
                }); if (from) { ret = color(from(local)); ret[cache] = local; return ret; } else { return color(local); }
            }; each(props, function (key, prop) {
                if (color.fn[key]) { return; }
                color.fn[key] = function (value) {
                    var vtype = jQuery.type(value), fn = (key === "alpha" ? (this._hsla ? "hsla" : "rgba") : spaceName), local = this[fn](), cur = local[prop.idx], match; if (vtype === "undefined") { return cur; }
                    if (vtype === "function") { value = value.call(this, cur); vtype = jQuery.type(value); }
                    if (value == null && prop.empty) { return this; }
                    if (vtype === "string") { match = rplusequals.exec(value); if (match) { value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1); } }
                    local[prop.idx] = value; return this[fn](local);
                };
            });
        }); color.hook = function (hook) {
            var hooks = hook.split(" "); each(hooks, function (i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function (elem, value) {
                        var parsed, curElem, backgroundColor = ""; if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                            value = color(parsed || value); if (!support.rgba && value._rgba[3] !== 1) {
                                curElem = hook === "backgroundColor" ? elem.parentNode : elem; while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) { try { backgroundColor = jQuery.css(curElem, "backgroundColor"); curElem = curElem.parentNode; } catch (e) { } }
                                value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
                            }
                            value = value.toRgbaString();
                        }
                        try { elem.style[hook] = value; } catch (e) { }
                    }
                }; jQuery.fx.step[hook] = function (fx) {
                    if (!fx.colorInit) { fx.start = color(fx.elem, hook); fx.end = color(fx.end); fx.colorInit = true; }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        }; color.hook(stepHooks); jQuery.cssHooks.borderColor = { expand: function (value) { var expanded = {}; each(["Top", "Right", "Bottom", "Left"], function (i, part) { expanded["border" + part + "Color"] = value; }); return expanded; } }; colors = jQuery.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" };
    })(jQuery); (function () {
        var classAnimationActions = ["add", "remove", "toggle"], shorthandStyles = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 }; $.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (_, prop) { $.fx.step[prop] = function (fx) { if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) { jQuery.style(fx.elem, prop, fx.end); fx.setAttr = true; } }; }); function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {}; if (style && style.length && style[0] && style[style[0]]) { len = style.length; while (len--) { key = style[len]; if (typeof style[key] === "string") { styles[$.camelCase(key)] = style[key]; } } } else { for (key in style) { if (typeof style[key] === "string") { styles[key] = style[key]; } } }
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var diff = {}, name, value; for (name in newStyle) { value = newStyle[name]; if (oldStyle[name] !== value) { if (!shorthandStyles[name]) { if ($.fx.step[name] || !isNaN(parseFloat(value))) { diff[name] = value; } } } }
            return diff;
        }
        if (!$.fn.addBack) { $.fn.addBack = function (selector) { return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector)); }; }
        $.effects.animateClass = function (value, duration, easing, callback) { var o = $.speed(duration, easing, callback); return this.queue(function () { var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated; allAnimations = allAnimations.map(function () { var el = $(this); return { el: el, start: getElementStyles(this) }; }); applyClassChange = function () { $.each(classAnimationActions, function (i, action) { if (value[action]) { animated[action + "Class"](value[action]); } }); }; applyClassChange(); allAnimations = allAnimations.map(function () { this.end = getElementStyles(this.el[0]); this.diff = styleDifference(this.start, this.end); return this; }); animated.attr("class", baseClass); allAnimations = allAnimations.map(function () { var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, { queue: false, complete: function () { dfd.resolve(styleInfo); } }); this.el.animate(this.diff, opts); return dfd.promise(); }); $.when.apply($, allAnimations.get()).done(function () { applyClassChange(); $.each(arguments, function () { var el = this.el; $.each(this.diff, function (key) { el.css(key, ""); }); }); o.complete.call(animated[0]); }); }); }; $.fn.extend({ addClass: (function (orig) { return function (classNames, speed, easing, callback) { return speed ? $.effects.animateClass.call(this, { add: classNames }, speed, easing, callback) : orig.apply(this, arguments); }; })($.fn.addClass), removeClass: (function (orig) { return function (classNames, speed, easing, callback) { return arguments.length > 1 ? $.effects.animateClass.call(this, { remove: classNames }, speed, easing, callback) : orig.apply(this, arguments); }; })($.fn.removeClass), toggleClass: (function (orig) { return function (classNames, force, speed, easing, callback) { if (typeof force === "boolean" || force === undefined) { if (!speed) { return orig.apply(this, arguments); } else { return $.effects.animateClass.call(this, (force ? { add: classNames } : { remove: classNames }), speed, easing, callback); } } else { return $.effects.animateClass.call(this, { toggle: classNames }, force, speed, easing); } }; })($.fn.toggleClass), switchClass: function (remove, add, speed, easing, callback) { return $.effects.animateClass.call(this, { add: add, remove: remove }, speed, easing, callback); } });
    })(); (function () {
        if ($.expr && $.expr.filters && $.expr.filters.animated) { $.expr.filters.animated = (function (orig) { return function (elem) { return !!$(elem).data(dataSpaceAnimated) || orig(elem); }; })($.expr.filters.animated); }
        if ($.uiBackCompat !== false) {
            $.extend($.effects, {
                save: function (element, set) { var i = 0, length = set.length; for (; i < length; i++) { if (set[i] !== null) { element.data(dataSpace + set[i], element[0].style[set[i]]); } } }, restore: function (element, set) { var val, i = 0, length = set.length; for (; i < length; i++) { if (set[i] !== null) { val = element.data(dataSpace + set[i]); element.css(set[i], val); } } }, setMode: function (el, mode) {
                    if (mode === "toggle") { mode = el.is(":hidden") ? "show" : "hide"; }
                    return mode;
                }, createWrapper: function (element) {
                    if (element.parent().is(".ui-effects-wrapper")) { return element.parent(); }
                    var props = { width: element.outerWidth(true), height: element.outerHeight(true), "float": element.css("float") }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }), size = { width: element.width(), height: element.height() }, active = document.activeElement; try { active.id; } catch (e) { active = document.body; }
                    element.wrap(wrapper); if (element[0] === active || $.contains(element[0], active)) { $(active).trigger("focus"); }
                    wrapper = element.parent(); if (element.css("position") === "static") { wrapper.css({ position: "relative" }); element.css({ position: "relative" }); } else { $.extend(props, { position: element.css("position"), zIndex: element.css("z-index") }); $.each(["top", "left", "bottom", "right"], function (i, pos) { props[pos] = element.css(pos); if (isNaN(parseInt(props[pos], 10))) { props[pos] = "auto"; } }); element.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" }); }
                    element.css(size); return wrapper.css(props).show();
                }, removeWrapper: function (element) {
                    var active = document.activeElement; if (element.parent().is(".ui-effects-wrapper")) { element.parent().replaceWith(element); if (element[0] === active || $.contains(element[0], active)) { $(active).trigger("focus"); } }
                    return element;
                }
            });
        }
        $.extend($.effects, {
            version: "1.12.1", define: function (name, mode, effect) {
                if (!effect) { effect = mode; mode = "effect"; }
                $.effects.effect[name] = effect; $.effects.effect[name].mode = mode; return effect;
            }, scaledDimensions: function (element, percent, direction) {
                if (percent === 0) { return { height: 0, width: 0, outerHeight: 0, outerWidth: 0 }; }
                var x = direction !== "horizontal" ? ((percent || 100) / 100) : 1, y = direction !== "vertical" ? ((percent || 100) / 100) : 1; return { height: element.height() * y, width: element.width() * x, outerHeight: element.outerHeight() * y, outerWidth: element.outerWidth() * x };
            }, clipToBox: function (animation) { return { width: animation.clip.right - animation.clip.left, height: animation.clip.bottom - animation.clip.top, left: animation.clip.left, top: animation.clip.top }; }, unshift: function (element, queueLength, count) {
                var queue = element.queue(); if (queueLength > 1) { queue.splice.apply(queue, [1, 0].concat(queue.splice(queueLength, count))); }
                element.dequeue();
            }, saveStyle: function (element) { element.data(dataSpaceStyle, element[0].style.cssText); }, restoreStyle: function (element) { element[0].style.cssText = element.data(dataSpaceStyle) || ""; element.removeData(dataSpaceStyle); }, mode: function (element, mode) {
                var hidden = element.is(":hidden"); if (mode === "toggle") { mode = hidden ? "show" : "hide"; }
                if (hidden ? mode === "hide" : mode === "show") { mode = "none"; }
                return mode;
            }, getBaseline: function (origin, original) {
                var y, x; switch (origin[0]) { case "top": y = 0; break; case "middle": y = 0.5; break; case "bottom": y = 1; break; default: y = origin[0] / original.height; }
                switch (origin[1]) { case "left": x = 0; break; case "center": x = 0.5; break; case "right": x = 1; break; default: x = origin[1] / original.width; }
                return { x: x, y: y };
            }, createPlaceholder: function (element) {
                var placeholder, cssPosition = element.css("position"), position = element.position(); element.css({ marginTop: element.css("marginTop"), marginBottom: element.css("marginBottom"), marginLeft: element.css("marginLeft"), marginRight: element.css("marginRight") }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()); if (/^(static|relative)/.test(cssPosition)) { cssPosition = "absolute"; placeholder = $("<" + element[0].nodeName + ">").insertAfter(element).css({ display: /^(inline|ruby)/.test(element.css("display")) ? "inline-block" : "block", visibility: "hidden", marginTop: element.css("marginTop"), marginBottom: element.css("marginBottom"), marginLeft: element.css("marginLeft"), marginRight: element.css("marginRight"), "float": element.css("float") }).outerWidth(element.outerWidth()).outerHeight(element.outerHeight()).addClass("ui-effects-placeholder"); element.data(dataSpace + "placeholder", placeholder); }
                element.css({ position: cssPosition, left: position.left, top: position.top }); return placeholder;
            }, removePlaceholder: function (element) { var dataKey = dataSpace + "placeholder", placeholder = element.data(dataKey); if (placeholder) { placeholder.remove(); element.removeData(dataKey); } }, cleanUp: function (element) { $.effects.restoreStyle(element); $.effects.removePlaceholder(element); }, setTransition: function (element, list, factor, value) { value = value || {}; $.each(list, function (i, x) { var unit = element.cssUnit(x); if (unit[0] > 0) { value[x] = unit[0] * factor + unit[1]; } }); return value; }
        }); function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) { options = effect; effect = effect.effect; }
            effect = { effect: effect }; if (options == null) { options = {}; }
            if ($.isFunction(options)) { callback = options; speed = null; options = {}; }
            if (typeof options === "number" || $.fx.speeds[options]) { callback = speed; speed = options; options = {}; }
            if ($.isFunction(speed)) { callback = speed; speed = null; }
            if (options) { $.extend(effect, options); }
            speed = speed || options.duration; effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default; effect.complete = callback || options.complete; return effect;
        }
        function standardAnimationOption(option) {
            if (!option || typeof option === "number" || $.fx.speeds[option]) { return true; }
            if (typeof option === "string" && !$.effects.effect[option]) { return true; }
            if ($.isFunction(option)) { return true; }
            if (typeof option === "object" && !option.effect) { return true; }
            return false;
        }
        $.fn.extend({
            effect: function () {
                var args = _normalizeArguments.apply(this, arguments), effectMethod = $.effects.effect[args.effect], defaultMode = effectMethod.mode, queue = args.queue, queueName = queue || "fx", complete = args.complete, mode = args.mode, modes = [], prefilter = function (next) {
                    var el = $(this), normalizedMode = $.effects.mode(el, mode) || defaultMode; el.data(dataSpaceAnimated, true); modes.push(normalizedMode); if (defaultMode && (normalizedMode === "show" || (normalizedMode === defaultMode && normalizedMode === "hide"))) { el.show(); }
                    if (!defaultMode || normalizedMode !== "none") { $.effects.saveStyle(el); }
                    if ($.isFunction(next)) { next(); }
                }; if ($.fx.off || !effectMethod) { if (mode) { return this[mode](args.duration, complete); } else { return this.each(function () { if (complete) { complete.call(this); } }); } }
                function run(next) {
                    var elem = $(this); function cleanup() {
                        elem.removeData(dataSpaceAnimated); $.effects.cleanUp(elem); if (args.mode === "hide") { elem.hide(); }
                        done();
                    }
                    function done() {
                        if ($.isFunction(complete)) { complete.call(elem[0]); }
                        if ($.isFunction(next)) { next(); }
                    }
                    args.mode = modes.shift(); if ($.uiBackCompat !== false && !defaultMode) { if (elem.is(":hidden") ? mode === "hide" : mode === "show") { elem[mode](); done(); } else { effectMethod.call(elem[0], args, done); } } else { if (args.mode === "none") { elem[mode](); done(); } else { effectMethod.call(elem[0], args, cleanup); } }
                }
                return queue === false ? this.each(prefilter).each(run) : this.queue(queueName, prefilter).queue(queueName, run);
            }, show: (function (orig) { return function (option) { if (standardAnimationOption(option)) { return orig.apply(this, arguments); } else { var args = _normalizeArguments.apply(this, arguments); args.mode = "show"; return this.effect.call(this, args); } }; })($.fn.show), hide: (function (orig) { return function (option) { if (standardAnimationOption(option)) { return orig.apply(this, arguments); } else { var args = _normalizeArguments.apply(this, arguments); args.mode = "hide"; return this.effect.call(this, args); } }; })($.fn.hide), toggle: (function (orig) { return function (option) { if (standardAnimationOption(option) || typeof option === "boolean") { return orig.apply(this, arguments); } else { var args = _normalizeArguments.apply(this, arguments); args.mode = "toggle"; return this.effect.call(this, args); } }; })($.fn.toggle), cssUnit: function (key) { var style = this.css(key), val = []; $.each(["em", "px", "%", "pt"], function (i, unit) { if (style.indexOf(unit) > 0) { val = [parseFloat(style), unit]; } }); return val; }, cssClip: function (clipObj) {
                if (clipObj) {
                    return this.css("clip", "rect(" + clipObj.top + "px " + clipObj.right + "px " +
                        clipObj.bottom + "px " + clipObj.left + "px)");
                }
                return parseClip(this.css("clip"), this);
            }, transfer: function (options, done) { var element = $(this), target = $(options.to), targetFixed = target.css("position") === "fixed", body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = { top: endPosition.top - fixTop, left: endPosition.left - fixLeft, height: target.innerHeight(), width: target.innerWidth() }, startPosition = element.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(options.className).css({ top: startPosition.top - fixTop, left: startPosition.left - fixLeft, height: element.innerHeight(), width: element.innerWidth(), position: targetFixed ? "fixed" : "absolute" }).animate(animation, options.duration, options.easing, function () { transfer.remove(); if ($.isFunction(done)) { done(); } }); }
        }); function parseClip(str, element) { var outerWidth = element.outerWidth(), outerHeight = element.outerHeight(), clipRegex = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/, values = clipRegex.exec(str) || ["", 0, outerWidth, outerHeight, 0]; return { top: parseFloat(values[1]) || 0, right: values[2] === "auto" ? outerWidth : parseFloat(values[2]), bottom: values[3] === "auto" ? outerHeight : parseFloat(values[3]), left: parseFloat(values[4]) || 0 }; }
        $.fx.step.clip = function (fx) {
            if (!fx.clipInit) {
                fx.start = $(fx.elem).cssClip(); if (typeof fx.end === "string") { fx.end = parseClip(fx.end, fx.elem); }
                fx.clipInit = true;
            }
            $(fx.elem).cssClip({ top: fx.pos * (fx.end.top - fx.start.top) + fx.start.top, right: fx.pos * (fx.end.right - fx.start.right) + fx.start.right, bottom: fx.pos * (fx.end.bottom - fx.start.bottom) + fx.start.bottom, left: fx.pos * (fx.end.left - fx.start.left) + fx.start.left });
        };
    })(); (function () {
        var baseEasings = {}; $.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (i, name) { baseEasings[name] = function (p) { return Math.pow(p, i + 2); }; }); $.extend(baseEasings, {
            Sine: function (p) { return 1 - Math.cos(p * Math.PI / 2); }, Circ: function (p) { return 1 - Math.sqrt(1 - p * p); }, Elastic: function (p) { return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15); }, Back: function (p) { return p * p * (3 * p - 2); }, Bounce: function (p) {
                var pow2, bounce = 4; while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) { }
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
            }
        }); $.each(baseEasings, function (name, easeIn) { $.easing["easeIn" + name] = easeIn; $.easing["easeOut" + name] = function (p) { return 1 - easeIn(1 - p); }; $.easing["easeInOut" + name] = function (p) { return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2; }; });
    })(); var effect = $.effects;/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectBlind = $.effects.define("blind", "hide", function (options, done) {
        var map = { up: ["bottom", "top"], vertical: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], horizontal: ["right", "left"], right: ["left", "right"] }, element = $(this), direction = options.direction || "up", start = element.cssClip(), animate = { clip: $.extend({}, start) }, placeholder = $.effects.createPlaceholder(element); animate.clip[map[direction][0]] = animate.clip[map[direction][1]]; if (options.mode === "show") {
            element.cssClip(animate.clip); if (placeholder) { placeholder.css($.effects.clipToBox(animate)); }
            animate.clip = start;
        }
        if (placeholder) { placeholder.animate($.effects.clipToBox(animate), options.duration, options.easing); }
        element.animate(animate, { queue: false, duration: options.duration, easing: options.easing, complete: done });
    });/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectBounce = $.effects.define("bounce", function (options, done) {
        var upAnim, downAnim, refValue, element = $(this), mode = options.mode, hide = mode === "hide", show = mode === "show", direction = options.direction || "up", distance = options.distance, times = options.times || 5, anims = times * 2 + (show || hide ? 1 : 0), speed = options.duration / anims, easing = options.easing, ref = (direction === "up" || direction === "down") ? "top" : "left", motion = (direction === "up" || direction === "left"), i = 0, queuelen = element.queue().length; $.effects.createPlaceholder(element); refValue = element.css(ref); if (!distance) { distance = element[ref === "top" ? "outerHeight" : "outerWidth"]() / 3; }
        if (show) { downAnim = { opacity: 1 }; downAnim[ref] = refValue; element.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing); }
        if (hide) { distance = distance / Math.pow(2, times - 1); }
        downAnim = {}; downAnim[ref] = refValue; for (; i < times; i++) { upAnim = {}; upAnim[ref] = (motion ? "-=" : "+=") + distance; element.animate(upAnim, speed, easing).animate(downAnim, speed, easing); distance = hide ? distance * 2 : distance / 2; }
        if (hide) { upAnim = { opacity: 0 }; upAnim[ref] = (motion ? "-=" : "+=") + distance; element.animate(upAnim, speed, easing); }
        element.queue(done); $.effects.unshift(element, queuelen, anims + 1);
    });/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectClip = $.effects.define("clip", "hide", function (options, done) {
        var start, animate = {}, element = $(this), direction = options.direction || "vertical", both = direction === "both", horizontal = both || direction === "horizontal", vertical = both || direction === "vertical"; start = element.cssClip(); animate.clip = { top: vertical ? (start.bottom - start.top) / 2 : start.top, right: horizontal ? (start.right - start.left) / 2 : start.right, bottom: vertical ? (start.bottom - start.top) / 2 : start.bottom, left: horizontal ? (start.right - start.left) / 2 : start.left }; $.effects.createPlaceholder(element); if (options.mode === "show") { element.cssClip(animate.clip); animate.clip = start; }
        element.animate(animate, { queue: false, duration: options.duration, easing: options.easing, complete: done });
    });/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectDrop = $.effects.define("drop", "hide", function (options, done) {
        var distance, element = $(this), mode = options.mode, show = mode === "show", direction = options.direction || "left", ref = (direction === "up" || direction === "down") ? "top" : "left", motion = (direction === "up" || direction === "left") ? "-=" : "+=", oppositeMotion = (motion === "+=") ? "-=" : "+=", animation = { opacity: 0 }; $.effects.createPlaceholder(element); distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2; animation[ref] = motion + distance; if (show) { element.css(animation); animation[ref] = oppositeMotion + distance; animation.opacity = 1; }
        element.animate(animation, { queue: false, duration: options.duration, easing: options.easing, complete: done });
    });/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectExplode = $.effects.define("explode", "hide", function (options, done) {
        var i, j, left, top, mx, my, rows = options.pieces ? Math.round(Math.sqrt(options.pieces)) : 3, cells = rows, element = $(this), mode = options.mode, show = mode === "show", offset = element.show().css("visibility", "hidden").offset(), width = Math.ceil(element.outerWidth() / cells), height = Math.ceil(element.outerHeight() / rows), pieces = []; function childComplete() { pieces.push(this); if (pieces.length === rows * cells) { animComplete(); } }
        for (i = 0; i < rows; i++) { top = offset.top + i * height; my = i - (rows - 1) / 2; for (j = 0; j < cells; j++) { left = offset.left + j * width; mx = j - (cells - 1) / 2; element.clone().appendTo("body").wrap("<div></div>").css({ position: "absolute", visibility: "visible", left: -j * width, top: -i * height }).parent().addClass("ui-effects-explode").css({ position: "absolute", overflow: "hidden", width: width, height: height, left: left + (show ? mx * width : 0), top: top + (show ? my * height : 0), opacity: show ? 0 : 1 }).animate({ left: left + (show ? 0 : mx * width), top: top + (show ? 0 : my * height), opacity: show ? 1 : 0 }, options.duration || 500, options.easing, childComplete); } }
        function animComplete() { element.css({ visibility: "visible" }); $(pieces).remove(); done(); }
    });/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectFade = $.effects.define("fade", "toggle", function (options, done) { var show = options.mode === "show"; $(this).css("opacity", show ? 0 : 1).animate({ opacity: show ? 1 : 0 }, { queue: false, duration: options.duration, easing: options.easing, complete: done }); });/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectFold = $.effects.define("fold", "hide", function (options, done) {
        var element = $(this), mode = options.mode, show = mode === "show", hide = mode === "hide", size = options.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!options.horizFirst, ref = horizFirst ? ["right", "bottom"] : ["bottom", "right"], duration = options.duration / 2, placeholder = $.effects.createPlaceholder(element), start = element.cssClip(), animation1 = { clip: $.extend({}, start) }, animation2 = { clip: $.extend({}, start) }, distance = [start[ref[0]], start[ref[1]]], queuelen = element.queue().length; if (percent) { size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1]; }
        animation1.clip[ref[0]] = size; animation2.clip[ref[0]] = size; animation2.clip[ref[1]] = 0; if (show) {
            element.cssClip(animation2.clip); if (placeholder) { placeholder.css($.effects.clipToBox(animation2)); }
            animation2.clip = start;
        }
        element.queue(function (next) {
            if (placeholder) { placeholder.animate($.effects.clipToBox(animation1), duration, options.easing).animate($.effects.clipToBox(animation2), duration, options.easing); }
            next();
        }).animate(animation1, duration, options.easing).animate(animation2, duration, options.easing).queue(done); $.effects.unshift(element, queuelen, 4);
    });/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectHighlight = $.effects.define("highlight", "show", function (options, done) {
        var element = $(this), animation = { backgroundColor: element.css("backgroundColor") }; if (options.mode === "hide") { animation.opacity = 0; }
        $.effects.saveStyle(element); element.css({ backgroundImage: "none", backgroundColor: options.color || "#ffff99" }).animate(animation, { queue: false, duration: options.duration, easing: options.easing, complete: done });
    });/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectSize = $.effects.define("size", function (options, done) {
        var baseline, factor, temp, element = $(this), cProps = ["fontSize"], vProps = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"], hProps = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"], mode = options.mode, restore = mode !== "effect", scale = options.scale || "both", origin = options.origin || ["middle", "center"], position = element.css("position"), pos = element.position(), original = $.effects.scaledDimensions(element), from = options.from || original, to = options.to || $.effects.scaledDimensions(element, 0); $.effects.createPlaceholder(element); if (mode === "show") { temp = from; from = to; to = temp; }
        factor = { from: { y: from.height / original.height, x: from.width / original.width }, to: { y: to.height / original.height, x: to.width / original.width } }; if (scale === "box" || scale === "both") {
            if (factor.from.y !== factor.to.y) { from = $.effects.setTransition(element, vProps, factor.from.y, from); to = $.effects.setTransition(element, vProps, factor.to.y, to); }
            if (factor.from.x !== factor.to.x) { from = $.effects.setTransition(element, hProps, factor.from.x, from); to = $.effects.setTransition(element, hProps, factor.to.x, to); }
        }
        if (scale === "content" || scale === "both") { if (factor.from.y !== factor.to.y) { from = $.effects.setTransition(element, cProps, factor.from.y, from); to = $.effects.setTransition(element, cProps, factor.to.y, to); } }
        if (origin) { baseline = $.effects.getBaseline(origin, original); from.top = (original.outerHeight - from.outerHeight) * baseline.y + pos.top; from.left = (original.outerWidth - from.outerWidth) * baseline.x + pos.left; to.top = (original.outerHeight - to.outerHeight) * baseline.y + pos.top; to.left = (original.outerWidth - to.outerWidth) * baseline.x + pos.left; }
        element.css(from); if (scale === "content" || scale === "both") {
            vProps = vProps.concat(["marginTop", "marginBottom"]).concat(cProps); hProps = hProps.concat(["marginLeft", "marginRight"]); element.find("*[width]").each(function () {
                var child = $(this), childOriginal = $.effects.scaledDimensions(child), childFrom = { height: childOriginal.height * factor.from.y, width: childOriginal.width * factor.from.x, outerHeight: childOriginal.outerHeight * factor.from.y, outerWidth: childOriginal.outerWidth * factor.from.x }, childTo = { height: childOriginal.height * factor.to.y, width: childOriginal.width * factor.to.x, outerHeight: childOriginal.height * factor.to.y, outerWidth: childOriginal.width * factor.to.x }; if (factor.from.y !== factor.to.y) { childFrom = $.effects.setTransition(child, vProps, factor.from.y, childFrom); childTo = $.effects.setTransition(child, vProps, factor.to.y, childTo); }
                if (factor.from.x !== factor.to.x) { childFrom = $.effects.setTransition(child, hProps, factor.from.x, childFrom); childTo = $.effects.setTransition(child, hProps, factor.to.x, childTo); }
                if (restore) { $.effects.saveStyle(child); }
                child.css(childFrom); child.animate(childTo, options.duration, options.easing, function () { if (restore) { $.effects.restoreStyle(child); } });
            });
        }
        element.animate(to, {
            queue: false, duration: options.duration, easing: options.easing, complete: function () {
                var offset = element.offset(); if (to.opacity === 0) { element.css("opacity", from.opacity); }
                if (!restore) { element.css("position", position === "static" ? "relative" : position).offset(offset); $.effects.saveStyle(element); }
                done();
            }
        });
    });/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectScale = $.effects.define("scale", function (options, done) {
        var el = $(this), mode = options.mode, percent = parseInt(options.percent, 10) || (parseInt(options.percent, 10) === 0 ? 0 : (mode !== "effect" ? 0 : 100)), newOptions = $.extend(true, { from: $.effects.scaledDimensions(el), to: $.effects.scaledDimensions(el, percent, options.direction || "both"), origin: options.origin || ["middle", "center"] }, options); if (options.fade) { newOptions.from.opacity = 1; newOptions.to.opacity = 0; }
        $.effects.effect.size.call(this, newOptions, done);
    });/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectPuff = $.effects.define("puff", "hide", function (options, done) { var newOptions = $.extend(true, {}, options, { fade: true, percent: parseInt(options.percent, 10) || 150 }); $.effects.effect.scale.call(this, newOptions, done); });/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectPulsate = $.effects.define("pulsate", "show", function (options, done) {
        var element = $(this), mode = options.mode, show = mode === "show", hide = mode === "hide", showhide = show || hide, anims = ((options.times || 5) * 2) + (showhide ? 1 : 0), duration = options.duration / anims, animateTo = 0, i = 1, queuelen = element.queue().length; if (show || !element.is(":visible")) { element.css("opacity", 0).show(); animateTo = 1; }
        for (; i < anims; i++) { element.animate({ opacity: animateTo }, duration, options.easing); animateTo = 1 - animateTo; }
        element.animate({ opacity: animateTo }, duration, options.easing); element.queue(done); $.effects.unshift(element, queuelen, anims + 1);
    });/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectShake = $.effects.define("shake", function (options, done) {
        var i = 1, element = $(this), direction = options.direction || "left", distance = options.distance || 20, times = options.times || 3, anims = times * 2 + 1, speed = Math.round(options.duration / anims), ref = (direction === "up" || direction === "down") ? "top" : "left", positiveMotion = (direction === "up" || direction === "left"), animation = {}, animation1 = {}, animation2 = {}, queuelen = element.queue().length; $.effects.createPlaceholder(element); animation[ref] = (positiveMotion ? "-=" : "+=") + distance; animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2; animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2; element.animate(animation, speed, options.easing); for (; i < times; i++) { element.animate(animation1, speed, options.easing).animate(animation2, speed, options.easing); }
        element.animate(animation1, speed, options.easing).animate(animation, speed / 2, options.easing).queue(done); $.effects.unshift(element, queuelen, anims + 1);
    });/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effectsEffectSlide = $.effects.define("slide", "show", function (options, done) {
        var startClip, startRef, element = $(this), map = { up: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], right: ["left", "right"] }, mode = options.mode, direction = options.direction || "left", ref = (direction === "up" || direction === "down") ? "top" : "left", positiveMotion = (direction === "up" || direction === "left"), distance = options.distance || element[ref === "top" ? "outerHeight" : "outerWidth"](true), animation = {}; $.effects.createPlaceholder(element); startClip = element.cssClip(); startRef = element.position()[ref]; animation[ref] = (positiveMotion ? -1 : 1) * distance + startRef; animation.clip = element.cssClip(); animation.clip[map[direction][1]] = animation.clip[map[direction][0]]; if (mode === "show") { element.cssClip(animation.clip); element.css(ref, animation[ref]); animation.clip = startClip; animation[ref] = startRef; }
        element.animate(animation, { queue: false, duration: options.duration, easing: options.easing, complete: done });
    });/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */var effect; if ($.uiBackCompat !== false) { effect = $.effects.define("transfer", function (options, done) { $(this).transfer(options, done); }); }
    var effectsEffectTransfer = effect;
}));; var hljs = new function () { function l(o) { return o.replace(/&/gm, "&amp;").replace(/</gm, "&lt;").replace(/>/gm, "&gt;") } function b(p) { for (var o = p.firstChild; o; o = o.nextSibling) { if (o.nodeName == "CODE") { return o } if (!(o.nodeType == 3 && o.nodeValue.match(/\s+/))) { break } } } function h(p, o) { return Array.prototype.map.call(p.childNodes, function (q) { if (q.nodeType == 3) { return o ? q.nodeValue.replace(/\n/g, "") : q.nodeValue } if (q.nodeName == "BR") { return "\n" } return h(q, o) }).join("") } function a(q) { var p = (q.className + " " + q.parentNode.className).split(/\s+/); p = p.map(function (r) { return r.replace(/^language-/, "") }); for (var o = 0; o < p.length; o++) { if (e[p[o]] || p[o] == "no-highlight") { return p[o] } } } function c(q) { var o = []; (function p(r, s) { for (var t = r.firstChild; t; t = t.nextSibling) { if (t.nodeType == 3) { s += t.nodeValue.length } else { if (t.nodeName == "BR") { s += 1 } else { if (t.nodeType == 1) { o.push({ event: "start", offset: s, node: t }); s = p(t, s); o.push({ event: "stop", offset: s, node: t }) } } } } return s })(q, 0); return o } function j(x, v, w) { var p = 0; var y = ""; var r = []; function t() { if (x.length && v.length) { if (x[0].offset != v[0].offset) { return (x[0].offset < v[0].offset) ? x : v } else { return v[0].event == "start" ? x : v } } else { return x.length ? x : v } } function s(A) { function z(B) { return " " + B.nodeName + '="' + l(B.value) + '"' } return "<" + A.nodeName + Array.prototype.map.call(A.attributes, z).join("") + ">" } while (x.length || v.length) { var u = t().splice(0, 1)[0]; y += l(w.substr(p, u.offset - p)); p = u.offset; if (u.event == "start") { y += s(u.node); r.push(u.node) } else { if (u.event == "stop") { var o, q = r.length; do { q--; o = r[q]; y += ("</" + o.nodeName.toLowerCase() + ">") } while (o != u.node); r.splice(q, 1); while (q < r.length) { y += s(r[q]); q++ } } } } return y + l(w.substr(p)) } function f(q) { function o(s, r) { return RegExp(s, "m" + (q.cI ? "i" : "") + (r ? "g" : "")) } function p(y, w) { if (y.compiled) { return } y.compiled = true; var s = []; if (y.k) { var r = {}; function z(A, t) { t.split(" ").forEach(function (B) { var C = B.split("|"); r[C[0]] = [A, C[1] ? Number(C[1]) : 1]; s.push(C[0]) }) } y.lR = o(y.l || hljs.IR, true); if (typeof y.k == "string") { z("keyword", y.k) } else { for (var x in y.k) { if (!y.k.hasOwnProperty(x)) { continue } z(x, y.k[x]) } } y.k = r } if (w) { if (y.bWK) { y.b = "\\b(" + s.join("|") + ")\\s" } y.bR = o(y.b ? y.b : "\\B|\\b"); if (!y.e && !y.eW) { y.e = "\\B|\\b" } if (y.e) { y.eR = o(y.e) } y.tE = y.e || ""; if (y.eW && w.tE) { y.tE += (y.e ? "|" : "") + w.tE } } if (y.i) { y.iR = o(y.i) } if (y.r === undefined) { y.r = 1 } if (!y.c) { y.c = [] } for (var v = 0; v < y.c.length; v++) { if (y.c[v] == "self") { y.c[v] = y } p(y.c[v], y) } if (y.starts) { p(y.starts, w) } var u = []; for (var v = 0; v < y.c.length; v++) { u.push(y.c[v].b) } if (y.tE) { u.push(y.tE) } if (y.i) { u.push(y.i) } y.t = u.length ? o(u.join("|"), true) : { exec: function (t) { return null } } } p(q) } function d(D, E) { function o(r, M) { for (var L = 0; L < M.c.length; L++) { var K = M.c[L].bR.exec(r); if (K && K.index == 0) { return M.c[L] } } } function s(K, r) { if (K.e && K.eR.test(r)) { return K } if (K.eW) { return s(K.parent, r) } } function t(r, K) { return K.i && K.iR.test(r) } function y(L, r) { var K = F.cI ? r[0].toLowerCase() : r[0]; return L.k.hasOwnProperty(K) && L.k[K] } function G() { var K = l(w); if (!A.k) { return K } var r = ""; var N = 0; A.lR.lastIndex = 0; var L = A.lR.exec(K); while (L) { r += K.substr(N, L.index - N); var M = y(A, L); if (M) { v += M[1]; r += '<span class="' + M[0] + '">' + L[0] + "</span>" } else { r += L[0] } N = A.lR.lastIndex; L = A.lR.exec(K) } return r + K.substr(N) } function z() { if (A.sL && !e[A.sL]) { return l(w) } var r = A.sL ? d(A.sL, w) : g(w); if (A.r > 0) { v += r.keyword_count; B += r.r } return '<span class="' + r.language + '">' + r.value + "</span>" } function J() { return A.sL !== undefined ? z() : G() } function I(L, r) { var K = L.cN ? '<span class="' + L.cN + '">' : ""; if (L.rB) { x += K; w = "" } else { if (L.eB) { x += l(r) + K; w = "" } else { x += K; w = r } } A = Object.create(L, { parent: { value: A } }); B += L.r } function C(K, r) { w += K; if (r === undefined) { x += J(); return 0 } var L = o(r, A); if (L) { x += J(); I(L, r); return L.rB ? 0 : r.length } var M = s(A, r); if (M) { if (!(M.rE || M.eE)) { w += r } x += J(); do { if (A.cN) { x += "</span>" } A = A.parent } while (A != M.parent); if (M.eE) { x += l(r) } w = ""; if (M.starts) { I(M.starts, "") } return M.rE ? 0 : r.length } if (t(r, A)) { throw "Illegal" } w += r; return r.length || 1 } var F = e[D]; f(F); var A = F; var w = ""; var B = 0; var v = 0; var x = ""; try { var u, q, p = 0; while (true) { A.t.lastIndex = p; u = A.t.exec(E); if (!u) { break } q = C(E.substr(p, u.index - p), u[0]); p = u.index + q } C(E.substr(p)); return { r: B, keyword_count: v, value: x, language: D } } catch (H) { if (H == "Illegal") { return { r: 0, keyword_count: 0, value: l(E) } } else { throw H } } } function g(s) { var o = { keyword_count: 0, r: 0, value: l(s) }; var q = o; for (var p in e) { if (!e.hasOwnProperty(p)) { continue } var r = d(p, s); r.language = p; if (r.keyword_count + r.r > q.keyword_count + q.r) { q = r } if (r.keyword_count + r.r > o.keyword_count + o.r) { q = o; o = r } } if (q.language) { o.second_best = q } return o } function i(q, p, o) { if (p) { q = q.replace(/^((<[^>]+>|\t)+)/gm, function (r, v, u, t) { return v.replace(/\t/g, p) }) } if (o) { q = q.replace(/\n/g, "<br>") } return q } function m(r, u, p) { var v = h(r, p); var t = a(r); if (t == "no-highlight") { return } var w = t ? d(t, v) : g(v); t = w.language; var o = c(r); if (o.length) { var q = document.createElement("pre"); q.innerHTML = w.value; w.value = j(o, c(q), v) } w.value = i(w.value, u, p); var s = r.className; if (!s.match("(\\s|^)(language-)?" + t + "(\\s|$)")) { s = s ? (s + " " + t) : t } r.innerHTML = w.value; r.className = s; r.result = { language: t, kw: w.keyword_count, re: w.r }; if (w.second_best) { r.second_best = { language: w.second_best.language, kw: w.second_best.keyword_count, re: w.second_best.r } } } function n() { if (n.called) { return } n.called = true; Array.prototype.map.call(document.getElementsByTagName("pre"), b).filter(Boolean).forEach(function (o) { m(o, hljs.tabReplace) }) } function k() { window.addEventListener("DOMContentLoaded", n, false); window.addEventListener("load", n, false) } var e = {}; this.LANGUAGES = e; this.highlight = d; this.highlightAuto = g; this.fixMarkup = i; this.highlightBlock = m; this.initHighlighting = n; this.initHighlightingOnLoad = k; this.IR = "[a-zA-Z][a-zA-Z0-9_]*"; this.UIR = "[a-zA-Z_][a-zA-Z0-9_]*"; this.NR = "\\b\\d+(\\.\\d+)?"; this.CNR = "(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)"; this.BNR = "\\b(0b[01]+)"; this.RSR = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~"; this.BE = { b: "\\\\[\\s\\S]", r: 0 }; this.ASM = { cN: "string", b: "'", e: "'", i: "\\n", c: [this.BE], r: 0 }; this.QSM = { cN: "string", b: '"', e: '"', i: "\\n", c: [this.BE], r: 0 }; this.CLCM = { cN: "comment", b: "//", e: "$" }; this.CBLCLM = { cN: "comment", b: "/\\*", e: "\\*/" }; this.HCM = { cN: "comment", b: "#", e: "$" }; this.NM = { cN: "number", b: this.NR, r: 0 }; this.CNM = { cN: "number", b: this.CNR, r: 0 }; this.BNM = { cN: "number", b: this.BNR, r: 0 }; this.inherit = function (q, r) { var o = {}; for (var p in q) { o[p] = q[p] } if (r) { for (var p in r) { o[p] = r[p] } } return o } }(); hljs.LANGUAGES.bash = function (a) { var g = "true false"; var e = "if then else elif fi for break continue while in do done echo exit return set declare"; var c = { cN: "variable", b: "\\$[a-zA-Z0-9_#]+" }; var b = { cN: "variable", b: "\\${([^}]|\\\\})+}" }; var h = { cN: "string", b: '"', e: '"', i: "\\n", c: [a.BE, c, b], r: 0 }; var d = { cN: "string", b: "'", e: "'", c: [{ b: "''" }], r: 0 }; var f = { cN: "test_condition", b: "", e: "", c: [h, d, c, b], k: { literal: g }, r: 0 }; return { k: { keyword: e, literal: g }, c: [{ cN: "shebang", b: "(#!\\/bin\\/bash)|(#!\\/bin\\/sh)", r: 10 }, c, b, a.HCM, h, d, a.inherit(f, { b: "\\[ ", e: " \\]", r: 0 }), a.inherit(f, { b: "\\[\\[ ", e: " \\]\\]" })] } }(hljs); hljs.LANGUAGES.cs = function (a) { return { k: "abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual volatile void while ascending descending from get group into join let orderby partial select set value var where yield", c: [{ cN: "comment", b: "///", e: "$", rB: true, c: [{ cN: "xmlDocTag", b: "///|<!--|-->" }, { cN: "xmlDocTag", b: "</?", e: ">" }] }, a.CLCM, a.CBLCLM, { cN: "preprocessor", b: "#", e: "$", k: "if else elif endif define undef warning error line region endregion pragma checksum" }, { cN: "string", b: '@"', e: '"', c: [{ b: '""' }] }, a.ASM, a.QSM, a.CNM] } }(hljs); hljs.LANGUAGES.ruby = function (e) { var a = "[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?"; var j = "[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?"; var g = { keyword: "and false then defined module in return redo if BEGIN retry end for true self when next until do begin unless END rescue nil else break undef not super class case require yield alias while ensure elsif or include" }; var c = { cN: "yardoctag", b: "@[A-Za-z]+" }; var k = [{ cN: "comment", b: "#", e: "$", c: [c] }, { cN: "comment", b: "^\\=begin", e: "^\\=end", c: [c], r: 10 }, { cN: "comment", b: "^__END__", e: "\\n$" }]; var d = { cN: "subst", b: "#\\{", e: "}", l: a, k: g }; var i = [e.BE, d]; var b = [{ cN: "string", b: "'", e: "'", c: i, r: 0 }, { cN: "string", b: '"', e: '"', c: i, r: 0 }, { cN: "string", b: "%[qw]?\\(", e: "\\)", c: i }, { cN: "string", b: "%[qw]?\\[", e: "\\]", c: i }, { cN: "string", b: "%[qw]?{", e: "}", c: i }, { cN: "string", b: "%[qw]?<", e: ">", c: i, r: 10 }, { cN: "string", b: "%[qw]?/", e: "/", c: i, r: 10 }, { cN: "string", b: "%[qw]?%", e: "%", c: i, r: 10 }, { cN: "string", b: "%[qw]?-", e: "-", c: i, r: 10 }, { cN: "string", b: "%[qw]?\\|", e: "\\|", c: i, r: 10 }]; var h = { cN: "function", bWK: true, e: " |$|;", k: "def", c: [{ cN: "title", b: j, l: a, k: g }, { cN: "params", b: "\\(", e: "\\)", l: a, k: g }].concat(k) }; var f = k.concat(b.concat([{ cN: "class", bWK: true, e: "$|;", k: "class module", c: [{ cN: "title", b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?", r: 0 }, { cN: "inheritance", b: "<\\s*", c: [{ cN: "parent", b: "(" + e.IR + "::)?" + e.IR }] }].concat(k) }, h, { cN: "constant", b: "(::)?(\\b[A-Z]\\w*(::)?)+", r: 0 }, { cN: "symbol", b: ":", c: b.concat([{ b: j }]), r: 0 }, { cN: "symbol", b: a + ":", r: 0 }, { cN: "number", b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b", r: 0 }, { cN: "number", b: "\\?\\w" }, { cN: "variable", b: "(\\$\\W)|((\\$|\\@\\@?)(\\w+))" }, { b: "(" + e.RSR + ")\\s*", c: k.concat([{ cN: "regexp", b: "/", e: "/[a-z]*", i: "\\n", c: [e.BE, d] }]), r: 0 }])); d.c = f; h.c[1].c = f; return { l: a, k: g, c: f } }(hljs); hljs.LANGUAGES.diff = function (a) { return { c: [{ cN: "chunk", b: "^\\@\\@ +\\-\\d+,\\d+ +\\+\\d+,\\d+ +\\@\\@$", r: 10 }, { cN: "chunk", b: "^\\*\\*\\* +\\d+,\\d+ +\\*\\*\\*\\*$", r: 10 }, { cN: "chunk", b: "^\\-\\-\\- +\\d+,\\d+ +\\-\\-\\-\\-$", r: 10 }, { cN: "header", b: "Index: ", e: "$" }, { cN: "header", b: "=====", e: "=====$" }, { cN: "header", b: "^\\-\\-\\-", e: "$" }, { cN: "header", b: "^\\*{3} ", e: "$" }, { cN: "header", b: "^\\+\\+\\+", e: "$" }, { cN: "header", b: "\\*{5}", e: "\\*{5}$" }, { cN: "addition", b: "^\\+", e: "$" }, { cN: "deletion", b: "^\\-", e: "$" }, { cN: "change", b: "^\\!", e: "$" }] } }(hljs); hljs.LANGUAGES.javascript = function (a) { return { k: { keyword: "in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const", literal: "true false null undefined NaN Infinity" }, c: [a.ASM, a.QSM, a.CLCM, a.CBLCLM, a.CNM, { b: "(" + a.RSR + "|\\b(case|return|throw)\\b)\\s*", k: "return throw case", c: [a.CLCM, a.CBLCLM, { cN: "regexp", b: "/", e: "/[gim]*", i: "\\n", c: [{ b: "\\\\/" }] }, { b: "<", e: ">;", sL: "xml" }], r: 0 }, { cN: "function", bWK: true, e: "{", k: "function", c: [{ cN: "title", b: "[A-Za-z$_][0-9A-Za-z$_]*" }, { cN: "params", b: "\\(", e: "\\)", c: [a.CLCM, a.CBLCLM], i: "[\"'\\(]" }], i: "\\[|%" }] } }(hljs); hljs.LANGUAGES.css = function (a) { var b = { cN: "function", b: a.IR + "\\(", e: "\\)", c: [a.NM, a.ASM, a.QSM] }; return { cI: true, i: "[=/|']", c: [a.CBLCLM, { cN: "id", b: "\\#[A-Za-z0-9_-]+" }, { cN: "class", b: "\\.[A-Za-z0-9_-]+", r: 0 }, { cN: "attr_selector", b: "\\[", e: "\\]", i: "$" }, { cN: "pseudo", b: ":(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\\\"\\']+" }, { cN: "at_rule", b: "@(font-face|page)", l: "[a-z-]+", k: "font-face page" }, { cN: "at_rule", b: "@", e: "[{;]", eE: true, k: "import page media charset", c: [b, a.ASM, a.QSM, a.NM] }, { cN: "tag", b: a.IR, r: 0 }, { cN: "rules", b: "{", e: "}", i: "[^\\s]", r: 0, c: [a.CBLCLM, { cN: "rule", b: "[^\\s]", rB: true, e: ";", eW: true, c: [{ cN: "attribute", b: "[A-Z\\_\\.\\-]+", e: ":", eE: true, i: "[^\\s]", starts: { cN: "value", eW: true, eE: true, c: [b, a.NM, a.QSM, a.ASM, a.CBLCLM, { cN: "hexcolor", b: "\\#[0-9A-F]+" }, { cN: "important", b: "!important" }] } }] }] }] } }(hljs); hljs.LANGUAGES.xml = function (a) { var c = "[A-Za-z0-9\\._:-]+"; var b = { eW: true, c: [{ cN: "attribute", b: c, r: 0 }, { b: '="', rB: true, e: '"', c: [{ cN: "value", b: '"', eW: true }] }, { b: "='", rB: true, e: "'", c: [{ cN: "value", b: "'", eW: true }] }, { b: "=", c: [{ cN: "value", b: "[^\\s/>]+" }] }] }; return { cI: true, c: [{ cN: "pi", b: "<\\?", e: "\\?>", r: 10 }, { cN: "doctype", b: "<!DOCTYPE", e: ">", r: 10, c: [{ b: "\\[", e: "\\]" }] }, { cN: "comment", b: "<!--", e: "-->", r: 10 }, { cN: "cdata", b: "<\\!\\[CDATA\\[", e: "\\]\\]>", r: 10 }, { cN: "tag", b: "<style(?=\\s|>|$)", e: ">", k: { title: "style" }, c: [b], starts: { e: "</style>", rE: true, sL: "css" } }, { cN: "tag", b: "<script(?=\\s|>|$)", e: ">", k: { title: "script" }, c: [b], starts: { e: "<\/script>", rE: true, sL: "javascript" } }, { b: "<%", e: "%>", sL: "vbscript" }, { cN: "tag", b: "</?", e: "/?>", c: [{ cN: "title", b: "[^ />]+" }, b] }] } }(hljs); hljs.LANGUAGES.http = function (a) { return { i: "\\S", c: [{ cN: "status", b: "^HTTP/[0-9\\.]+", e: "$", c: [{ cN: "number", b: "\\b\\d{3}\\b" }] }, { cN: "request", b: "^[A-Z]+ (.*?) HTTP/[0-9\\.]+$", rB: true, e: "$", c: [{ cN: "string", b: " ", e: " ", eB: true, eE: true }] }, { cN: "attribute", b: "^\\w", e: ": ", eE: true, i: "\\n|\\s|=", starts: { cN: "string", e: "$" } }, { b: "\\n\\n", starts: { sL: "", eW: true } }] } }(hljs); hljs.LANGUAGES.java = function (a) { return { k: "false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws", c: [{ cN: "javadoc", b: "/\\*\\*", e: "\\*/", c: [{ cN: "javadoctag", b: "@[A-Za-z]+" }], r: 10 }, a.CLCM, a.CBLCLM, a.ASM, a.QSM, { cN: "class", bWK: true, e: "{", k: "class interface", i: ":", c: [{ bWK: true, k: "extends implements", r: 10 }, { cN: "title", b: a.UIR }] }, a.CNM, { cN: "annotation", b: "@[A-Za-z]+" }] } }(hljs); hljs.LANGUAGES.php = function (a) { var e = { cN: "variable", b: "\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*" }; var b = [a.inherit(a.ASM, { i: null }), a.inherit(a.QSM, { i: null }), { cN: "string", b: 'b"', e: '"', c: [a.BE] }, { cN: "string", b: "b'", e: "'", c: [a.BE] }]; var c = [a.BNM, a.CNM]; var d = { cN: "title", b: a.UIR }; return { cI: true, k: "and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return implements parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception php_user_filter default die require __FUNCTION__ enddeclare final try this switch continue endfor endif declare unset true false namespace trait goto instanceof insteadof __DIR__ __NAMESPACE__ __halt_compiler", c: [a.CLCM, a.HCM, { cN: "comment", b: "/\\*", e: "\\*/", c: [{ cN: "phpdoc", b: "\\s@[A-Za-z]+" }] }, { cN: "comment", eB: true, b: "__halt_compiler.+?;", eW: true }, { cN: "string", b: "<<<['\"]?\\w+['\"]?$", e: "^\\w+;", c: [a.BE] }, { cN: "preprocessor", b: "<\\?php", r: 10 }, { cN: "preprocessor", b: "\\?>" }, e, { cN: "function", bWK: true, e: "{", k: "function", i: "\\$|\\[|%", c: [d, { cN: "params", b: "\\(", e: "\\)", c: ["self", e, a.CBLCLM].concat(b).concat(c) }] }, { cN: "class", bWK: true, e: "{", k: "class", i: "[:\\(\\$]", c: [{ bWK: true, eW: true, k: "extends", c: [d] }, d] }, { b: "=>" }].concat(b).concat(c) } }(hljs); hljs.LANGUAGES.python = function (a) { var f = { cN: "prompt", b: "^(>>>|\\.\\.\\.) " }; var c = [{ cN: "string", b: "(u|b)?r?'''", e: "'''", c: [f], r: 10 }, { cN: "string", b: '(u|b)?r?"""', e: '"""', c: [f], r: 10 }, { cN: "string", b: "(u|r|ur)'", e: "'", c: [a.BE], r: 10 }, { cN: "string", b: '(u|r|ur)"', e: '"', c: [a.BE], r: 10 }, { cN: "string", b: "(b|br)'", e: "'", c: [a.BE] }, { cN: "string", b: '(b|br)"', e: '"', c: [a.BE] }].concat([a.ASM, a.QSM]); var e = { cN: "title", b: a.UIR }; var d = { cN: "params", b: "\\(", e: "\\)", c: ["self", a.CNM, f].concat(c) }; var b = { bWK: true, e: ":", i: "[${=;\\n]", c: [e, d], r: 10 }; return { k: { keyword: "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda nonlocal|10", built_in: "None True False Ellipsis NotImplemented" }, i: "(</|->|\\?)", c: c.concat([f, a.HCM, a.inherit(b, { cN: "function", k: "def" }), a.inherit(b, { cN: "class", k: "class" }), a.CNM, { cN: "decorator", b: "@", e: "$" }, { b: "\\b(print|exec)\\(" }]) } }(hljs); hljs.LANGUAGES.sql = function (a) { return { cI: true, c: [{ cN: "operator", b: "(begin|start|commit|rollback|savepoint|lock|alter|create|drop|rename|call|delete|do|handler|insert|load|replace|select|truncate|update|set|show|pragma|grant)\\b(?!:)", e: ";", eW: true, k: { keyword: "all partial global month current_timestamp using go revoke smallint indicator end-exec disconnect zone with character assertion to add current_user usage input local alter match collate real then rollback get read timestamp session_user not integer bit unique day minute desc insert execute like ilike|2 level decimal drop continue isolation found where constraints domain right national some module transaction relative second connect escape close system_user for deferred section cast current sqlstate allocate intersect deallocate numeric public preserve full goto initially asc no key output collation group by union session both last language constraint column of space foreign deferrable prior connection unknown action commit view or first into float year primary cascaded except restrict set references names table outer open select size are rows from prepare distinct leading create only next inner authorization schema corresponding option declare precision immediate else timezone_minute external varying translation true case exception join hour default double scroll value cursor descriptor values dec fetch procedure delete and false int is describe char as at in varchar null trailing any absolute current_time end grant privileges when cross check write current_date pad begin temporary exec time update catalog user sql date on identity timezone_hour natural whenever interval work order cascade diagnostics nchar having left call do handler load replace truncate start lock show pragma exists number", aggregate: "count sum min max avg" }, c: [{ cN: "string", b: "'", e: "'", c: [a.BE, { b: "''" }], r: 0 }, { cN: "string", b: '"', e: '"', c: [a.BE, { b: '""' }], r: 0 }, { cN: "string", b: "`", e: "`", c: [a.BE] }, a.CNM] }, a.CBLCLM, { cN: "comment", b: "--", e: "$" }] } }(hljs); hljs.LANGUAGES.ini = function (a) { return { cI: true, i: "[^\\s]", c: [{ cN: "comment", b: ";", e: "$" }, { cN: "title", b: "^\\[", e: "\\]" }, { cN: "setting", b: "^[a-z0-9\\[\\]_-]+[ \\t]*=[ \\t]*", e: "$", c: [{ cN: "value", eW: true, k: "on off true false yes no", c: [a.QSM, a.NM] }] }] } }(hljs); hljs.LANGUAGES.perl = function (e) { var a = "getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when"; var d = { cN: "subst", b: "[$@]\\{", e: "\\}", k: a, r: 10 }; var b = { cN: "variable", b: "\\$\\d" }; var i = { cN: "variable", b: "[\\$\\%\\@\\*](\\^\\w\\b|#\\w+(\\:\\:\\w+)*|[^\\s\\w{]|{\\w+}|\\w+(\\:\\:\\w*)*)" }; var f = [e.BE, d, b, i]; var h = { b: "->", c: [{ b: e.IR }, { b: "{", e: "}" }] }; var g = { cN: "comment", b: "^(__END__|__DATA__)", e: "\\n$", r: 5 }; var c = [b, i, e.HCM, g, { cN: "comment", b: "^\\=\\w", e: "\\=cut", eW: true }, h, { cN: "string", b: "q[qwxr]?\\s*\\(", e: "\\)", c: f, r: 5 }, { cN: "string", b: "q[qwxr]?\\s*\\[", e: "\\]", c: f, r: 5 }, { cN: "string", b: "q[qwxr]?\\s*\\{", e: "\\}", c: f, r: 5 }, { cN: "string", b: "q[qwxr]?\\s*\\|", e: "\\|", c: f, r: 5 }, { cN: "string", b: "q[qwxr]?\\s*\\<", e: "\\>", c: f, r: 5 }, { cN: "string", b: "qw\\s+q", e: "q", c: f, r: 5 }, { cN: "string", b: "'", e: "'", c: [e.BE], r: 0 }, { cN: "string", b: '"', e: '"', c: f, r: 0 }, { cN: "string", b: "`", e: "`", c: [e.BE] }, { cN: "string", b: "{\\w+}", r: 0 }, { cN: "string", b: "-?\\w+\\s*\\=\\>", r: 0 }, { cN: "number", b: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b", r: 0 }, { b: "(" + e.RSR + "|\\b(split|return|print|reverse|grep)\\b)\\s*", k: "split return print reverse grep", r: 0, c: [e.HCM, g, { cN: "regexp", b: "(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*", r: 10 }, { cN: "regexp", b: "(m|qr)?/", e: "/[a-z]*", c: [e.BE], r: 0 }] }, { cN: "sub", bWK: true, e: "(\\s*\\(.*?\\))?[;{]", k: "sub", r: 5 }, { cN: "operator", b: "-\\w\\b", r: 0 }]; d.c = c; h.c[1].c = c; return { k: a, c: c } }(hljs); hljs.LANGUAGES.scala = function (a) { var c = { cN: "annotation", b: "@[A-Za-z]+" }; var b = { cN: "string", b: 'u?r?"""', e: '"""', r: 10 }; return { k: "type yield lazy override def with val var false true sealed abstract private trait object null if for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws", c: [{ cN: "javadoc", b: "/\\*\\*", e: "\\*/", c: [{ cN: "javadoctag", b: "@[A-Za-z]+" }], r: 10 }, a.CLCM, a.CBLCLM, a.ASM, a.QSM, b, { cN: "class", b: "((case )?class |object |trait )", e: "({|$)", i: ":", k: "case class trait object", c: [{ bWK: true, k: "extends with", r: 10 }, { cN: "title", b: a.UIR }, { cN: "params", b: "\\(", e: "\\)", c: [a.ASM, a.QSM, b, c] }] }, a.CNM, c] } }(hljs); hljs.LANGUAGES.json = function (a) { var e = { literal: "true false null" }; var d = [a.QSM, a.CNM]; var c = { cN: "value", e: ",", eW: true, eE: true, c: d, k: e }; var b = { b: "{", e: "}", c: [{ cN: "attribute", b: '\\s*"', e: '"\\s*:\\s*', eB: true, eE: true, c: [a.BE], i: "\\n", starts: c }], i: "\\S" }; var f = { b: "\\[", e: "\\]", c: [a.inherit(c, { cN: null })], i: "\\S" }; d.splice(d.length, 0, b, f); return { c: d, k: e, i: "\\S" } }(hljs); hljs.LANGUAGES.cpp = function (a) { var b = { keyword: "false int float while private char catch export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long throw volatile static protected bool template mutable if public friend do return goto auto void enum else break new extern using true class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue wchar_t inline delete alignof char16_t char32_t constexpr decltype noexcept nullptr static_assert thread_local restrict _Bool complex", built_in: "std string cin cout cerr clog stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr" }; return { k: b, i: "</", c: [a.CLCM, a.CBLCLM, a.QSM, { cN: "string", b: "'\\\\?.", e: "'", i: "." }, { cN: "number", b: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)" }, a.CNM, { cN: "preprocessor", b: "#", e: "$" }, { cN: "stl_container", b: "\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<", e: ">", k: b, r: 10, c: ["self"] }] } }(hljs);;/*! Select2 4.0.5 | https://github.com/select2/select2/blob/master/LICENSE.md */!function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof module && module.exports ? module.exports = function (b, c) { return void 0 === c && (c = "undefined" != typeof window ? require("jquery") : require("jquery")(b)), a(c), c } : a(jQuery) }(function (a) { var b = function () { if (a && a.fn && a.fn.select2 && a.fn.select2.amd) var b = a.fn.select2.amd; var b; return function () { if (!b || !b.requirejs) { b ? c = b : b = {}; var a, c, d; !function (b) { function e(a, b) { return v.call(a, b) } function f(a, b) { var c, d, e, f, g, h, i, j, k, l, m, n, o = b && b.split("/"), p = t.map, q = p && p["*"] || {}; if (a) { for (a = a.split("/"), g = a.length - 1, t.nodeIdCompat && x.test(a[g]) && (a[g] = a[g].replace(x, "")), "." === a[0].charAt(0) && o && (n = o.slice(0, o.length - 1), a = n.concat(a)), k = 0; k < a.length; k++)if ("." === (m = a[k])) a.splice(k, 1), k -= 1; else if (".." === m) { if (0 === k || 1 === k && ".." === a[2] || ".." === a[k - 1]) continue; k > 0 && (a.splice(k - 1, 2), k -= 2) } a = a.join("/") } if ((o || q) && p) { for (c = a.split("/"), k = c.length; k > 0; k -= 1) { if (d = c.slice(0, k).join("/"), o) for (l = o.length; l > 0; l -= 1)if ((e = p[o.slice(0, l).join("/")]) && (e = e[d])) { f = e, h = k; break } if (f) break; !i && q && q[d] && (i = q[d], j = k) } !f && i && (f = i, h = j), f && (c.splice(0, h, f), a = c.join("/")) } return a } function g(a, c) { return function () { var d = w.call(arguments, 0); return "string" != typeof d[0] && 1 === d.length && d.push(null), o.apply(b, d.concat([a, c])) } } function h(a) { return function (b) { return f(b, a) } } function i(a) { return function (b) { r[a] = b } } function j(a) { if (e(s, a)) { var c = s[a]; delete s[a], u[a] = !0, n.apply(b, c) } if (!e(r, a) && !e(u, a)) throw new Error("No " + a); return r[a] } function k(a) { var b, c = a ? a.indexOf("!") : -1; return c > -1 && (b = a.substring(0, c), a = a.substring(c + 1, a.length)), [b, a] } function l(a) { return a ? k(a) : [] } function m(a) { return function () { return t && t.config && t.config[a] || {} } } var n, o, p, q, r = {}, s = {}, t = {}, u = {}, v = Object.prototype.hasOwnProperty, w = [].slice, x = /\.js$/; p = function (a, b) { var c, d = k(a), e = d[0], g = b[1]; return a = d[1], e && (e = f(e, g), c = j(e)), e ? a = c && c.normalize ? c.normalize(a, h(g)) : f(a, g) : (a = f(a, g), d = k(a), e = d[0], a = d[1], e && (c = j(e))), { f: e ? e + "!" + a : a, n: a, pr: e, p: c } }, q = { require: function (a) { return g(a) }, exports: function (a) { var b = r[a]; return void 0 !== b ? b : r[a] = {} }, module: function (a) { return { id: a, uri: "", exports: r[a], config: m(a) } } }, n = function (a, c, d, f) { var h, k, m, n, o, t, v, w = [], x = typeof d; if (f = f || a, t = l(f), "undefined" === x || "function" === x) { for (c = !c.length && d.length ? ["require", "exports", "module"] : c, o = 0; o < c.length; o += 1)if (n = p(c[o], t), "require" === (k = n.f)) w[o] = q.require(a); else if ("exports" === k) w[o] = q.exports(a), v = !0; else if ("module" === k) h = w[o] = q.module(a); else if (e(r, k) || e(s, k) || e(u, k)) w[o] = j(k); else { if (!n.p) throw new Error(a + " missing " + k); n.p.load(n.n, g(f, !0), i(k), {}), w[o] = r[k] } m = d ? d.apply(r[a], w) : void 0, a && (h && h.exports !== b && h.exports !== r[a] ? r[a] = h.exports : m === b && v || (r[a] = m)) } else a && (r[a] = d) }, a = c = o = function (a, c, d, e, f) { if ("string" == typeof a) return q[a] ? q[a](c) : j(p(a, l(c)).f); if (!a.splice) { if (t = a, t.deps && o(t.deps, t.callback), !c) return; c.splice ? (a = c, c = d, d = null) : a = b } return c = c || function () { }, "function" == typeof d && (d = e, e = f), e ? n(b, a, c, d) : setTimeout(function () { n(b, a, c, d) }, 4), o }, o.config = function (a) { return o(a) }, a._defined = r, d = function (a, b, c) { if ("string" != typeof a) throw new Error("See almond README: incorrect module build, no module name"); b.splice || (c = b, b = []), e(r, a) || e(s, a) || (s[a] = [a, b, c]) }, d.amd = { jQuery: !0 } }(), b.requirejs = a, b.require = c, b.define = d } }(), b.define("almond", function () { }), b.define("jquery", [], function () { var b = a || $; return null == b && console && console.error && console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."), b }), b.define("select2/utils", ["jquery"], function (a) { function b(a) { var b = a.prototype, c = []; for (var d in b) { "function" == typeof b[d] && ("constructor" !== d && c.push(d)) } return c } var c = {}; c.Extend = function (a, b) { function c() { this.constructor = a } var d = {}.hasOwnProperty; for (var e in b) d.call(b, e) && (a[e] = b[e]); return c.prototype = b.prototype, a.prototype = new c, a.__super__ = b.prototype, a }, c.Decorate = function (a, c) { function d() { var b = Array.prototype.unshift, d = c.prototype.constructor.length, e = a.prototype.constructor; d > 0 && (b.call(arguments, a.prototype.constructor), e = c.prototype.constructor), e.apply(this, arguments) } function e() { this.constructor = d } var f = b(c), g = b(a); c.displayName = a.displayName, d.prototype = new e; for (var h = 0; h < g.length; h++) { var i = g[h]; d.prototype[i] = a.prototype[i] } for (var j = (function (a) { var b = function () { }; a in d.prototype && (b = d.prototype[a]); var e = c.prototype[a]; return function () { return Array.prototype.unshift.call(arguments, b), e.apply(this, arguments) } }), k = 0; k < f.length; k++) { var l = f[k]; d.prototype[l] = j(l) } return d }; var d = function () { this.listeners = {} }; return d.prototype.on = function (a, b) { this.listeners = this.listeners || {}, a in this.listeners ? this.listeners[a].push(b) : this.listeners[a] = [b] }, d.prototype.trigger = function (a) { var b = Array.prototype.slice, c = b.call(arguments, 1); this.listeners = this.listeners || {}, null == c && (c = []), 0 === c.length && c.push({}), c[0]._type = a, a in this.listeners && this.invoke(this.listeners[a], b.call(arguments, 1)), "*" in this.listeners && this.invoke(this.listeners["*"], arguments) }, d.prototype.invoke = function (a, b) { for (var c = 0, d = a.length; c < d; c++)a[c].apply(this, b) }, c.Observable = d, c.generateChars = function (a) { for (var b = "", c = 0; c < a; c++) { b += Math.floor(36 * Math.random()).toString(36) } return b }, c.bind = function (a, b) { return function () { a.apply(b, arguments) } }, c._convertData = function (a) { for (var b in a) { var c = b.split("-"), d = a; if (1 !== c.length) { for (var e = 0; e < c.length; e++) { var f = c[e]; f = f.substring(0, 1).toLowerCase() + f.substring(1), f in d || (d[f] = {}), e == c.length - 1 && (d[f] = a[b]), d = d[f] } delete a[b] } } return a }, c.hasScroll = function (b, c) { var d = a(c), e = c.style.overflowX, f = c.style.overflowY; return (e !== f || "hidden" !== f && "visible" !== f) && ("scroll" === e || "scroll" === f || (d.innerHeight() < c.scrollHeight || d.innerWidth() < c.scrollWidth)) }, c.escapeMarkup = function (a) { var b = { "\\": "&#92;", "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#47;" }; return "string" != typeof a ? a : String(a).replace(/[&<>"'\/\\]/g, function (a) { return b[a] }) }, c.appendMany = function (b, c) { if ("1.7" === a.fn.jquery.substr(0, 3)) { var d = a(); a.map(c, function (a) { d = d.add(a) }), c = d } b.append(c) }, c }), b.define("select2/results", ["jquery", "./utils"], function (a, b) { function c(a, b, d) { this.$element = a, this.data = d, this.options = b, c.__super__.constructor.call(this) } return b.Extend(c, b.Observable), c.prototype.render = function () { var b = a('<ul class="select2-results__options" role="tree"></ul>'); return this.options.get("multiple") && b.attr("aria-multiselectable", "true"), this.$results = b, b }, c.prototype.clear = function () { this.$results.empty() }, c.prototype.displayMessage = function (b) { var c = this.options.get("escapeMarkup"); this.clear(), this.hideLoading(); var d = a('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'), e = this.options.get("translations").get(b.message); d.append(c(e(b.args))), d[0].className += " select2-results__message", this.$results.append(d) }, c.prototype.hideMessages = function () { this.$results.find(".select2-results__message").remove() }, c.prototype.append = function (a) { this.hideLoading(); var b = []; if (null == a.results || 0 === a.results.length) return void (0 === this.$results.children().length && this.trigger("results:message", { message: "noResults" })); a.results = this.sort(a.results); for (var c = 0; c < a.results.length; c++) { var d = a.results[c], e = this.option(d); b.push(e) } this.$results.append(b) }, c.prototype.position = function (a, b) { b.find(".select2-results").append(a) }, c.prototype.sort = function (a) { return this.options.get("sorter")(a) }, c.prototype.highlightFirstItem = function () { var a = this.$results.find(".select2-results__option[aria-selected]"), b = a.filter("[aria-selected=true]"); b.length > 0 ? b.first().trigger("mouseenter") : a.first().trigger("mouseenter"), this.ensureHighlightVisible() }, c.prototype.setClasses = function () { var b = this; this.data.current(function (c) { var d = a.map(c, function (a) { return a.id.toString() }); b.$results.find(".select2-results__option[aria-selected]").each(function () { var b = a(this), c = a.data(this, "data"), e = "" + c.id; null != c.element && c.element.selected || null == c.element && a.inArray(e, d) > -1 ? b.attr("aria-selected", "true") : b.attr("aria-selected", "false") }) }) }, c.prototype.showLoading = function (a) { this.hideLoading(); var b = this.options.get("translations").get("searching"), c = { disabled: !0, loading: !0, text: b(a) }, d = this.option(c); d.className += " loading-results", this.$results.prepend(d) }, c.prototype.hideLoading = function () { this.$results.find(".loading-results").remove() }, c.prototype.option = function (b) { var c = document.createElement("li"); c.className = "select2-results__option"; var d = { role: "treeitem", "aria-selected": "false" }; b.disabled && (delete d["aria-selected"], d["aria-disabled"] = "true"), null == b.id && delete d["aria-selected"], null != b._resultId && (c.id = b._resultId), b.title && (c.title = b.title), b.children && (d.role = "group", d["aria-label"] = b.text, delete d["aria-selected"]); for (var e in d) { var f = d[e]; c.setAttribute(e, f) } if (b.children) { var g = a(c), h = document.createElement("strong"); h.className = "select2-results__group"; a(h); this.template(b, h); for (var i = [], j = 0; j < b.children.length; j++) { var k = b.children[j], l = this.option(k); i.push(l) } var m = a("<ul></ul>", { class: "select2-results__options select2-results__options--nested" }); m.append(i), g.append(h), g.append(m) } else this.template(b, c); return a.data(c, "data", b), c }, c.prototype.bind = function (b, c) { var d = this, e = b.id + "-results"; this.$results.attr("id", e), b.on("results:all", function (a) { d.clear(), d.append(a.data), b.isOpen() && (d.setClasses(), d.highlightFirstItem()) }), b.on("results:append", function (a) { d.append(a.data), b.isOpen() && d.setClasses() }), b.on("query", function (a) { d.hideMessages(), d.showLoading(a) }), b.on("select", function () { b.isOpen() && (d.setClasses(), d.highlightFirstItem()) }), b.on("unselect", function () { b.isOpen() && (d.setClasses(), d.highlightFirstItem()) }), b.on("open", function () { d.$results.attr("aria-expanded", "true"), d.$results.attr("aria-hidden", "false"), d.setClasses(), d.ensureHighlightVisible() }), b.on("close", function () { d.$results.attr("aria-expanded", "false"), d.$results.attr("aria-hidden", "true"), d.$results.removeAttr("aria-activedescendant") }), b.on("results:toggle", function () { var a = d.getHighlightedResults(); 0 !== a.length && a.trigger("mouseup") }), b.on("results:select", function () { var a = d.getHighlightedResults(); if (0 !== a.length) { var b = a.data("data"); "true" == a.attr("aria-selected") ? d.trigger("close", {}) : d.trigger("select", { data: b }) } }), b.on("results:previous", function () { var a = d.getHighlightedResults(), b = d.$results.find("[aria-selected]"), c = b.index(a); if (0 !== c) { var e = c - 1; 0 === a.length && (e = 0); var f = b.eq(e); f.trigger("mouseenter"); var g = d.$results.offset().top, h = f.offset().top, i = d.$results.scrollTop() + (h - g); 0 === e ? d.$results.scrollTop(0) : h - g < 0 && d.$results.scrollTop(i) } }), b.on("results:next", function () { var a = d.getHighlightedResults(), b = d.$results.find("[aria-selected]"), c = b.index(a), e = c + 1; if (!(e >= b.length)) { var f = b.eq(e); f.trigger("mouseenter"); var g = d.$results.offset().top + d.$results.outerHeight(!1), h = f.offset().top + f.outerHeight(!1), i = d.$results.scrollTop() + h - g; 0 === e ? d.$results.scrollTop(0) : h > g && d.$results.scrollTop(i) } }), b.on("results:focus", function (a) { a.element.addClass("select2-results__option--highlighted") }), b.on("results:message", function (a) { d.displayMessage(a) }), a.fn.mousewheel && this.$results.on("mousewheel", function (a) { var b = d.$results.scrollTop(), c = d.$results.get(0).scrollHeight - b + a.deltaY, e = a.deltaY > 0 && b - a.deltaY <= 0, f = a.deltaY < 0 && c <= d.$results.height(); e ? (d.$results.scrollTop(0), a.preventDefault(), a.stopPropagation()) : f && (d.$results.scrollTop(d.$results.get(0).scrollHeight - d.$results.height()), a.preventDefault(), a.stopPropagation()) }), this.$results.on("mouseup", ".select2-results__option[aria-selected]", function (b) { var c = a(this), e = c.data("data"); if ("true" === c.attr("aria-selected")) return void (d.options.get("multiple") ? d.trigger("unselect", { originalEvent: b, data: e }) : d.trigger("close", {})); d.trigger("select", { originalEvent: b, data: e }) }), this.$results.on("mouseenter", ".select2-results__option[aria-selected]", function (b) { var c = a(this).data("data"); d.getHighlightedResults().removeClass("select2-results__option--highlighted"), d.trigger("results:focus", { data: c, element: a(this) }) }) }, c.prototype.getHighlightedResults = function () { return this.$results.find(".select2-results__option--highlighted") }, c.prototype.destroy = function () { this.$results.remove() }, c.prototype.ensureHighlightVisible = function () { var a = this.getHighlightedResults(); if (0 !== a.length) { var b = this.$results.find("[aria-selected]"), c = b.index(a), d = this.$results.offset().top, e = a.offset().top, f = this.$results.scrollTop() + (e - d), g = e - d; f -= 2 * a.outerHeight(!1), c <= 2 ? this.$results.scrollTop(0) : (g > this.$results.outerHeight() || g < 0) && this.$results.scrollTop(f) } }, c.prototype.template = function (b, c) { var d = this.options.get("templateResult"), e = this.options.get("escapeMarkup"), f = d(b, c); null == f ? c.style.display = "none" : "string" == typeof f ? c.innerHTML = e(f) : a(c).append(f) }, c }), b.define("select2/keys", [], function () { return { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, ESC: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, DELETE: 46 } }), b.define("select2/selection/base", ["jquery", "../utils", "../keys"], function (a, b, c) { function d(a, b) { this.$element = a, this.options = b, d.__super__.constructor.call(this) } return b.Extend(d, b.Observable), d.prototype.render = function () { var b = a('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>'); return this._tabindex = 0, null != this.$element.data("old-tabindex") ? this._tabindex = this.$element.data("old-tabindex") : null != this.$element.attr("tabindex") && (this._tabindex = this.$element.attr("tabindex")), b.attr("title", this.$element.attr("title")), b.attr("tabindex", this._tabindex), this.$selection = b, b }, d.prototype.bind = function (a, b) { var d = this, e = (a.id, a.id + "-results"); this.container = a, this.$selection.on("focus", function (a) { d.trigger("focus", a) }), this.$selection.on("blur", function (a) { d._handleBlur(a) }), this.$selection.on("keydown", function (a) { d.trigger("keypress", a), a.which === c.SPACE && a.preventDefault() }), a.on("results:focus", function (a) { d.$selection.attr("aria-activedescendant", a.data._resultId) }), a.on("selection:update", function (a) { d.update(a.data) }), a.on("open", function () { d.$selection.attr("aria-expanded", "true"), d.$selection.attr("aria-owns", e), d._attachCloseHandler(a) }), a.on("close", function () { d.$selection.attr("aria-expanded", "false"), d.$selection.removeAttr("aria-activedescendant"), d.$selection.removeAttr("aria-owns"), d.$selection.focus(), d._detachCloseHandler(a) }), a.on("enable", function () { d.$selection.attr("tabindex", d._tabindex) }), a.on("disable", function () { d.$selection.attr("tabindex", "-1") }) }, d.prototype._handleBlur = function (b) { var c = this; window.setTimeout(function () { document.activeElement == c.$selection[0] || a.contains(c.$selection[0], document.activeElement) || c.trigger("blur", b) }, 1) }, d.prototype._attachCloseHandler = function (b) { a(document.body).on("mousedown.select2." + b.id, function (b) { var c = a(b.target), d = c.closest(".select2"); a(".select2.select2-container--open").each(function () { var b = a(this); this != d[0] && b.data("element").select2("close") }) }) }, d.prototype._detachCloseHandler = function (b) { a(document.body).off("mousedown.select2." + b.id) }, d.prototype.position = function (a, b) { b.find(".selection").append(a) }, d.prototype.destroy = function () { this._detachCloseHandler(this.container) }, d.prototype.update = function (a) { throw new Error("The `update` method must be defined in child classes.") }, d }), b.define("select2/selection/single", ["jquery", "./base", "../utils", "../keys"], function (a, b, c, d) { function e() { e.__super__.constructor.apply(this, arguments) } return c.Extend(e, b), e.prototype.render = function () { var a = e.__super__.render.call(this); return a.addClass("select2-selection--single"), a.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'), a }, e.prototype.bind = function (a, b) { var c = this; e.__super__.bind.apply(this, arguments); var d = a.id + "-container"; this.$selection.find(".select2-selection__rendered").attr("id", d), this.$selection.attr("aria-labelledby", d), this.$selection.on("mousedown", function (a) { 1 === a.which && c.trigger("toggle", { originalEvent: a }) }), this.$selection.on("focus", function (a) { }), this.$selection.on("blur", function (a) { }), a.on("focus", function (b) { a.isOpen() || c.$selection.focus() }), a.on("selection:update", function (a) { c.update(a.data) }) }, e.prototype.clear = function () { this.$selection.find(".select2-selection__rendered").empty() }, e.prototype.display = function (a, b) { var c = this.options.get("templateSelection"); return this.options.get("escapeMarkup")(c(a, b)) }, e.prototype.selectionContainer = function () { return a("<span></span>") }, e.prototype.update = function (a) { if (0 === a.length) return void this.clear(); var b = a[0], c = this.$selection.find(".select2-selection__rendered"), d = this.display(b, c); c.empty().append(d), c.prop("title", b.title || b.text) }, e }), b.define("select2/selection/multiple", ["jquery", "./base", "../utils"], function (a, b, c) { function d(a, b) { d.__super__.constructor.apply(this, arguments) } return c.Extend(d, b), d.prototype.render = function () { var a = d.__super__.render.call(this); return a.addClass("select2-selection--multiple"), a.html('<ul class="select2-selection__rendered"></ul>'), a }, d.prototype.bind = function (b, c) { var e = this; d.__super__.bind.apply(this, arguments), this.$selection.on("click", function (a) { e.trigger("toggle", { originalEvent: a }) }), this.$selection.on("click", ".select2-selection__choice__remove", function (b) { if (!e.options.get("disabled")) { var c = a(this), d = c.parent(), f = d.data("data"); e.trigger("unselect", { originalEvent: b, data: f }) } }) }, d.prototype.clear = function () { this.$selection.find(".select2-selection__rendered").empty() }, d.prototype.display = function (a, b) { var c = this.options.get("templateSelection"); return this.options.get("escapeMarkup")(c(a, b)) }, d.prototype.selectionContainer = function () { return a('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>') }, d.prototype.update = function (a) { if (this.clear(), 0 !== a.length) { for (var b = [], d = 0; d < a.length; d++) { var e = a[d], f = this.selectionContainer(), g = this.display(e, f); f.append(g), f.prop("title", e.title || e.text), f.data("data", e), b.push(f) } var h = this.$selection.find(".select2-selection__rendered"); c.appendMany(h, b) } }, d }), b.define("select2/selection/placeholder", ["../utils"], function (a) { function b(a, b, c) { this.placeholder = this.normalizePlaceholder(c.get("placeholder")), a.call(this, b, c) } return b.prototype.normalizePlaceholder = function (a, b) { return "string" == typeof b && (b = { id: "", text: b }), b }, b.prototype.createPlaceholder = function (a, b) { var c = this.selectionContainer(); return c.html(this.display(b)), c.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"), c }, b.prototype.update = function (a, b) { var c = 1 == b.length && b[0].id != this.placeholder.id; if (b.length > 1 || c) return a.call(this, b); this.clear(); var d = this.createPlaceholder(this.placeholder); this.$selection.find(".select2-selection__rendered").append(d) }, b }), b.define("select2/selection/allowClear", ["jquery", "../keys"], function (a, b) { function c() { } return c.prototype.bind = function (a, b, c) { var d = this; a.call(this, b, c), null == this.placeholder && this.options.get("debug") && window.console && console.error && console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."), this.$selection.on("mousedown", ".select2-selection__clear", function (a) { d._handleClear(a) }), b.on("keypress", function (a) { d._handleKeyboardClear(a, b) }) }, c.prototype._handleClear = function (a, b) { if (!this.options.get("disabled")) { var c = this.$selection.find(".select2-selection__clear"); if (0 !== c.length) { b.stopPropagation(); for (var d = c.data("data"), e = 0; e < d.length; e++) { var f = { data: d[e] }; if (this.trigger("unselect", f), f.prevented) return } this.$element.val(this.placeholder.id).trigger("change"), this.trigger("toggle", {}) } } }, c.prototype._handleKeyboardClear = function (a, c, d) { d.isOpen() || c.which != b.DELETE && c.which != b.BACKSPACE || this._handleClear(c) }, c.prototype.update = function (b, c) { if (b.call(this, c), !(this.$selection.find(".select2-selection__placeholder").length > 0 || 0 === c.length)) { var d = a('<span class="select2-selection__clear">&times;</span>'); d.data("data", c), this.$selection.find(".select2-selection__rendered").prepend(d) } }, c }), b.define("select2/selection/search", ["jquery", "../utils", "../keys"], function (a, b, c) { function d(a, b, c) { a.call(this, b, c) } return d.prototype.render = function (b) { var c = a('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>'); this.$searchContainer = c, this.$search = c.find("input"); var d = b.call(this); return this._transferTabIndex(), d }, d.prototype.bind = function (a, b, d) { var e = this; a.call(this, b, d), b.on("open", function () { e.$search.trigger("focus") }), b.on("close", function () { e.$search.val(""), e.$search.removeAttr("aria-activedescendant"), e.$search.trigger("focus") }), b.on("enable", function () { e.$search.prop("disabled", !1), e._transferTabIndex() }), b.on("disable", function () { e.$search.prop("disabled", !0) }), b.on("focus", function (a) { e.$search.trigger("focus") }), b.on("results:focus", function (a) { e.$search.attr("aria-activedescendant", a.id) }), this.$selection.on("focusin", ".select2-search--inline", function (a) { e.trigger("focus", a) }), this.$selection.on("focusout", ".select2-search--inline", function (a) { e._handleBlur(a) }), this.$selection.on("keydown", ".select2-search--inline", function (a) { if (a.stopPropagation(), e.trigger("keypress", a), e._keyUpPrevented = a.isDefaultPrevented(), a.which === c.BACKSPACE && "" === e.$search.val()) { var b = e.$searchContainer.prev(".select2-selection__choice"); if (b.length > 0) { var d = b.data("data"); e.searchRemoveChoice(d), a.preventDefault() } } }); var f = document.documentMode, g = f && f <= 11; this.$selection.on("input.searchcheck", ".select2-search--inline", function (a) { if (g) return void e.$selection.off("input.search input.searchcheck"); e.$selection.off("keyup.search") }), this.$selection.on("keyup.search input.search", ".select2-search--inline", function (a) { if (g && "input" === a.type) return void e.$selection.off("input.search input.searchcheck"); var b = a.which; b != c.SHIFT && b != c.CTRL && b != c.ALT && b != c.TAB && e.handleSearch(a) }) }, d.prototype._transferTabIndex = function (a) { this.$search.attr("tabindex", this.$selection.attr("tabindex")), this.$selection.attr("tabindex", "-1") }, d.prototype.createPlaceholder = function (a, b) { this.$search.attr("placeholder", b.text) }, d.prototype.update = function (a, b) { var c = this.$search[0] == document.activeElement; this.$search.attr("placeholder", ""), a.call(this, b), this.$selection.find(".select2-selection__rendered").append(this.$searchContainer), this.resizeSearch(), c && this.$search.focus() }, d.prototype.handleSearch = function () { if (this.resizeSearch(), !this._keyUpPrevented) { var a = this.$search.val(); this.trigger("query", { term: a }) } this._keyUpPrevented = !1 }, d.prototype.searchRemoveChoice = function (a, b) { this.trigger("unselect", { data: b }), this.$search.val(b.text), this.handleSearch() }, d.prototype.resizeSearch = function () { this.$search.css("width", "25px"); var a = ""; if ("" !== this.$search.attr("placeholder")) a = this.$selection.find(".select2-selection__rendered").innerWidth(); else { a = .75 * (this.$search.val().length + 1) + "em" } this.$search.css("width", a) }, d }), b.define("select2/selection/eventRelay", ["jquery"], function (a) { function b() { } return b.prototype.bind = function (b, c, d) { var e = this, f = ["open", "opening", "close", "closing", "select", "selecting", "unselect", "unselecting"], g = ["opening", "closing", "selecting", "unselecting"]; b.call(this, c, d), c.on("*", function (b, c) { if (-1 !== a.inArray(b, f)) { c = c || {}; var d = a.Event("select2:" + b, { params: c }); e.$element.trigger(d), -1 !== a.inArray(b, g) && (c.prevented = d.isDefaultPrevented()) } }) }, b }), b.define("select2/translation", ["jquery", "require"], function (a, b) { function c(a) { this.dict = a || {} } return c.prototype.all = function () { return this.dict }, c.prototype.get = function (a) { return this.dict[a] }, c.prototype.extend = function (b) { this.dict = a.extend({}, b.all(), this.dict) }, c._cache = {}, c.loadPath = function (a) { if (!(a in c._cache)) { var d = b(a); c._cache[a] = d } return new c(c._cache[a]) }, c }), b.define("select2/diacritics", [], function () { return { "Ⓐ": "A", "Ａ": "A", "À": "A", "Á": "A", "Â": "A", "Ầ": "A", "Ấ": "A", "Ẫ": "A", "Ẩ": "A", "Ã": "A", "Ā": "A", "Ă": "A", "Ằ": "A", "Ắ": "A", "Ẵ": "A", "Ẳ": "A", "Ȧ": "A", "Ǡ": "A", "Ä": "A", "Ǟ": "A", "Ả": "A", "Å": "A", "Ǻ": "A", "Ǎ": "A", "Ȁ": "A", "Ȃ": "A", "Ạ": "A", "Ậ": "A", "Ặ": "A", "Ḁ": "A", "Ą": "A", "Ⱥ": "A", "Ɐ": "A", "Ꜳ": "AA", "Æ": "AE", "Ǽ": "AE", "Ǣ": "AE", "Ꜵ": "AO", "Ꜷ": "AU", "Ꜹ": "AV", "Ꜻ": "AV", "Ꜽ": "AY", "Ⓑ": "B", "Ｂ": "B", "Ḃ": "B", "Ḅ": "B", "Ḇ": "B", "Ƀ": "B", "Ƃ": "B", "Ɓ": "B", "Ⓒ": "C", "Ｃ": "C", "Ć": "C", "Ĉ": "C", "Ċ": "C", "Č": "C", "Ç": "C", "Ḉ": "C", "Ƈ": "C", "Ȼ": "C", "Ꜿ": "C", "Ⓓ": "D", "Ｄ": "D", "Ḋ": "D", "Ď": "D", "Ḍ": "D", "Ḑ": "D", "Ḓ": "D", "Ḏ": "D", "Đ": "D", "Ƌ": "D", "Ɗ": "D", "Ɖ": "D", "Ꝺ": "D", "Ǳ": "DZ", "Ǆ": "DZ", "ǲ": "Dz", "ǅ": "Dz", "Ⓔ": "E", "Ｅ": "E", "È": "E", "É": "E", "Ê": "E", "Ề": "E", "Ế": "E", "Ễ": "E", "Ể": "E", "Ẽ": "E", "Ē": "E", "Ḕ": "E", "Ḗ": "E", "Ĕ": "E", "Ė": "E", "Ë": "E", "Ẻ": "E", "Ě": "E", "Ȅ": "E", "Ȇ": "E", "Ẹ": "E", "Ệ": "E", "Ȩ": "E", "Ḝ": "E", "Ę": "E", "Ḙ": "E", "Ḛ": "E", "Ɛ": "E", "Ǝ": "E", "Ⓕ": "F", "Ｆ": "F", "Ḟ": "F", "Ƒ": "F", "Ꝼ": "F", "Ⓖ": "G", "Ｇ": "G", "Ǵ": "G", "Ĝ": "G", "Ḡ": "G", "Ğ": "G", "Ġ": "G", "Ǧ": "G", "Ģ": "G", "Ǥ": "G", "Ɠ": "G", "Ꞡ": "G", "Ᵹ": "G", "Ꝿ": "G", "Ⓗ": "H", "Ｈ": "H", "Ĥ": "H", "Ḣ": "H", "Ḧ": "H", "Ȟ": "H", "Ḥ": "H", "Ḩ": "H", "Ḫ": "H", "Ħ": "H", "Ⱨ": "H", "Ⱶ": "H", "Ɥ": "H", "Ⓘ": "I", "Ｉ": "I", "Ì": "I", "Í": "I", "Î": "I", "Ĩ": "I", "Ī": "I", "Ĭ": "I", "İ": "I", "Ï": "I", "Ḯ": "I", "Ỉ": "I", "Ǐ": "I", "Ȉ": "I", "Ȋ": "I", "Ị": "I", "Į": "I", "Ḭ": "I", "Ɨ": "I", "Ⓙ": "J", "Ｊ": "J", "Ĵ": "J", "Ɉ": "J", "Ⓚ": "K", "Ｋ": "K", "Ḱ": "K", "Ǩ": "K", "Ḳ": "K", "Ķ": "K", "Ḵ": "K", "Ƙ": "K", "Ⱪ": "K", "Ꝁ": "K", "Ꝃ": "K", "Ꝅ": "K", "Ꞣ": "K", "Ⓛ": "L", "Ｌ": "L", "Ŀ": "L", "Ĺ": "L", "Ľ": "L", "Ḷ": "L", "Ḹ": "L", "Ļ": "L", "Ḽ": "L", "Ḻ": "L", "Ł": "L", "Ƚ": "L", "Ɫ": "L", "Ⱡ": "L", "Ꝉ": "L", "Ꝇ": "L", "Ꞁ": "L", "Ǉ": "LJ", "ǈ": "Lj", "Ⓜ": "M", "Ｍ": "M", "Ḿ": "M", "Ṁ": "M", "Ṃ": "M", "Ɱ": "M", "Ɯ": "M", "Ⓝ": "N", "Ｎ": "N", "Ǹ": "N", "Ń": "N", "Ñ": "N", "Ṅ": "N", "Ň": "N", "Ṇ": "N", "Ņ": "N", "Ṋ": "N", "Ṉ": "N", "Ƞ": "N", "Ɲ": "N", "Ꞑ": "N", "Ꞥ": "N", "Ǌ": "NJ", "ǋ": "Nj", "Ⓞ": "O", "Ｏ": "O", "Ò": "O", "Ó": "O", "Ô": "O", "Ồ": "O", "Ố": "O", "Ỗ": "O", "Ổ": "O", "Õ": "O", "Ṍ": "O", "Ȭ": "O", "Ṏ": "O", "Ō": "O", "Ṑ": "O", "Ṓ": "O", "Ŏ": "O", "Ȯ": "O", "Ȱ": "O", "Ö": "O", "Ȫ": "O", "Ỏ": "O", "Ő": "O", "Ǒ": "O", "Ȍ": "O", "Ȏ": "O", "Ơ": "O", "Ờ": "O", "Ớ": "O", "Ỡ": "O", "Ở": "O", "Ợ": "O", "Ọ": "O", "Ộ": "O", "Ǫ": "O", "Ǭ": "O", "Ø": "O", "Ǿ": "O", "Ɔ": "O", "Ɵ": "O", "Ꝋ": "O", "Ꝍ": "O", "Ƣ": "OI", "Ꝏ": "OO", "Ȣ": "OU", "Ⓟ": "P", "Ｐ": "P", "Ṕ": "P", "Ṗ": "P", "Ƥ": "P", "Ᵽ": "P", "Ꝑ": "P", "Ꝓ": "P", "Ꝕ": "P", "Ⓠ": "Q", "Ｑ": "Q", "Ꝗ": "Q", "Ꝙ": "Q", "Ɋ": "Q", "Ⓡ": "R", "Ｒ": "R", "Ŕ": "R", "Ṙ": "R", "Ř": "R", "Ȑ": "R", "Ȓ": "R", "Ṛ": "R", "Ṝ": "R", "Ŗ": "R", "Ṟ": "R", "Ɍ": "R", "Ɽ": "R", "Ꝛ": "R", "Ꞧ": "R", "Ꞃ": "R", "Ⓢ": "S", "Ｓ": "S", "ẞ": "S", "Ś": "S", "Ṥ": "S", "Ŝ": "S", "Ṡ": "S", "Š": "S", "Ṧ": "S", "Ṣ": "S", "Ṩ": "S", "Ș": "S", "Ş": "S", "Ȿ": "S", "Ꞩ": "S", "Ꞅ": "S", "Ⓣ": "T", "Ｔ": "T", "Ṫ": "T", "Ť": "T", "Ṭ": "T", "Ț": "T", "Ţ": "T", "Ṱ": "T", "Ṯ": "T", "Ŧ": "T", "Ƭ": "T", "Ʈ": "T", "Ⱦ": "T", "Ꞇ": "T", "Ꜩ": "TZ", "Ⓤ": "U", "Ｕ": "U", "Ù": "U", "Ú": "U", "Û": "U", "Ũ": "U", "Ṹ": "U", "Ū": "U", "Ṻ": "U", "Ŭ": "U", "Ü": "U", "Ǜ": "U", "Ǘ": "U", "Ǖ": "U", "Ǚ": "U", "Ủ": "U", "Ů": "U", "Ű": "U", "Ǔ": "U", "Ȕ": "U", "Ȗ": "U", "Ư": "U", "Ừ": "U", "Ứ": "U", "Ữ": "U", "Ử": "U", "Ự": "U", "Ụ": "U", "Ṳ": "U", "Ų": "U", "Ṷ": "U", "Ṵ": "U", "Ʉ": "U", "Ⓥ": "V", "Ｖ": "V", "Ṽ": "V", "Ṿ": "V", "Ʋ": "V", "Ꝟ": "V", "Ʌ": "V", "Ꝡ": "VY", "Ⓦ": "W", "Ｗ": "W", "Ẁ": "W", "Ẃ": "W", "Ŵ": "W", "Ẇ": "W", "Ẅ": "W", "Ẉ": "W", "Ⱳ": "W", "Ⓧ": "X", "Ｘ": "X", "Ẋ": "X", "Ẍ": "X", "Ⓨ": "Y", "Ｙ": "Y", "Ỳ": "Y", "Ý": "Y", "Ŷ": "Y", "Ỹ": "Y", "Ȳ": "Y", "Ẏ": "Y", "Ÿ": "Y", "Ỷ": "Y", "Ỵ": "Y", "Ƴ": "Y", "Ɏ": "Y", "Ỿ": "Y", "Ⓩ": "Z", "Ｚ": "Z", "Ź": "Z", "Ẑ": "Z", "Ż": "Z", "Ž": "Z", "Ẓ": "Z", "Ẕ": "Z", "Ƶ": "Z", "Ȥ": "Z", "Ɀ": "Z", "Ⱬ": "Z", "Ꝣ": "Z", "ⓐ": "a", "ａ": "a", "ẚ": "a", "à": "a", "á": "a", "â": "a", "ầ": "a", "ấ": "a", "ẫ": "a", "ẩ": "a", "ã": "a", "ā": "a", "ă": "a", "ằ": "a", "ắ": "a", "ẵ": "a", "ẳ": "a", "ȧ": "a", "ǡ": "a", "ä": "a", "ǟ": "a", "ả": "a", "å": "a", "ǻ": "a", "ǎ": "a", "ȁ": "a", "ȃ": "a", "ạ": "a", "ậ": "a", "ặ": "a", "ḁ": "a", "ą": "a", "ⱥ": "a", "ɐ": "a", "ꜳ": "aa", "æ": "ae", "ǽ": "ae", "ǣ": "ae", "ꜵ": "ao", "ꜷ": "au", "ꜹ": "av", "ꜻ": "av", "ꜽ": "ay", "ⓑ": "b", "ｂ": "b", "ḃ": "b", "ḅ": "b", "ḇ": "b", "ƀ": "b", "ƃ": "b", "ɓ": "b", "ⓒ": "c", "ｃ": "c", "ć": "c", "ĉ": "c", "ċ": "c", "č": "c", "ç": "c", "ḉ": "c", "ƈ": "c", "ȼ": "c", "ꜿ": "c", "ↄ": "c", "ⓓ": "d", "ｄ": "d", "ḋ": "d", "ď": "d", "ḍ": "d", "ḑ": "d", "ḓ": "d", "ḏ": "d", "đ": "d", "ƌ": "d", "ɖ": "d", "ɗ": "d", "ꝺ": "d", "ǳ": "dz", "ǆ": "dz", "ⓔ": "e", "ｅ": "e", "è": "e", "é": "e", "ê": "e", "ề": "e", "ế": "e", "ễ": "e", "ể": "e", "ẽ": "e", "ē": "e", "ḕ": "e", "ḗ": "e", "ĕ": "e", "ė": "e", "ë": "e", "ẻ": "e", "ě": "e", "ȅ": "e", "ȇ": "e", "ẹ": "e", "ệ": "e", "ȩ": "e", "ḝ": "e", "ę": "e", "ḙ": "e", "ḛ": "e", "ɇ": "e", "ɛ": "e", "ǝ": "e", "ⓕ": "f", "ｆ": "f", "ḟ": "f", "ƒ": "f", "ꝼ": "f", "ⓖ": "g", "ｇ": "g", "ǵ": "g", "ĝ": "g", "ḡ": "g", "ğ": "g", "ġ": "g", "ǧ": "g", "ģ": "g", "ǥ": "g", "ɠ": "g", "ꞡ": "g", "ᵹ": "g", "ꝿ": "g", "ⓗ": "h", "ｈ": "h", "ĥ": "h", "ḣ": "h", "ḧ": "h", "ȟ": "h", "ḥ": "h", "ḩ": "h", "ḫ": "h", "ẖ": "h", "ħ": "h", "ⱨ": "h", "ⱶ": "h", "ɥ": "h", "ƕ": "hv", "ⓘ": "i", "ｉ": "i", "ì": "i", "í": "i", "î": "i", "ĩ": "i", "ī": "i", "ĭ": "i", "ï": "i", "ḯ": "i", "ỉ": "i", "ǐ": "i", "ȉ": "i", "ȋ": "i", "ị": "i", "į": "i", "ḭ": "i", "ɨ": "i", "ı": "i", "ⓙ": "j", "ｊ": "j", "ĵ": "j", "ǰ": "j", "ɉ": "j", "ⓚ": "k", "ｋ": "k", "ḱ": "k", "ǩ": "k", "ḳ": "k", "ķ": "k", "ḵ": "k", "ƙ": "k", "ⱪ": "k", "ꝁ": "k", "ꝃ": "k", "ꝅ": "k", "ꞣ": "k", "ⓛ": "l", "ｌ": "l", "ŀ": "l", "ĺ": "l", "ľ": "l", "ḷ": "l", "ḹ": "l", "ļ": "l", "ḽ": "l", "ḻ": "l", "ſ": "l", "ł": "l", "ƚ": "l", "ɫ": "l", "ⱡ": "l", "ꝉ": "l", "ꞁ": "l", "ꝇ": "l", "ǉ": "lj", "ⓜ": "m", "ｍ": "m", "ḿ": "m", "ṁ": "m", "ṃ": "m", "ɱ": "m", "ɯ": "m", "ⓝ": "n", "ｎ": "n", "ǹ": "n", "ń": "n", "ñ": "n", "ṅ": "n", "ň": "n", "ṇ": "n", "ņ": "n", "ṋ": "n", "ṉ": "n", "ƞ": "n", "ɲ": "n", "ŉ": "n", "ꞑ": "n", "ꞥ": "n", "ǌ": "nj", "ⓞ": "o", "ｏ": "o", "ò": "o", "ó": "o", "ô": "o", "ồ": "o", "ố": "o", "ỗ": "o", "ổ": "o", "õ": "o", "ṍ": "o", "ȭ": "o", "ṏ": "o", "ō": "o", "ṑ": "o", "ṓ": "o", "ŏ": "o", "ȯ": "o", "ȱ": "o", "ö": "o", "ȫ": "o", "ỏ": "o", "ő": "o", "ǒ": "o", "ȍ": "o", "ȏ": "o", "ơ": "o", "ờ": "o", "ớ": "o", "ỡ": "o", "ở": "o", "ợ": "o", "ọ": "o", "ộ": "o", "ǫ": "o", "ǭ": "o", "ø": "o", "ǿ": "o", "ɔ": "o", "ꝋ": "o", "ꝍ": "o", "ɵ": "o", "ƣ": "oi", "ȣ": "ou", "ꝏ": "oo", "ⓟ": "p", "ｐ": "p", "ṕ": "p", "ṗ": "p", "ƥ": "p", "ᵽ": "p", "ꝑ": "p", "ꝓ": "p", "ꝕ": "p", "ⓠ": "q", "ｑ": "q", "ɋ": "q", "ꝗ": "q", "ꝙ": "q", "ⓡ": "r", "ｒ": "r", "ŕ": "r", "ṙ": "r", "ř": "r", "ȑ": "r", "ȓ": "r", "ṛ": "r", "ṝ": "r", "ŗ": "r", "ṟ": "r", "ɍ": "r", "ɽ": "r", "ꝛ": "r", "ꞧ": "r", "ꞃ": "r", "ⓢ": "s", "ｓ": "s", "ß": "s", "ś": "s", "ṥ": "s", "ŝ": "s", "ṡ": "s", "š": "s", "ṧ": "s", "ṣ": "s", "ṩ": "s", "ș": "s", "ş": "s", "ȿ": "s", "ꞩ": "s", "ꞅ": "s", "ẛ": "s", "ⓣ": "t", "ｔ": "t", "ṫ": "t", "ẗ": "t", "ť": "t", "ṭ": "t", "ț": "t", "ţ": "t", "ṱ": "t", "ṯ": "t", "ŧ": "t", "ƭ": "t", "ʈ": "t", "ⱦ": "t", "ꞇ": "t", "ꜩ": "tz", "ⓤ": "u", "ｕ": "u", "ù": "u", "ú": "u", "û": "u", "ũ": "u", "ṹ": "u", "ū": "u", "ṻ": "u", "ŭ": "u", "ü": "u", "ǜ": "u", "ǘ": "u", "ǖ": "u", "ǚ": "u", "ủ": "u", "ů": "u", "ű": "u", "ǔ": "u", "ȕ": "u", "ȗ": "u", "ư": "u", "ừ": "u", "ứ": "u", "ữ": "u", "ử": "u", "ự": "u", "ụ": "u", "ṳ": "u", "ų": "u", "ṷ": "u", "ṵ": "u", "ʉ": "u", "ⓥ": "v", "ｖ": "v", "ṽ": "v", "ṿ": "v", "ʋ": "v", "ꝟ": "v", "ʌ": "v", "ꝡ": "vy", "ⓦ": "w", "ｗ": "w", "ẁ": "w", "ẃ": "w", "ŵ": "w", "ẇ": "w", "ẅ": "w", "ẘ": "w", "ẉ": "w", "ⱳ": "w", "ⓧ": "x", "ｘ": "x", "ẋ": "x", "ẍ": "x", "ⓨ": "y", "ｙ": "y", "ỳ": "y", "ý": "y", "ŷ": "y", "ỹ": "y", "ȳ": "y", "ẏ": "y", "ÿ": "y", "ỷ": "y", "ẙ": "y", "ỵ": "y", "ƴ": "y", "ɏ": "y", "ỿ": "y", "ⓩ": "z", "ｚ": "z", "ź": "z", "ẑ": "z", "ż": "z", "ž": "z", "ẓ": "z", "ẕ": "z", "ƶ": "z", "ȥ": "z", "ɀ": "z", "ⱬ": "z", "ꝣ": "z", "Ά": "Α", "Έ": "Ε", "Ή": "Η", "Ί": "Ι", "Ϊ": "Ι", "Ό": "Ο", "Ύ": "Υ", "Ϋ": "Υ", "Ώ": "Ω", "ά": "α", "έ": "ε", "ή": "η", "ί": "ι", "ϊ": "ι", "ΐ": "ι", "ό": "ο", "ύ": "υ", "ϋ": "υ", "ΰ": "υ", "ω": "ω", "ς": "σ" } }), b.define("select2/data/base", ["../utils"], function (a) { function b(a, c) { b.__super__.constructor.call(this) } return a.Extend(b, a.Observable), b.prototype.current = function (a) { throw new Error("The `current` method must be defined in child classes.") }, b.prototype.query = function (a, b) { throw new Error("The `query` method must be defined in child classes.") }, b.prototype.bind = function (a, b) { }, b.prototype.destroy = function () { }, b.prototype.generateResultId = function (b, c) { var d = b.id + "-result-"; return d += a.generateChars(4), null != c.id ? d += "-" + c.id.toString() : d += "-" + a.generateChars(4), d }, b }), b.define("select2/data/select", ["./base", "../utils", "jquery"], function (a, b, c) { function d(a, b) { this.$element = a, this.options = b, d.__super__.constructor.call(this) } return b.Extend(d, a), d.prototype.current = function (a) { var b = [], d = this; this.$element.find(":selected").each(function () { var a = c(this), e = d.item(a); b.push(e) }), a(b) }, d.prototype.select = function (a) { var b = this; if (a.selected = !0, c(a.element).is("option")) return a.element.selected = !0, void this.$element.trigger("change"); if (this.$element.prop("multiple")) this.current(function (d) { var e = []; a = [a], a.push.apply(a, d); for (var f = 0; f < a.length; f++) { var g = a[f].id; -1 === c.inArray(g, e) && e.push(g) } b.$element.val(e), b.$element.trigger("change") }); else { var d = a.id; this.$element.val(d), this.$element.trigger("change") } }, d.prototype.unselect = function (a) { var b = this; if (this.$element.prop("multiple")) { if (a.selected = !1, c(a.element).is("option")) return a.element.selected = !1, void this.$element.trigger("change"); this.current(function (d) { for (var e = [], f = 0; f < d.length; f++) { var g = d[f].id; g !== a.id && -1 === c.inArray(g, e) && e.push(g) } b.$element.val(e), b.$element.trigger("change") }) } }, d.prototype.bind = function (a, b) { var c = this; this.container = a, a.on("select", function (a) { c.select(a.data) }), a.on("unselect", function (a) { c.unselect(a.data) }) }, d.prototype.destroy = function () { this.$element.find("*").each(function () { c.removeData(this, "data") }) }, d.prototype.query = function (a, b) { var d = [], e = this; this.$element.children().each(function () { var b = c(this); if (b.is("option") || b.is("optgroup")) { var f = e.item(b), g = e.matches(a, f); null !== g && d.push(g) } }), b({ results: d }) }, d.prototype.addOptions = function (a) { b.appendMany(this.$element, a) }, d.prototype.option = function (a) { var b; a.children ? (b = document.createElement("optgroup"), b.label = a.text) : (b = document.createElement("option"), void 0 !== b.textContent ? b.textContent = a.text : b.innerText = a.text), void 0 !== a.id && (b.value = a.id), a.disabled && (b.disabled = !0), a.selected && (b.selected = !0), a.title && (b.title = a.title); var d = c(b), e = this._normalizeItem(a); return e.element = b, c.data(b, "data", e), d }, d.prototype.item = function (a) { var b = {}; if (null != (b = c.data(a[0], "data"))) return b; if (a.is("option")) b = { id: a.val(), text: a.text(), disabled: a.prop("disabled"), selected: a.prop("selected"), title: a.prop("title") }; else if (a.is("optgroup")) { b = { text: a.prop("label"), children: [], title: a.prop("title") }; for (var d = a.children("option"), e = [], f = 0; f < d.length; f++) { var g = c(d[f]), h = this.item(g); e.push(h) } b.children = e } return b = this._normalizeItem(b), b.element = a[0], c.data(a[0], "data", b), b }, d.prototype._normalizeItem = function (a) { c.isPlainObject(a) || (a = { id: a, text: a }), a = c.extend({}, { text: "" }, a); var b = { selected: !1, disabled: !1 }; return null != a.id && (a.id = a.id.toString()), null != a.text && (a.text = a.text.toString()), null == a._resultId && a.id && null != this.container && (a._resultId = this.generateResultId(this.container, a)), c.extend({}, b, a) }, d.prototype.matches = function (a, b) { return this.options.get("matcher")(a, b) }, d }), b.define("select2/data/array", ["./select", "../utils", "jquery"], function (a, b, c) { function d(a, b) { var c = b.get("data") || []; d.__super__.constructor.call(this, a, b), this.addOptions(this.convertToOptions(c)) } return b.Extend(d, a), d.prototype.select = function (a) { var b = this.$element.find("option").filter(function (b, c) { return c.value == a.id.toString() }); 0 === b.length && (b = this.option(a), this.addOptions(b)), d.__super__.select.call(this, a) }, d.prototype.convertToOptions = function (a) { function d(a) { return function () { return c(this).val() == a.id } } for (var e = this, f = this.$element.find("option"), g = f.map(function () { return e.item(c(this)).id }).get(), h = [], i = 0; i < a.length; i++) { var j = this._normalizeItem(a[i]); if (c.inArray(j.id, g) >= 0) { var k = f.filter(d(j)), l = this.item(k), m = c.extend(!0, {}, j, l), n = this.option(m); k.replaceWith(n) } else { var o = this.option(j); if (j.children) { var p = this.convertToOptions(j.children); b.appendMany(o, p) } h.push(o) } } return h }, d }), b.define("select2/data/ajax", ["./array", "../utils", "jquery"], function (a, b, c) { function d(a, b) { this.ajaxOptions = this._applyDefaults(b.get("ajax")), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), d.__super__.constructor.call(this, a, b) } return b.Extend(d, a), d.prototype._applyDefaults = function (a) { var b = { data: function (a) { return c.extend({}, a, { q: a.term }) }, transport: function (a, b, d) { var e = c.ajax(a); return e.then(b), e.fail(d), e } }; return c.extend({}, b, a, !0) }, d.prototype.processResults = function (a) { return a }, d.prototype.query = function (a, b) { function d() { var d = f.transport(f, function (d) { var f = e.processResults(d, a); e.options.get("debug") && window.console && console.error && (f && f.results && c.isArray(f.results) || console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")), b(f) }, function () { d.status && "0" === d.status || e.trigger("results:message", { message: "errorLoading" }) }); e._request = d } var e = this; null != this._request && (c.isFunction(this._request.abort) && this._request.abort(), this._request = null); var f = c.extend({ type: "GET" }, this.ajaxOptions); "function" == typeof f.url && (f.url = f.url.call(this.$element, a)), "function" == typeof f.data && (f.data = f.data.call(this.$element, a)), this.ajaxOptions.delay && null != a.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(d, this.ajaxOptions.delay)) : d() }, d }), b.define("select2/data/tags", ["jquery"], function (a) { function b(b, c, d) { var e = d.get("tags"), f = d.get("createTag"); void 0 !== f && (this.createTag = f); var g = d.get("insertTag"); if (void 0 !== g && (this.insertTag = g), b.call(this, c, d), a.isArray(e)) for (var h = 0; h < e.length; h++) { var i = e[h], j = this._normalizeItem(i), k = this.option(j); this.$element.append(k) } } return b.prototype.query = function (a, b, c) { function d(a, f) { for (var g = a.results, h = 0; h < g.length; h++) { var i = g[h], j = null != i.children && !d({ results: i.children }, !0); if ((i.text || "").toUpperCase() === (b.term || "").toUpperCase() || j) return !f && (a.data = g, void c(a)) } if (f) return !0; var k = e.createTag(b); if (null != k) { var l = e.option(k); l.attr("data-select2-tag", !0), e.addOptions([l]), e.insertTag(g, k) } a.results = g, c(a) } var e = this; if (this._removeOldTags(), null == b.term || null != b.page) return void a.call(this, b, c); a.call(this, b, d) }, b.prototype.createTag = function (b, c) { var d = a.trim(c.term); return "" === d ? null : { id: d, text: d } }, b.prototype.insertTag = function (a, b, c) { b.unshift(c) }, b.prototype._removeOldTags = function (b) { this._lastTag; this.$element.find("option[data-select2-tag]").each(function () { this.selected || a(this).remove() }) }, b }), b.define("select2/data/tokenizer", ["jquery"], function (a) { function b(a, b, c) { var d = c.get("tokenizer"); void 0 !== d && (this.tokenizer = d), a.call(this, b, c) } return b.prototype.bind = function (a, b, c) { a.call(this, b, c), this.$search = b.dropdown.$search || b.selection.$search || c.find(".select2-search__field") }, b.prototype.query = function (b, c, d) { function e(b) { var c = g._normalizeItem(b); if (!g.$element.find("option").filter(function () { return a(this).val() === c.id }).length) { var d = g.option(c); d.attr("data-select2-tag", !0), g._removeOldTags(), g.addOptions([d]) } f(c) } function f(a) { g.trigger("select", { data: a }) } var g = this; c.term = c.term || ""; var h = this.tokenizer(c, this.options, e); h.term !== c.term && (this.$search.length && (this.$search.val(h.term), this.$search.focus()), c.term = h.term), b.call(this, c, d) }, b.prototype.tokenizer = function (b, c, d, e) { for (var f = d.get("tokenSeparators") || [], g = c.term, h = 0, i = this.createTag || function (a) { return { id: a.term, text: a.term } }; h < g.length;) { var j = g[h]; if (-1 !== a.inArray(j, f)) { var k = g.substr(0, h), l = a.extend({}, c, { term: k }), m = i(l); null != m ? (e(m), g = g.substr(h + 1) || "", h = 0) : h++ } else h++ } return { term: g } }, b }), b.define("select2/data/minimumInputLength", [], function () { function a(a, b, c) { this.minimumInputLength = c.get("minimumInputLength"), a.call(this, b, c) } return a.prototype.query = function (a, b, c) { if (b.term = b.term || "", b.term.length < this.minimumInputLength) return void this.trigger("results:message", { message: "inputTooShort", args: { minimum: this.minimumInputLength, input: b.term, params: b } }); a.call(this, b, c) }, a }), b.define("select2/data/maximumInputLength", [], function () { function a(a, b, c) { this.maximumInputLength = c.get("maximumInputLength"), a.call(this, b, c) } return a.prototype.query = function (a, b, c) { if (b.term = b.term || "", this.maximumInputLength > 0 && b.term.length > this.maximumInputLength) return void this.trigger("results:message", { message: "inputTooLong", args: { maximum: this.maximumInputLength, input: b.term, params: b } }); a.call(this, b, c) }, a }), b.define("select2/data/maximumSelectionLength", [], function () { function a(a, b, c) { this.maximumSelectionLength = c.get("maximumSelectionLength"), a.call(this, b, c) } return a.prototype.query = function (a, b, c) { var d = this; this.current(function (e) { var f = null != e ? e.length : 0; if (d.maximumSelectionLength > 0 && f >= d.maximumSelectionLength) return void d.trigger("results:message", { message: "maximumSelected", args: { maximum: d.maximumSelectionLength } }); a.call(d, b, c) }) }, a }), b.define("select2/dropdown", ["jquery", "./utils"], function (a, b) { function c(a, b) { this.$element = a, this.options = b, c.__super__.constructor.call(this) } return b.Extend(c, b.Observable), c.prototype.render = function () { var b = a('<span class="select2-dropdown"><span class="select2-results"></span></span>'); return b.attr("dir", this.options.get("dir")), this.$dropdown = b, b }, c.prototype.bind = function () { }, c.prototype.position = function (a, b) { }, c.prototype.destroy = function () { this.$dropdown.remove() }, c }), b.define("select2/dropdown/search", ["jquery", "../utils"], function (a, b) { function c() { } return c.prototype.render = function (b) { var c = b.call(this), d = a('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" /></span>'); return this.$searchContainer = d, this.$search = d.find("input"), c.prepend(d), c }, c.prototype.bind = function (b, c, d) { var e = this; b.call(this, c, d), this.$search.on("keydown", function (a) { e.trigger("keypress", a), e._keyUpPrevented = a.isDefaultPrevented() }), this.$search.on("input", function (b) { a(this).off("keyup") }), this.$search.on("keyup input", function (a) { e.handleSearch(a) }), c.on("open", function () { e.$search.attr("tabindex", 0), e.$search.focus(), window.setTimeout(function () { e.$search.focus() }, 0) }), c.on("close", function () { e.$search.attr("tabindex", -1), e.$search.val("") }), c.on("focus", function () { c.isOpen() || e.$search.focus() }), c.on("results:all", function (a) { if (null == a.query.term || "" === a.query.term) { e.showSearch(a) ? e.$searchContainer.removeClass("select2-search--hide") : e.$searchContainer.addClass("select2-search--hide") } }) }, c.prototype.handleSearch = function (a) { if (!this._keyUpPrevented) { var b = this.$search.val(); this.trigger("query", { term: b }) } this._keyUpPrevented = !1 }, c.prototype.showSearch = function (a, b) { return !0 }, c }), b.define("select2/dropdown/hidePlaceholder", [], function () { function a(a, b, c, d) { this.placeholder = this.normalizePlaceholder(c.get("placeholder")), a.call(this, b, c, d) } return a.prototype.append = function (a, b) { b.results = this.removePlaceholder(b.results), a.call(this, b) }, a.prototype.normalizePlaceholder = function (a, b) { return "string" == typeof b && (b = { id: "", text: b }), b }, a.prototype.removePlaceholder = function (a, b) { for (var c = b.slice(0), d = b.length - 1; d >= 0; d--) { var e = b[d]; this.placeholder.id === e.id && c.splice(d, 1) } return c }, a }), b.define("select2/dropdown/infiniteScroll", ["jquery"], function (a) { function b(a, b, c, d) { this.lastParams = {}, a.call(this, b, c, d), this.$loadingMore = this.createLoadingMore(), this.loading = !1 } return b.prototype.append = function (a, b) { this.$loadingMore.remove(), this.loading = !1, a.call(this, b), this.showLoadingMore(b) && this.$results.append(this.$loadingMore) }, b.prototype.bind = function (b, c, d) { var e = this; b.call(this, c, d), c.on("query", function (a) { e.lastParams = a, e.loading = !0 }), c.on("query:append", function (a) { e.lastParams = a, e.loading = !0 }), this.$results.on("scroll", function () { var b = a.contains(document.documentElement, e.$loadingMore[0]); if (!e.loading && b) { e.$results.offset().top + e.$results.outerHeight(!1) + 50 >= e.$loadingMore.offset().top + e.$loadingMore.outerHeight(!1) && e.loadMore() } }) }, b.prototype.loadMore = function () { this.loading = !0; var b = a.extend({}, { page: 1 }, this.lastParams); b.page++, this.trigger("query:append", b) }, b.prototype.showLoadingMore = function (a, b) { return b.pagination && b.pagination.more }, b.prototype.createLoadingMore = function () { var b = a('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'), c = this.options.get("translations").get("loadingMore"); return b.html(c(this.lastParams)), b }, b }), b.define("select2/dropdown/attachBody", ["jquery", "../utils"], function (a, b) { function c(b, c, d) { this.$dropdownParent = d.get("dropdownParent") || a(document.body), b.call(this, c, d) } return c.prototype.bind = function (a, b, c) { var d = this, e = !1; a.call(this, b, c), b.on("open", function () { d._showDropdown(), d._attachPositioningHandler(b), e || (e = !0, b.on("results:all", function () { d._positionDropdown(), d._resizeDropdown() }), b.on("results:append", function () { d._positionDropdown(), d._resizeDropdown() })) }), b.on("close", function () { d._hideDropdown(), d._detachPositioningHandler(b) }), this.$dropdownContainer.on("mousedown", function (a) { a.stopPropagation() }) }, c.prototype.destroy = function (a) { a.call(this), this.$dropdownContainer.remove() }, c.prototype.position = function (a, b, c) { b.attr("class", c.attr("class")), b.removeClass("select2"), b.addClass("select2-container--open"), b.css({ position: "absolute", top: -999999 }), this.$container = c }, c.prototype.render = function (b) { var c = a("<span></span>"), d = b.call(this); return c.append(d), this.$dropdownContainer = c, c }, c.prototype._hideDropdown = function (a) { this.$dropdownContainer.detach() }, c.prototype._attachPositioningHandler = function (c, d) { var e = this, f = "scroll.select2." + d.id, g = "resize.select2." + d.id, h = "orientationchange.select2." + d.id, i = this.$container.parents().filter(b.hasScroll); i.each(function () { a(this).data("select2-scroll-position", { x: a(this).scrollLeft(), y: a(this).scrollTop() }) }), i.on(f, function (b) { var c = a(this).data("select2-scroll-position"); a(this).scrollTop(c.y) }), a(window).on(f + " " + g + " " + h, function (a) { e._positionDropdown(), e._resizeDropdown() }) }, c.prototype._detachPositioningHandler = function (c, d) { var e = "scroll.select2." + d.id, f = "resize.select2." + d.id, g = "orientationchange.select2." + d.id; this.$container.parents().filter(b.hasScroll).off(e), a(window).off(e + " " + f + " " + g) }, c.prototype._positionDropdown = function () { var b = a(window), c = this.$dropdown.hasClass("select2-dropdown--above"), d = this.$dropdown.hasClass("select2-dropdown--below"), e = null, f = this.$container.offset(); f.bottom = f.top + this.$container.outerHeight(!1); var g = { height: this.$container.outerHeight(!1) }; g.top = f.top, g.bottom = f.top + g.height; var h = { height: this.$dropdown.outerHeight(!1) }, i = { top: b.scrollTop(), bottom: b.scrollTop() + b.height() }, j = i.top < f.top - h.height, k = i.bottom > f.bottom + h.height, l = { left: f.left, top: g.bottom }, m = this.$dropdownParent; "static" === m.css("position") && (m = m.offsetParent()); var n = m.offset(); l.top -= n.top, l.left -= n.left, c || d || (e = "below"), k || !j || c ? !j && k && c && (e = "below") : e = "above", ("above" == e || c && "below" !== e) && (l.top = g.top - n.top - h.height), null != e && (this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--" + e), this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--" + e)), this.$dropdownContainer.css(l) }, c.prototype._resizeDropdown = function () { var a = { width: this.$container.outerWidth(!1) + "px" }; this.options.get("dropdownAutoWidth") && (a.minWidth = a.width, a.position = "relative", a.width = "auto"), this.$dropdown.css(a) }, c.prototype._showDropdown = function (a) { this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown() }, c }), b.define("select2/dropdown/minimumResultsForSearch", [], function () { function a(b) { for (var c = 0, d = 0; d < b.length; d++) { var e = b[d]; e.children ? c += a(e.children) : c++ } return c } function b(a, b, c, d) { this.minimumResultsForSearch = c.get("minimumResultsForSearch"), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), a.call(this, b, c, d) } return b.prototype.showSearch = function (b, c) { return !(a(c.data.results) < this.minimumResultsForSearch) && b.call(this, c) }, b }), b.define("select2/dropdown/selectOnClose", [], function () { function a() { } return a.prototype.bind = function (a, b, c) { var d = this; a.call(this, b, c), b.on("close", function (a) { d._handleSelectOnClose(a) }) }, a.prototype._handleSelectOnClose = function (a, b) { if (b && null != b.originalSelect2Event) { var c = b.originalSelect2Event; if ("select" === c._type || "unselect" === c._type) return } var d = this.getHighlightedResults(); if (!(d.length < 1)) { var e = d.data("data"); null != e.element && e.element.selected || null == e.element && e.selected || this.trigger("select", { data: e }) } }, a }), b.define("select2/dropdown/closeOnSelect", [], function () { function a() { } return a.prototype.bind = function (a, b, c) { var d = this; a.call(this, b, c), b.on("select", function (a) { d._selectTriggered(a) }), b.on("unselect", function (a) { d._selectTriggered(a) }) }, a.prototype._selectTriggered = function (a, b) { var c = b.originalEvent; c && c.ctrlKey || this.trigger("close", { originalEvent: c, originalSelect2Event: b }) }, a }), b.define("select2/i18n/en", [], function () { return { errorLoading: function () { return "The results could not be loaded." }, inputTooLong: function (a) { var b = a.input.length - a.maximum, c = "Please delete " + b + " character"; return 1 != b && (c += "s"), c }, inputTooShort: function (a) { return "Please enter " + (a.minimum - a.input.length) + " or more characters" }, loadingMore: function () { return "Loading more results…" }, maximumSelected: function (a) { var b = "You can only select " + a.maximum + " item"; return 1 != a.maximum && (b += "s"), b }, noResults: function () { return "No results found" }, searching: function () { return "Searching…" } } }), b.define("select2/defaults", ["jquery", "require", "./results", "./selection/single", "./selection/multiple", "./selection/placeholder", "./selection/allowClear", "./selection/search", "./selection/eventRelay", "./utils", "./translation", "./diacritics", "./data/select", "./data/array", "./data/ajax", "./data/tags", "./data/tokenizer", "./data/minimumInputLength", "./data/maximumInputLength", "./data/maximumSelectionLength", "./dropdown", "./dropdown/search", "./dropdown/hidePlaceholder", "./dropdown/infiniteScroll", "./dropdown/attachBody", "./dropdown/minimumResultsForSearch", "./dropdown/selectOnClose", "./dropdown/closeOnSelect", "./i18n/en"], function (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C) { function D() { this.reset() } return D.prototype.apply = function (l) { if (l = a.extend(!0, {}, this.defaults, l), null == l.dataAdapter) { if (null != l.ajax ? l.dataAdapter = o : null != l.data ? l.dataAdapter = n : l.dataAdapter = m, l.minimumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, r)), l.maximumInputLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, s)), l.maximumSelectionLength > 0 && (l.dataAdapter = j.Decorate(l.dataAdapter, t)), l.tags && (l.dataAdapter = j.Decorate(l.dataAdapter, p)), null == l.tokenSeparators && null == l.tokenizer || (l.dataAdapter = j.Decorate(l.dataAdapter, q)), null != l.query) { var C = b(l.amdBase + "compat/query"); l.dataAdapter = j.Decorate(l.dataAdapter, C) } if (null != l.initSelection) { var D = b(l.amdBase + "compat/initSelection"); l.dataAdapter = j.Decorate(l.dataAdapter, D) } } if (null == l.resultsAdapter && (l.resultsAdapter = c, null != l.ajax && (l.resultsAdapter = j.Decorate(l.resultsAdapter, x)), null != l.placeholder && (l.resultsAdapter = j.Decorate(l.resultsAdapter, w)), l.selectOnClose && (l.resultsAdapter = j.Decorate(l.resultsAdapter, A))), null == l.dropdownAdapter) { if (l.multiple) l.dropdownAdapter = u; else { var E = j.Decorate(u, v); l.dropdownAdapter = E } if (0 !== l.minimumResultsForSearch && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, z)), l.closeOnSelect && (l.dropdownAdapter = j.Decorate(l.dropdownAdapter, B)), null != l.dropdownCssClass || null != l.dropdownCss || null != l.adaptDropdownCssClass) { var F = b(l.amdBase + "compat/dropdownCss"); l.dropdownAdapter = j.Decorate(l.dropdownAdapter, F) } l.dropdownAdapter = j.Decorate(l.dropdownAdapter, y) } if (null == l.selectionAdapter) { if (l.multiple ? l.selectionAdapter = e : l.selectionAdapter = d, null != l.placeholder && (l.selectionAdapter = j.Decorate(l.selectionAdapter, f)), l.allowClear && (l.selectionAdapter = j.Decorate(l.selectionAdapter, g)), l.multiple && (l.selectionAdapter = j.Decorate(l.selectionAdapter, h)), null != l.containerCssClass || null != l.containerCss || null != l.adaptContainerCssClass) { var G = b(l.amdBase + "compat/containerCss"); l.selectionAdapter = j.Decorate(l.selectionAdapter, G) } l.selectionAdapter = j.Decorate(l.selectionAdapter, i) } if ("string" == typeof l.language) if (l.language.indexOf("-") > 0) { var H = l.language.split("-"), I = H[0]; l.language = [l.language, I] } else l.language = [l.language]; if (a.isArray(l.language)) { var J = new k; l.language.push("en"); for (var K = l.language, L = 0; L < K.length; L++) { var M = K[L], N = {}; try { N = k.loadPath(M) } catch (a) { try { M = this.defaults.amdLanguageBase + M, N = k.loadPath(M) } catch (a) { l.debug && window.console && console.warn && console.warn('Select2: The language file for "' + M + '" could not be automatically loaded. A fallback will be used instead.'); continue } } J.extend(N) } l.translations = J } else { var O = k.loadPath(this.defaults.amdLanguageBase + "en"), P = new k(l.language); P.extend(O), l.translations = P } return l }, D.prototype.reset = function () { function b(a) { function b(a) { return l[a] || a } return a.replace(/[^\u0000-\u007E]/g, b) } function c(d, e) { if ("" === a.trim(d.term)) return e; if (e.children && e.children.length > 0) { for (var f = a.extend(!0, {}, e), g = e.children.length - 1; g >= 0; g--) { null == c(d, e.children[g]) && f.children.splice(g, 1) } return f.children.length > 0 ? f : c(d, f) } var h = b(e.text).toUpperCase(), i = b(d.term).toUpperCase(); return h.indexOf(i) > -1 ? e : null } this.defaults = { amdBase: "./", amdLanguageBase: "./i18n/", closeOnSelect: !0, debug: !1, dropdownAutoWidth: !1, escapeMarkup: j.escapeMarkup, language: C, matcher: c, minimumInputLength: 0, maximumInputLength: 0, maximumSelectionLength: 0, minimumResultsForSearch: 0, selectOnClose: !1, sorter: function (a) { return a }, templateResult: function (a) { return a.text }, templateSelection: function (a) { return a.text }, theme: "default", width: "resolve" } }, D.prototype.set = function (b, c) { var d = a.camelCase(b), e = {}; e[d] = c; var f = j._convertData(e); a.extend(this.defaults, f) }, new D }), b.define("select2/options", ["require", "jquery", "./defaults", "./utils"], function (a, b, c, d) { function e(b, e) { if (this.options = b, null != e && this.fromElement(e), this.options = c.apply(this.options), e && e.is("input")) { var f = a(this.get("amdBase") + "compat/inputData"); this.options.dataAdapter = d.Decorate(this.options.dataAdapter, f) } } return e.prototype.fromElement = function (a) { var c = ["select2"]; null == this.options.multiple && (this.options.multiple = a.prop("multiple")), null == this.options.disabled && (this.options.disabled = a.prop("disabled")), null == this.options.language && (a.prop("lang") ? this.options.language = a.prop("lang").toLowerCase() : a.closest("[lang]").prop("lang") && (this.options.language = a.closest("[lang]").prop("lang"))), null == this.options.dir && (a.prop("dir") ? this.options.dir = a.prop("dir") : a.closest("[dir]").prop("dir") ? this.options.dir = a.closest("[dir]").prop("dir") : this.options.dir = "ltr"), a.prop("disabled", this.options.disabled), a.prop("multiple", this.options.multiple), a.data("select2Tags") && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'), a.data("data", a.data("select2Tags")), a.data("tags", !0)), a.data("ajaxUrl") && (this.options.debug && window.console && console.warn && console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."), a.attr("ajax--url", a.data("ajaxUrl")), a.data("ajax--url", a.data("ajaxUrl"))); var e = {}; e = b.fn.jquery && "1." == b.fn.jquery.substr(0, 2) && a[0].dataset ? b.extend(!0, {}, a[0].dataset, a.data()) : a.data(); var f = b.extend(!0, {}, e); f = d._convertData(f); for (var g in f) b.inArray(g, c) > -1 || (b.isPlainObject(this.options[g]) ? b.extend(this.options[g], f[g]) : this.options[g] = f[g]); return this }, e.prototype.get = function (a) { return this.options[a] }, e.prototype.set = function (a, b) { this.options[a] = b }, e }), b.define("select2/core", ["jquery", "./options", "./utils", "./keys"], function (a, b, c, d) { var e = function (a, c) { null != a.data("select2") && a.data("select2").destroy(), this.$element = a, this.id = this._generateId(a), c = c || {}, this.options = new b(c, a), e.__super__.constructor.call(this); var d = a.attr("tabindex") || 0; a.data("old-tabindex", d), a.attr("tabindex", "-1"); var f = this.options.get("dataAdapter"); this.dataAdapter = new f(a, this.options); var g = this.render(); this._placeContainer(g); var h = this.options.get("selectionAdapter"); this.selection = new h(a, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, g); var i = this.options.get("dropdownAdapter"); this.dropdown = new i(a, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, g); var j = this.options.get("resultsAdapter"); this.results = new j(a, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown); var k = this; this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (a) { k.trigger("selection:update", { data: a }) }), a.addClass("select2-hidden-accessible"), a.attr("aria-hidden", "true"), this._syncAttributes(), a.data("select2", this) }; return c.Extend(e, c.Observable), e.prototype._generateId = function (a) { var b = ""; return b = null != a.attr("id") ? a.attr("id") : null != a.attr("name") ? a.attr("name") + "-" + c.generateChars(2) : c.generateChars(4), b = b.replace(/(:|\.|\[|\]|,)/g, ""), b = "select2-" + b }, e.prototype._placeContainer = function (a) { a.insertAfter(this.$element); var b = this._resolveWidth(this.$element, this.options.get("width")); null != b && a.css("width", b) }, e.prototype._resolveWidth = function (a, b) { var c = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i; if ("resolve" == b) { var d = this._resolveWidth(a, "style"); return null != d ? d : this._resolveWidth(a, "element") } if ("element" == b) { var e = a.outerWidth(!1); return e <= 0 ? "auto" : e + "px" } if ("style" == b) { var f = a.attr("style"); if ("string" != typeof f) return null; for (var g = f.split(";"), h = 0, i = g.length; h < i; h += 1) { var j = g[h].replace(/\s/g, ""), k = j.match(c); if (null !== k && k.length >= 1) return k[1] } return null } return b }, e.prototype._bindAdapters = function () { this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container) }, e.prototype._registerDomEvents = function () { var b = this; this.$element.on("change.select2", function () { b.dataAdapter.current(function (a) { b.trigger("selection:update", { data: a }) }) }), this.$element.on("focus.select2", function (a) { b.trigger("focus", a) }), this._syncA = c.bind(this._syncAttributes, this), this._syncS = c.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent("onpropertychange", this._syncA); var d = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver; null != d ? (this._observer = new d(function (c) { a.each(c, b._syncA), a.each(c, b._syncS) }), this._observer.observe(this.$element[0], { attributes: !0, childList: !0, subtree: !1 })) : this.$element[0].addEventListener && (this.$element[0].addEventListener("DOMAttrModified", b._syncA, !1), this.$element[0].addEventListener("DOMNodeInserted", b._syncS, !1), this.$element[0].addEventListener("DOMNodeRemoved", b._syncS, !1)) }, e.prototype._registerDataEvents = function () { var a = this; this.dataAdapter.on("*", function (b, c) { a.trigger(b, c) }) }, e.prototype._registerSelectionEvents = function () { var b = this, c = ["toggle", "focus"]; this.selection.on("toggle", function () { b.toggleDropdown() }), this.selection.on("focus", function (a) { b.focus(a) }), this.selection.on("*", function (d, e) { -1 === a.inArray(d, c) && b.trigger(d, e) }) }, e.prototype._registerDropdownEvents = function () { var a = this; this.dropdown.on("*", function (b, c) { a.trigger(b, c) }) }, e.prototype._registerResultsEvents = function () { var a = this; this.results.on("*", function (b, c) { a.trigger(b, c) }) }, e.prototype._registerEvents = function () { var a = this; this.on("open", function () { a.$container.addClass("select2-container--open") }), this.on("close", function () { a.$container.removeClass("select2-container--open") }), this.on("enable", function () { a.$container.removeClass("select2-container--disabled") }), this.on("disable", function () { a.$container.addClass("select2-container--disabled") }), this.on("blur", function () { a.$container.removeClass("select2-container--focus") }), this.on("query", function (b) { a.isOpen() || a.trigger("open", {}), this.dataAdapter.query(b, function (c) { a.trigger("results:all", { data: c, query: b }) }) }), this.on("query:append", function (b) { this.dataAdapter.query(b, function (c) { a.trigger("results:append", { data: c, query: b }) }) }), this.on("keypress", function (b) { var c = b.which; a.isOpen() ? c === d.ESC || c === d.TAB || c === d.UP && b.altKey ? (a.close(), b.preventDefault()) : c === d.ENTER ? (a.trigger("results:select", {}), b.preventDefault()) : c === d.SPACE && b.ctrlKey ? (a.trigger("results:toggle", {}), b.preventDefault()) : c === d.UP ? (a.trigger("results:previous", {}), b.preventDefault()) : c === d.DOWN && (a.trigger("results:next", {}), b.preventDefault()) : (c === d.ENTER || c === d.SPACE || c === d.DOWN && b.altKey) && (a.open(), b.preventDefault()) }) }, e.prototype._syncAttributes = function () { this.options.set("disabled", this.$element.prop("disabled")), this.options.get("disabled") ? (this.isOpen() && this.close(), this.trigger("disable", {})) : this.trigger("enable", {}) }, e.prototype._syncSubtree = function (a, b) { var c = !1, d = this; if (!a || !a.target || "OPTION" === a.target.nodeName || "OPTGROUP" === a.target.nodeName) { if (b) if (b.addedNodes && b.addedNodes.length > 0) for (var e = 0; e < b.addedNodes.length; e++) { var f = b.addedNodes[e]; f.selected && (c = !0) } else b.removedNodes && b.removedNodes.length > 0 && (c = !0); else c = !0; c && this.dataAdapter.current(function (a) { d.trigger("selection:update", { data: a }) }) } }, e.prototype.trigger = function (a, b) { var c = e.__super__.trigger, d = { open: "opening", close: "closing", select: "selecting", unselect: "unselecting" }; if (void 0 === b && (b = {}), a in d) { var f = d[a], g = { prevented: !1, name: a, args: b }; if (c.call(this, f, g), g.prevented) return void (b.prevented = !0) } c.call(this, a, b) }, e.prototype.toggleDropdown = function () { this.options.get("disabled") || (this.isOpen() ? this.close() : this.open()) }, e.prototype.open = function () { this.isOpen() || this.trigger("query", {}) }, e.prototype.close = function () { this.isOpen() && this.trigger("close", {}) }, e.prototype.isOpen = function () { return this.$container.hasClass("select2-container--open") }, e.prototype.hasFocus = function () { return this.$container.hasClass("select2-container--focus") }, e.prototype.focus = function (a) { this.hasFocus() || (this.$container.addClass("select2-container--focus"), this.trigger("focus", {})) }, e.prototype.enable = function (a) { this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'), null != a && 0 !== a.length || (a = [!0]); var b = !a[0]; this.$element.prop("disabled", b) }, e.prototype.data = function () { this.options.get("debug") && arguments.length > 0 && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.'); var a = []; return this.dataAdapter.current(function (b) { a = b }), a }, e.prototype.val = function (b) { if (this.options.get("debug") && window.console && console.warn && console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == b || 0 === b.length) return this.$element.val(); var c = b[0]; a.isArray(c) && (c = a.map(c, function (a) { return a.toString() })), this.$element.val(c).trigger("change") }, e.prototype.destroy = function () { this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent("onpropertychange", this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener("DOMAttrModified", this._syncA, !1), this.$element[0].removeEventListener("DOMNodeInserted", this._syncS, !1), this.$element[0].removeEventListener("DOMNodeRemoved", this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off(".select2"), this.$element.attr("tabindex", this.$element.data("old-tabindex")), this.$element.removeClass("select2-hidden-accessible"), this.$element.attr("aria-hidden", "false"), this.$element.removeData("select2"), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null }, e.prototype.render = function () { var b = a('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>'); return b.attr("dir", this.options.get("dir")), this.$container = b, this.$container.addClass("select2-container--" + this.options.get("theme")), b.data("element", this.$element), b }, e }), b.define("jquery-mousewheel", ["jquery"], function (a) { return a }), b.define("jquery.select2", ["jquery", "jquery-mousewheel", "./select2/core", "./select2/defaults"], function (a, b, c, d) { if (null == a.fn.select2) { var e = ["open", "close", "destroy"]; a.fn.select2 = function (b) { if ("object" == typeof (b = b || {})) return this.each(function () { var d = a.extend(!0, {}, b); new c(a(this), d) }), this; if ("string" == typeof b) { var d, f = Array.prototype.slice.call(arguments, 1); return this.each(function () { var c = a(this).data("select2"); null == c && window.console && console.error && console.error("The select2('" + b + "') method was called on an element that is not using Select2."), d = c[b].apply(c, f) }), a.inArray(b, e) > -1 ? this : d } throw new Error("Invalid arguments for Select2: " + b) } } return null == a.fn.select2.defaults && (a.fn.select2.defaults = d), c }), { define: b.define, require: b.require } }(), c = b.require("jquery.select2"); return a.fn.select2.amd = b, c });;; (function (root) {
    'use strict'; var block = { newline: /^\n+/, code: /^( {4}[^\n]+\n*)+/, fences: noop, hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/, heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/, nptable: noop, blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/, list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/, html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/, def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/, table: noop, lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/, paragraph: /^([^\n]+(?:\n?(?!hr|heading|lheading| {0,3}>|tag)[^\n]+)+)/, text: /^[^\n]+/ }; block._label = /(?:\\[\[\]]|[^\[\]])+/; block._title = /(?:"(?:\\"|[^"]|"[^"\n]*")*"|'\n?(?:[^'\n]+\n?)*'|\([^()]*\))/; block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex(); block.bullet = /(?:[*+-]|\d+\.)/; block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/; block.item = edit(block.item, 'gm').replace(/bull/g, block.bullet).getRegex(); block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex(); block._tag = '(?!(?:'
        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
        + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
        + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b'; block.html = edit(block.html).replace('comment', /<!--[\s\S]*?-->/).replace('closed', /<(tag)[\s\S]+?<\/\1>/).replace('closing', /<tag(?:"[^"]*"|'[^']*'|\s[^'"\/>\s]*)*?\/?>/).replace(/tag/g, block._tag).getRegex(); block.paragraph = edit(block.paragraph).replace('hr', block.hr).replace('heading', block.heading).replace('lheading', block.lheading).replace('tag', '<' + block._tag).getRegex(); block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex(); block.normal = merge({}, block); block.gfm = merge({}, block.normal, { fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/, paragraph: /^/, heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/ }); block.gfm.paragraph = edit(block.paragraph).replace('(?!', '(?!'
            + block.gfm.fences.source.replace('\\1', '\\2') + '|'
            + block.list.source.replace('\\1', '\\3') + '|').getRegex(); block.tables = merge({}, block.gfm, { nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/, table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/ }); function Lexer(options) { this.tokens = []; this.tokens.links = {}; this.options = options || marked.defaults; this.rules = block.normal; if (this.options.gfm) { if (this.options.tables) { this.rules = block.tables; } else { this.rules = block.gfm; } } }
    Lexer.rules = block; Lexer.lex = function (src, options) { var lexer = new Lexer(options); return lexer.lex(src); }; Lexer.prototype.lex = function (src) { src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ').replace(/\u00a0/g, ' ').replace(/\u2424/g, '\n'); return this.token(src, true); }; Lexer.prototype.token = function (src, top) {
        src = src.replace(/^ +$/gm, ''); var next, loose, cap, bull, b, item, space, i, tag, l, isordered; while (src) {
            if (cap = this.rules.newline.exec(src)) { src = src.substring(cap[0].length); if (cap[0].length > 1) { this.tokens.push({ type: 'space' }); } }
            if (cap = this.rules.code.exec(src)) { src = src.substring(cap[0].length); cap = cap[0].replace(/^ {4}/gm, ''); this.tokens.push({ type: 'code', text: !this.options.pedantic ? cap.replace(/\n+$/, '') : cap }); continue; }
            if (cap = this.rules.fences.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'code', lang: cap[2], text: cap[3] || '' }); continue; }
            if (cap = this.rules.heading.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'heading', depth: cap[1].length, text: cap[2] }); continue; }
            if (top && (cap = this.rules.nptable.exec(src))) {
                src = src.substring(cap[0].length); item = { type: 'table', header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */), align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */), cells: cap[3].replace(/\n$/, '').split('\n') }; for (i = 0; i < item.align.length; i++) { if (/^ *-+: *$/.test(item.align[i])) { item.align[i] = 'right'; } else if (/^ *:-+: *$/.test(item.align[i])) { item.align[i] = 'center'; } else if (/^ *:-+ *$/.test(item.align[i])) { item.align[i] = 'left'; } else { item.align[i] = null; } }
                for (i = 0; i < item.cells.length; i++) { item.cells[i] = item.cells[i].split(/ *\| */); }
                this.tokens.push(item); continue;
            }
            if (cap = this.rules.hr.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'hr' }); continue; }
            if (cap = this.rules.blockquote.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'blockquote_start' }); cap = cap[0].replace(/^ *> ?/gm, ''); this.token(cap, top); this.tokens.push({ type: 'blockquote_end' }); continue; }
            if (cap = this.rules.list.exec(src)) {
                src = src.substring(cap[0].length); bull = cap[2]; isordered = bull.length > 1; this.tokens.push({ type: 'list_start', ordered: isordered, start: isordered ? +bull : '' }); cap = cap[0].match(this.rules.item); next = false; l = cap.length; i = 0; for (; i < l; i++) {
                    item = cap[i]; space = item.length; item = item.replace(/^ *([*+-]|\d+\.) +/, ''); if (~item.indexOf('\n ')) { space -= item.length; item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, ''); }
                    if (this.options.smartLists && i !== l - 1) { b = block.bullet.exec(cap[i + 1])[0]; if (bull !== b && !(bull.length > 1 && b.length > 1)) { src = cap.slice(i + 1).join('\n') + src; i = l - 1; } }
                    loose = next || /\n\n(?!\s*$)/.test(item); if (i !== l - 1) { next = item.charAt(item.length - 1) === '\n'; if (!loose) loose = next; }
                    this.tokens.push({ type: loose ? 'loose_item_start' : 'list_item_start' }); this.token(item, false); this.tokens.push({ type: 'list_item_end' });
                }
                this.tokens.push({ type: 'list_end' }); continue;
            }
            if (cap = this.rules.html.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: this.options.sanitize ? 'paragraph' : 'html', pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'), text: cap[0] }); continue; }
            if (top && (cap = this.rules.def.exec(src))) {
                src = src.substring(cap[0].length); if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1); tag = cap[1].toLowerCase(); if (!this.tokens.links[tag]) { this.tokens.links[tag] = { href: cap[2], title: cap[3] }; }
                continue;
            }
            if (top && (cap = this.rules.table.exec(src))) {
                src = src.substring(cap[0].length); item = { type: 'table', header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */), align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */), cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n') }; for (i = 0; i < item.align.length; i++) { if (/^ *-+: *$/.test(item.align[i])) { item.align[i] = 'right'; } else if (/^ *:-+: *$/.test(item.align[i])) { item.align[i] = 'center'; } else if (/^ *:-+ *$/.test(item.align[i])) { item.align[i] = 'left'; } else { item.align[i] = null; } }
                for (i = 0; i < item.cells.length; i++) { item.cells[i] = item.cells[i].replace(/^ *\| *| *\| *$/g, '').split(/ *\| */); }
                this.tokens.push(item); continue;
            }
            if (cap = this.rules.lheading.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'heading', depth: cap[2] === '=' ? 1 : 2, text: cap[1] }); continue; }
            if (top && (cap = this.rules.paragraph.exec(src))) { src = src.substring(cap[0].length); this.tokens.push({ type: 'paragraph', text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1] }); continue; }
            if (cap = this.rules.text.exec(src)) { src = src.substring(cap[0].length); this.tokens.push({ type: 'text', text: cap[0] }); continue; }
            if (src) { throw new Error('Infinite loop on byte: ' + src.charCodeAt(0)); }
        }
        return this.tokens;
    }; var inline = { escape: /^\\([\\`*{}\[\]()#+\-.!_>])/, autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/, url: noop, tag: /^<!--[\s\S]*?-->|^<\/?[a-zA-Z0-9\-]+(?:"[^"]*"|'[^']*'|\s[^<'">\/\s]*)*?\/?>/, link: /^!?\[(inside)\]\(href\)/, reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/, nolink: /^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/, strong: /^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)|^__([^\s])__(?!_)|^\*\*([^\s])\*\*(?!\*)/, em: /^_([^\s][\s\S]*?[^\s_])_(?!_)|^_([^\s_][\s\S]*?[^\s])_(?!_)|^\*([^\s][\s\S]*?[^\s*])\*(?!\*)|^\*([^\s*][\s\S]*?[^\s])\*(?!\*)|^_([^\s_])_(?!_)|^\*([^\s*])\*(?!\*)/, code: /^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/, br: /^ {2,}\n(?!\s*$)/, del: noop, text: /^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\n|$)/ }; inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/; inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/; inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex()
    inline._inside = /(?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]]|\](?=[^\[]*\]))*/; inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/; inline.link = edit(inline.link).replace('inside', inline._inside).replace('href', inline._href).getRegex(); inline.reflink = edit(inline.reflink).replace('inside', inline._inside).getRegex(); inline.normal = merge({}, inline); inline.pedantic = merge({}, inline.normal, { strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/, em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/ }); inline.gfm = merge({}, inline.normal, { escape: edit(inline.escape).replace('])', '~|])').getRegex(), url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace('email', inline._email).getRegex(), _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/, del: /^~~(?=\S)([\s\S]*?\S)~~/, text: edit(inline.text).replace(']|', '~]|').replace('|', '|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&\'*+/=?^_`{\\|}~-]+@|').getRegex() }); inline.breaks = merge({}, inline.gfm, { br: edit(inline.br).replace('{2,}', '*').getRegex(), text: edit(inline.gfm.text).replace('{2,}', '*').getRegex() }); function InlineLexer(links, options) {
        this.options = options || marked.defaults; this.links = links; this.rules = inline.normal; this.renderer = this.options.renderer || new Renderer(); this.renderer.options = this.options; if (!this.links) { throw new Error('Tokens array requires a `links` property.'); }
        if (this.options.gfm) { if (this.options.breaks) { this.rules = inline.breaks; } else { this.rules = inline.gfm; } } else if (this.options.pedantic) { this.rules = inline.pedantic; }
    }
    InlineLexer.rules = inline; InlineLexer.output = function (src, links, options) { var inline = new InlineLexer(links, options); return inline.output(src); }; InlineLexer.prototype.output = function (src) {
        var out = '', link, text, href, cap; while (src) {
            if (cap = this.rules.escape.exec(src)) { src = src.substring(cap[0].length); out += cap[1]; continue; }
            if (cap = this.rules.autolink.exec(src)) {
                src = src.substring(cap[0].length); if (cap[2] === '@') { text = escape(this.mangle(cap[1])); href = 'mailto:' + text; } else { text = escape(cap[1]); href = text; }
                out += this.renderer.link(href, null, text); continue;
            }
            if (!this.inLink && (cap = this.rules.url.exec(src))) {
                cap[0] = this.rules._backpedal.exec(cap[0])[0]; src = src.substring(cap[0].length); if (cap[2] === '@') { text = escape(cap[0]); href = 'mailto:' + text; } else { text = escape(cap[0]); if (cap[1] === 'www.') { href = 'http://' + text; } else { href = text; } }
                out += this.renderer.link(href, null, text); continue;
            }
            if (cap = this.rules.tag.exec(src)) {
                if (!this.inLink && /^<a /i.test(cap[0])) { this.inLink = true; } else if (this.inLink && /^<\/a>/i.test(cap[0])) { this.inLink = false; }
                src = src.substring(cap[0].length); out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
                continue;
            }
            if (cap = this.rules.link.exec(src)) { src = src.substring(cap[0].length); this.inLink = true; out += this.outputLink(cap, { href: cap[2], title: cap[3] }); this.inLink = false; continue; }
            if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {
                src = src.substring(cap[0].length); link = (cap[2] || cap[1]).replace(/\s+/g, ' '); link = this.links[link.toLowerCase()]; if (!link || !link.href) { out += cap[0].charAt(0); src = cap[0].substring(1) + src; continue; }
                this.inLink = true; out += this.outputLink(cap, link); this.inLink = false; continue;
            }
            if (cap = this.rules.strong.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1])); continue; }
            if (cap = this.rules.em.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1])); continue; }
            if (cap = this.rules.code.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.codespan(escape(cap[2].trim(), true)); continue; }
            if (cap = this.rules.br.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.br(); continue; }
            if (cap = this.rules.del.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.del(this.output(cap[1])); continue; }
            if (cap = this.rules.text.exec(src)) { src = src.substring(cap[0].length); out += this.renderer.text(escape(this.smartypants(cap[0]))); continue; }
            if (src) { throw new Error('Infinite loop on byte: ' + src.charCodeAt(0)); }
        }
        return out;
    }; InlineLexer.prototype.outputLink = function (cap, link) { var href = escape(link.href), title = link.title ? escape(link.title) : null; return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1])); }; InlineLexer.prototype.smartypants = function (text) { if (!this.options.smartypants) return text; return text.replace(/---/g, '\u2014').replace(/--/g, '\u2013').replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018').replace(/'/g, '\u2019').replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c').replace(/"/g, '\u201d').replace(/\.{3}/g, '\u2026'); }; InlineLexer.prototype.mangle = function (text) {
        if (!this.options.mangle) return text; var out = '', l = text.length, i = 0, ch; for (; i < l; i++) {
            ch = text.charCodeAt(i); if (Math.random() > 0.5) { ch = 'x' + ch.toString(16); }
            out += '&#' + ch + ';';
        }
        return out;
    }; function Renderer(options) { this.options = options || marked.defaults; }
    Renderer.prototype.code = function (code, lang, escaped) {
        if (this.options.highlight) { var out = this.options.highlight(code, lang); if (out != null && out !== code) { escaped = true; code = out; } }
        if (!lang) {
            return '<pre><code>'
                + (escaped ? code : escape(code, true))
                + '\n</code></pre>';
        }
        return '<pre><code class="'
            + this.options.langPrefix
            + escape(lang, true)
            + '">'
            + (escaped ? code : escape(code, true))
            + '\n</code></pre>\n';
    }; Renderer.prototype.blockquote = function (quote) { return '<blockquote>\n' + quote + '</blockquote>\n'; }; Renderer.prototype.html = function (html) { return html; }; Renderer.prototype.heading = function (text, level, raw) {
        if (this.options.headerIds) {
            return '<h'
                + level
                + ' id="'
                + this.options.headerPrefix
                + raw.toLowerCase().replace(/[^\w]+/g, '-')
                + '">'
                + text
                + '</h'
                + level
                + '>\n';
        }
        return '<h' + level + '>' + text + '</h' + level + '>\n';
    }; Renderer.prototype.hr = function () { return this.options.xhtml ? '<hr/>\n' : '<hr>\n'; }; Renderer.prototype.list = function (body, ordered, start) { var type = ordered ? 'ol' : 'ul', startatt = (ordered && start !== 1) ? (' start="' + start + '"') : ''; return '<' + type + startatt + '>\n' + body + '</' + type + '>\n'; }; Renderer.prototype.listitem = function (text) { return '<li>' + text + '</li>\n'; }; Renderer.prototype.paragraph = function (text) { return '<p>' + text + '</p>\n'; }; Renderer.prototype.table = function (header, body) {
        return '<table>\n'
            + '<thead>\n'
            + header
            + '</thead>\n'
            + '<tbody>\n'
            + body
            + '</tbody>\n'
            + '</table>\n';
    }; Renderer.prototype.tablerow = function (content) { return '<tr>\n' + content + '</tr>\n'; }; Renderer.prototype.tablecell = function (content, flags) { var type = flags.header ? 'th' : 'td'; var tag = flags.align ? '<' + type + ' style="text-align:' + flags.align + '">' : '<' + type + '>'; return tag + content + '</' + type + '>\n'; }; Renderer.prototype.strong = function (text) { return '<strong>' + text + '</strong>'; }; Renderer.prototype.em = function (text) { return '<em>' + text + '</em>'; }; Renderer.prototype.codespan = function (text) { return '<code>' + text + '</code>'; }; Renderer.prototype.br = function () { return this.options.xhtml ? '<br/>' : '<br>'; }; Renderer.prototype.del = function (text) { return '<del>' + text + '</del>'; }; Renderer.prototype.link = function (href, title, text) {
        if (this.options.sanitize) {
            try { var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase(); } catch (e) { return text; }
            if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) { return text; }
        }
        if (this.options.baseUrl && !originIndependentUrl.test(href)) { href = resolveUrl(this.options.baseUrl, href); }
        var out = '<a href="' + href + '"'; if (title) { out += ' title="' + title + '"'; }
        out += '>' + text + '</a>'; return out;
    }; Renderer.prototype.image = function (href, title, text) {
        if (this.options.baseUrl && !originIndependentUrl.test(href)) { href = resolveUrl(this.options.baseUrl, href); }
        var out = '<img src="' + href + '" alt="' + text + '"'; if (title) { out += ' title="' + title + '"'; }
        out += this.options.xhtml ? '/>' : '>'; return out;
    }; Renderer.prototype.text = function (text) { return text; }; function TextRenderer() { }
    TextRenderer.prototype.strong = TextRenderer.prototype.em = TextRenderer.prototype.codespan = TextRenderer.prototype.del = TextRenderer.prototype.text = function (text) { return text; }
    TextRenderer.prototype.link = TextRenderer.prototype.image = function (href, title, text) { return '' + text; }
    TextRenderer.prototype.br = function () { return ''; }
    function Parser(options) { this.tokens = []; this.token = null; this.options = options || marked.defaults; this.options.renderer = this.options.renderer || new Renderer(); this.renderer = this.options.renderer; this.renderer.options = this.options; }
    Parser.parse = function (src, options) { var parser = new Parser(options); return parser.parse(src); }; Parser.prototype.parse = function (src) {
        this.inline = new InlineLexer(src.links, this.options); this.inlineText = new InlineLexer(src.links, merge({}, this.options, { renderer: new TextRenderer() })); this.tokens = src.reverse(); var out = ''; while (this.next()) { out += this.tok(); }
        return out;
    }; Parser.prototype.next = function () { return this.token = this.tokens.pop(); }; Parser.prototype.peek = function () { return this.tokens[this.tokens.length - 1] || 0; }; Parser.prototype.parseText = function () {
        var body = this.token.text; while (this.peek().type === 'text') { body += '\n' + this.next().text; }
        return this.inline.output(body);
    }; Parser.prototype.tok = function () {
        switch (this.token.type) {
            case 'space': { return ''; }
            case 'hr': { return this.renderer.hr(); }
            case 'heading': { return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, unescape(this.inlineText.output(this.token.text))); }
            case 'code': { return this.renderer.code(this.token.text, this.token.lang, this.token.escaped); }
            case 'table': {
                var header = '', body = '', i, row, cell, j; cell = ''; for (i = 0; i < this.token.header.length; i++) { cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), { header: true, align: this.token.align[i] }); }
                header += this.renderer.tablerow(cell); for (i = 0; i < this.token.cells.length; i++) {
                    row = this.token.cells[i]; cell = ''; for (j = 0; j < row.length; j++) { cell += this.renderer.tablecell(this.inline.output(row[j]), { header: false, align: this.token.align[j] }); }
                    body += this.renderer.tablerow(cell);
                }
                return this.renderer.table(header, body);
            }
            case 'blockquote_start': {
                body = ''; while (this.next().type !== 'blockquote_end') { body += this.tok(); }
                return this.renderer.blockquote(body);
            }
            case 'list_start': {
                body = ''; var ordered = this.token.ordered, start = this.token.start; while (this.next().type !== 'list_end') { body += this.tok(); }
                return this.renderer.list(body, ordered, start);
            }
            case 'list_item_start': {
                body = ''; while (this.next().type !== 'list_item_end') { body += this.token.type === 'text' ? this.parseText() : this.tok(); }
                return this.renderer.listitem(body);
            }
            case 'loose_item_start': {
                body = ''; while (this.next().type !== 'list_item_end') { body += this.tok(); }
                return this.renderer.listitem(body);
            }
            case 'html': { var html = !this.token.pre && !this.options.pedantic ? this.inline.output(this.token.text) : this.token.text; return this.renderer.html(html); }
            case 'paragraph': { return this.renderer.paragraph(this.inline.output(this.token.text)); }
            case 'text': { return this.renderer.paragraph(this.parseText()); }
        }
    }; function escape(html, encode) { return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;'); }
    function unescape(html) {
        return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig, function (_, n) {
            n = n.toLowerCase(); if (n === 'colon') return ':'; if (n.charAt(0) === '#') { return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1)); }
            return '';
        });
    }
    function edit(regex, opt) { regex = regex.source; opt = opt || ''; return { replace: function (name, val) { val = val.source || val; val = val.replace(/(^|[^\[])\^/g, '$1'); regex = regex.replace(name, val); return this; }, getRegex: function () { return new RegExp(regex, opt); } }; }
    function resolveUrl(base, href) {
        if (!baseUrls[' ' + base]) { if (/^[^:]+:\/*[^/]*$/.test(base)) { baseUrls[' ' + base] = base + '/'; } else { baseUrls[' ' + base] = base.replace(/[^/]*$/, ''); } }
        base = baseUrls[' ' + base]; if (href.slice(0, 2) === '//') { return base.replace(/:[\s\S]*/, ':') + href; } else if (href.charAt(0) === '/') { return base.replace(/(:\/*[^/]*)[\s\S]*/, '$1') + href; } else { return base + href; }
    }
    var baseUrls = {}; var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i; function noop() { }
    noop.exec = noop; function merge(obj) {
        var i = 1, target, key; for (; i < arguments.length; i++) { target = arguments[i]; for (key in target) { if (Object.prototype.hasOwnProperty.call(target, key)) { obj[key] = target[key]; } } }
        return obj;
    }
    function marked(src, opt, callback) {
        if (typeof src === 'undefined' || src === null) { throw new Error('marked(): input parameter is undefined or null'); }
        if (typeof src !== 'string') {
            throw new Error('marked(): input parameter is of type '
                + Object.prototype.toString.call(src) + ', string expected');
        }
        if (callback || typeof opt === 'function') {
            if (!callback) { callback = opt; opt = null; }
            opt = merge({}, marked.defaults, opt || {}); var highlight = opt.highlight, tokens, pending, i = 0; try { tokens = Lexer.lex(src, opt) } catch (e) { return callback(e); }
            pending = tokens.length; var done = function (err) {
                if (err) { opt.highlight = highlight; return callback(err); }
                var out; try { out = Parser.parse(tokens, opt); } catch (e) { err = e; }
                opt.highlight = highlight; return err ? callback(err) : callback(null, out);
            }; if (!highlight || highlight.length < 3) { return done(); }
            delete opt.highlight; if (!pending) return done(); for (; i < tokens.length; i++) {
                (function (token) {
                    if (token.type !== 'code') { return --pending || done(); }
                    return highlight(token.text, token.lang, function (err, code) {
                        if (err) return done(err); if (code == null || code === token.text) { return --pending || done(); }
                        token.text = code; token.escaped = true; --pending || done();
                    });
                })(tokens[i]);
            }
            return;
        }
        try { if (opt) opt = merge({}, marked.defaults, opt); return Parser.parse(Lexer.lex(src, opt), opt); } catch (e) {
            e.message += '\nPlease report this to https://github.com/markedjs/marked.'; if ((opt || marked.defaults).silent) {
                return '<p>An error occurred:</p><pre>'
                    + escape(e.message + '', true)
                    + '</pre>';
            }
            throw e;
        }
    }
    marked.options = marked.setOptions = function (opt) { merge(marked.defaults, opt); return marked; }; marked.defaults = { baseUrl: null, breaks: false, gfm: true, headerIds: true, headerPrefix: '', highlight: null, langPrefix: 'lang-', mangle: true, pedantic: false, renderer: new Renderer(), sanitize: false, sanitizer: null, silent: false, smartLists: false, smartypants: false, tables: true, xhtml: false }; marked.Parser = Parser; marked.parser = Parser.parse; marked.Renderer = Renderer; marked.TextRenderer = TextRenderer; marked.Lexer = Lexer; marked.lexer = Lexer.lex; marked.InlineLexer = InlineLexer; marked.inlineLexer = InlineLexer.output; marked.parse = marked; if (typeof module !== 'undefined' && typeof exports === 'object') { module.exports = marked; } else if (typeof define === 'function' && define.amd) { define(function () { return marked; }); } else { root.marked = marked; }
})(this || (typeof window !== 'undefined' ? window : global));; (function ($) { $.color = {}; $.color.make = function (r, g, b, a) { var o = {}; o.r = r || 0; o.g = g || 0; o.b = b || 0; o.a = a != null ? a : 1; o.add = function (c, d) { for (var i = 0; i < c.length; ++i)o[c.charAt(i)] += d; return o.normalize() }; o.scale = function (c, f) { for (var i = 0; i < c.length; ++i)o[c.charAt(i)] *= f; return o.normalize() }; o.toString = function () { if (o.a >= 1) { return "rgb(" + [o.r, o.g, o.b].join(",") + ")" } else { return "rgba(" + [o.r, o.g, o.b, o.a].join(",") + ")" } }; o.normalize = function () { function clamp(min, value, max) { return value < min ? min : value > max ? max : value } o.r = clamp(0, parseInt(o.r), 255); o.g = clamp(0, parseInt(o.g), 255); o.b = clamp(0, parseInt(o.b), 255); o.a = clamp(0, o.a, 1); return o }; o.clone = function () { return $.color.make(o.r, o.b, o.g, o.a) }; return o.normalize() }; $.color.extract = function (elem, css) { var c; do { c = elem.css(css).toLowerCase(); if (c != "" && c != "transparent") break; elem = elem.parent() } while (elem.length && !$.nodeName(elem.get(0), "body")); if (c == "rgba(0, 0, 0, 0)") c = "transparent"; return $.color.parse(c) }; $.color.parse = function (str) { var res, m = $.color.make; if (res = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(str)) return m(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10)); if (res = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str)) return m(parseInt(res[1], 10), parseInt(res[2], 10), parseInt(res[3], 10), parseFloat(res[4])); if (res = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(str)) return m(parseFloat(res[1]) * 2.55, parseFloat(res[2]) * 2.55, parseFloat(res[3]) * 2.55); if (res = /rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(str)) return m(parseFloat(res[1]) * 2.55, parseFloat(res[2]) * 2.55, parseFloat(res[3]) * 2.55, parseFloat(res[4])); if (res = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str)) return m(parseInt(res[1], 16), parseInt(res[2], 16), parseInt(res[3], 16)); if (res = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str)) return m(parseInt(res[1] + res[1], 16), parseInt(res[2] + res[2], 16), parseInt(res[3] + res[3], 16)); var name = $.trim(str).toLowerCase(); if (name == "transparent") return m(255, 255, 255, 0); else { res = lookupColors[name] || [0, 0, 0]; return m(res[0], res[1], res[2]) } }; var lookupColors = { aqua: [0, 255, 255], azure: [240, 255, 255], beige: [245, 245, 220], black: [0, 0, 0], blue: [0, 0, 255], brown: [165, 42, 42], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgrey: [169, 169, 169], darkgreen: [0, 100, 0], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkviolet: [148, 0, 211], fuchsia: [255, 0, 255], gold: [255, 215, 0], green: [0, 128, 0], indigo: [75, 0, 130], khaki: [240, 230, 140], lightblue: [173, 216, 230], lightcyan: [224, 255, 255], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightyellow: [255, 255, 224], lime: [0, 255, 0], magenta: [255, 0, 255], maroon: [128, 0, 0], navy: [0, 0, 128], olive: [128, 128, 0], orange: [255, 165, 0], pink: [255, 192, 203], purple: [128, 0, 128], violet: [128, 0, 128], red: [255, 0, 0], silver: [192, 192, 192], white: [255, 255, 255], yellow: [255, 255, 0] } })(jQuery); (function ($) { var hasOwnProperty = Object.prototype.hasOwnProperty; if (!$.fn.detach) { $.fn.detach = function () { return this.each(function () { if (this.parentNode) { this.parentNode.removeChild(this) } }) } } function Canvas(cls, container) { var element = container.children("." + cls)[0]; if (element == null) { element = document.createElement("canvas"); element.className = cls; $(element).css({ direction: "ltr", position: "absolute", left: 0, top: 0 }).appendTo(container); if (!element.getContext) { if (window.G_vmlCanvasManager) { element = window.G_vmlCanvasManager.initElement(element) } else { throw new Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.") } } } this.element = element; var context = this.context = element.getContext("2d"); var devicePixelRatio = window.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1; this.pixelRatio = devicePixelRatio / backingStoreRatio; this.resize(container.width(), container.height()); this.textContainer = null; this.text = {}; this._textCache = {} } Canvas.prototype.resize = function (width, height) { if (width <= 0 || height <= 0) { throw new Error("Invalid dimensions for plot, width = " + width + ", height = " + height) } var element = this.element, context = this.context, pixelRatio = this.pixelRatio; if (this.width != width) { element.width = width * pixelRatio; element.style.width = width + "px"; this.width = width } if (this.height != height) { element.height = height * pixelRatio; element.style.height = height + "px"; this.height = height } context.restore(); context.save(); context.scale(pixelRatio, pixelRatio) }; Canvas.prototype.clear = function () { this.context.clearRect(0, 0, this.width, this.height) }; Canvas.prototype.render = function () { var cache = this._textCache; for (var layerKey in cache) { if (hasOwnProperty.call(cache, layerKey)) { var layer = this.getTextLayer(layerKey), layerCache = cache[layerKey]; layer.hide(); for (var styleKey in layerCache) { if (hasOwnProperty.call(layerCache, styleKey)) { var styleCache = layerCache[styleKey]; for (var key in styleCache) { if (hasOwnProperty.call(styleCache, key)) { var positions = styleCache[key].positions; for (var i = 0, position; position = positions[i]; i++) { if (position.active) { if (!position.rendered) { layer.append(position.element); position.rendered = true } } else { positions.splice(i--, 1); if (position.rendered) { position.element.detach() } } } if (positions.length == 0) { delete styleCache[key] } } } } } layer.show() } } }; Canvas.prototype.getTextLayer = function (classes) { var layer = this.text[classes]; if (layer == null) { if (this.textContainer == null) { this.textContainer = $("<div class='flot-text'></div>").css({ position: "absolute", top: 0, left: 0, bottom: 0, right: 0, "font-size": "smaller", color: "#545454" }).insertAfter(this.element) } layer = this.text[classes] = $("<div></div>").addClass(classes).css({ position: "absolute", top: 0, left: 0, bottom: 0, right: 0 }).appendTo(this.textContainer) } return layer }; Canvas.prototype.getTextInfo = function (layer, text, font, angle, width) { var textStyle, layerCache, styleCache, info; text = "" + text; if (typeof font === "object") { textStyle = font.style + " " + font.variant + " " + font.weight + " " + font.size + "px/" + font.lineHeight + "px " + font.family } else { textStyle = font } layerCache = this._textCache[layer]; if (layerCache == null) { layerCache = this._textCache[layer] = {} } styleCache = layerCache[textStyle]; if (styleCache == null) { styleCache = layerCache[textStyle] = {} } info = styleCache[text]; if (info == null) { var element = $("<div></div>").html(text).css({ position: "absolute", "max-width": width, top: -9999 }).appendTo(this.getTextLayer(layer)); if (typeof font === "object") { element.css({ font: textStyle, color: font.color }) } else if (typeof font === "string") { element.addClass(font) } info = styleCache[text] = { width: element.outerWidth(true), height: element.outerHeight(true), element: element, positions: [] }; element.detach() } return info }; Canvas.prototype.addText = function (layer, x, y, text, font, angle, width, halign, valign) { var info = this.getTextInfo(layer, text, font, angle, width), positions = info.positions; if (halign == "center") { x -= info.width / 2 } else if (halign == "right") { x -= info.width } if (valign == "middle") { y -= info.height / 2 } else if (valign == "bottom") { y -= info.height } for (var i = 0, position; position = positions[i]; i++) { if (position.x == x && position.y == y) { position.active = true; return } } position = { active: true, rendered: false, element: positions.length ? info.element.clone() : info.element, x: x, y: y }; positions.push(position); position.element.css({ top: Math.round(y), left: Math.round(x), "text-align": halign }) }; Canvas.prototype.removeText = function (layer, x, y, text, font, angle) { if (text == null) { var layerCache = this._textCache[layer]; if (layerCache != null) { for (var styleKey in layerCache) { if (hasOwnProperty.call(layerCache, styleKey)) { var styleCache = layerCache[styleKey]; for (var key in styleCache) { if (hasOwnProperty.call(styleCache, key)) { var positions = styleCache[key].positions; for (var i = 0, position; position = positions[i]; i++) { position.active = false } } } } } } } else { var positions = this.getTextInfo(layer, text, font, angle).positions; for (var i = 0, position; position = positions[i]; i++) { if (position.x == x && position.y == y) { position.active = false } } } }; function Plot(placeholder, data_, options_, plugins) { var series = [], options = { colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"], legend: { show: true, noColumns: 1, labelFormatter: null, labelBoxBorderColor: "#ccc", container: null, position: "ne", margin: 5, backgroundColor: null, backgroundOpacity: .85, sorted: null }, xaxis: { show: null, position: "bottom", mode: null, font: null, color: null, tickColor: null, transform: null, inverseTransform: null, min: null, max: null, autoscaleMargin: null, ticks: null, tickFormatter: null, labelWidth: null, labelHeight: null, reserveSpace: null, tickLength: null, alignTicksWithAxis: null, tickDecimals: null, tickSize: null, minTickSize: null }, yaxis: { autoscaleMargin: .02, position: "left" }, xaxes: [], yaxes: [], series: { points: { show: false, radius: 3, lineWidth: 2, fill: true, fillColor: "#ffffff", symbol: "circle" }, lines: { lineWidth: 2, fill: false, fillColor: null, steps: false }, bars: { show: false, lineWidth: 2, barWidth: 1, fill: true, fillColor: null, align: "left", horizontal: false, zero: true }, shadowSize: 3, highlightColor: null }, grid: { show: true, aboveData: false, color: "#545454", backgroundColor: null, borderColor: null, tickColor: null, margin: 0, labelMargin: 5, axisMargin: 8, borderWidth: 2, minBorderMargin: null, markings: null, markingsColor: "#f4f4f4", markingsLineWidth: 2, clickable: false, hoverable: false, autoHighlight: true, mouseActiveRadius: 10 }, interaction: { redrawOverlayInterval: 1e3 / 60 }, hooks: {} }, surface = null, overlay = null, eventHolder = null, ctx = null, octx = null, xaxes = [], yaxes = [], plotOffset = { left: 0, right: 0, top: 0, bottom: 0 }, plotWidth = 0, plotHeight = 0, hooks = { processOptions: [], processRawData: [], processDatapoints: [], processOffset: [], drawBackground: [], drawSeries: [], draw: [], bindEvents: [], drawOverlay: [], shutdown: [] }, plot = this; plot.setData = setData; plot.setupGrid = setupGrid; plot.draw = draw; plot.getPlaceholder = function () { return placeholder }; plot.getCanvas = function () { return surface.element }; plot.getPlotOffset = function () { return plotOffset }; plot.width = function () { return plotWidth }; plot.height = function () { return plotHeight }; plot.offset = function () { var o = eventHolder.offset(); o.left += plotOffset.left; o.top += plotOffset.top; return o }; plot.getData = function () { return series }; plot.getAxes = function () { var res = {}, i; $.each(xaxes.concat(yaxes), function (_, axis) { if (axis) res[axis.direction + (axis.n != 1 ? axis.n : "") + "axis"] = axis }); return res }; plot.getXAxes = function () { return xaxes }; plot.getYAxes = function () { return yaxes }; plot.c2p = canvasToAxisCoords; plot.p2c = axisToCanvasCoords; plot.getOptions = function () { return options }; plot.highlight = highlight; plot.unhighlight = unhighlight; plot.triggerRedrawOverlay = triggerRedrawOverlay; plot.pointOffset = function (point) { return { left: parseInt(xaxes[axisNumber(point, "x") - 1].p2c(+point.x) + plotOffset.left, 10), top: parseInt(yaxes[axisNumber(point, "y") - 1].p2c(+point.y) + plotOffset.top, 10) } }; plot.shutdown = shutdown; plot.destroy = function () { shutdown(); placeholder.removeData("plot").empty(); series = []; options = null; surface = null; overlay = null; eventHolder = null; ctx = null; octx = null; xaxes = []; yaxes = []; hooks = null; highlights = []; plot = null }; plot.resize = function () { var width = placeholder.width(), height = placeholder.height(); surface.resize(width, height); overlay.resize(width, height) }; plot.hooks = hooks; initPlugins(plot); parseOptions(options_); setupCanvases(); setData(data_); setupGrid(); draw(); bindEvents(); function executeHooks(hook, args) { args = [plot].concat(args); for (var i = 0; i < hook.length; ++i)hook[i].apply(this, args) } function initPlugins() { var classes = { Canvas: Canvas }; for (var i = 0; i < plugins.length; ++i) { var p = plugins[i]; p.init(plot, classes); if (p.options) $.extend(true, options, p.options) } } function parseOptions(opts) { $.extend(true, options, opts); if (opts && opts.colors) { options.colors = opts.colors } if (options.xaxis.color == null) options.xaxis.color = $.color.parse(options.grid.color).scale("a", .22).toString(); if (options.yaxis.color == null) options.yaxis.color = $.color.parse(options.grid.color).scale("a", .22).toString(); if (options.xaxis.tickColor == null) options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color; if (options.yaxis.tickColor == null) options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color; if (options.grid.borderColor == null) options.grid.borderColor = options.grid.color; if (options.grid.tickColor == null) options.grid.tickColor = $.color.parse(options.grid.color).scale("a", .22).toString(); var i, axisOptions, axisCount, fontSize = placeholder.css("font-size"), fontSizeDefault = fontSize ? +fontSize.replace("px", "") : 13, fontDefaults = { style: placeholder.css("font-style"), size: Math.round(.8 * fontSizeDefault), variant: placeholder.css("font-variant"), weight: placeholder.css("font-weight"), family: placeholder.css("font-family") }; axisCount = options.xaxes.length || 1; for (i = 0; i < axisCount; ++i) { axisOptions = options.xaxes[i]; if (axisOptions && !axisOptions.tickColor) { axisOptions.tickColor = axisOptions.color } axisOptions = $.extend(true, {}, options.xaxis, axisOptions); options.xaxes[i] = axisOptions; if (axisOptions.font) { axisOptions.font = $.extend({}, fontDefaults, axisOptions.font); if (!axisOptions.font.color) { axisOptions.font.color = axisOptions.color } if (!axisOptions.font.lineHeight) { axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15) } } } axisCount = options.yaxes.length || 1; for (i = 0; i < axisCount; ++i) { axisOptions = options.yaxes[i]; if (axisOptions && !axisOptions.tickColor) { axisOptions.tickColor = axisOptions.color } axisOptions = $.extend(true, {}, options.yaxis, axisOptions); options.yaxes[i] = axisOptions; if (axisOptions.font) { axisOptions.font = $.extend({}, fontDefaults, axisOptions.font); if (!axisOptions.font.color) { axisOptions.font.color = axisOptions.color } if (!axisOptions.font.lineHeight) { axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15) } } } if (options.xaxis.noTicks && options.xaxis.ticks == null) options.xaxis.ticks = options.xaxis.noTicks; if (options.yaxis.noTicks && options.yaxis.ticks == null) options.yaxis.ticks = options.yaxis.noTicks; if (options.x2axis) { options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis); options.xaxes[1].position = "top"; if (options.x2axis.min == null) { options.xaxes[1].min = null } if (options.x2axis.max == null) { options.xaxes[1].max = null } } if (options.y2axis) { options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis); options.yaxes[1].position = "right"; if (options.y2axis.min == null) { options.yaxes[1].min = null } if (options.y2axis.max == null) { options.yaxes[1].max = null } } if (options.grid.coloredAreas) options.grid.markings = options.grid.coloredAreas; if (options.grid.coloredAreasColor) options.grid.markingsColor = options.grid.coloredAreasColor; if (options.lines) $.extend(true, options.series.lines, options.lines); if (options.points) $.extend(true, options.series.points, options.points); if (options.bars) $.extend(true, options.series.bars, options.bars); if (options.shadowSize != null) options.series.shadowSize = options.shadowSize; if (options.highlightColor != null) options.series.highlightColor = options.highlightColor; for (i = 0; i < options.xaxes.length; ++i)getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i]; for (i = 0; i < options.yaxes.length; ++i)getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i]; for (var n in hooks) if (options.hooks[n] && options.hooks[n].length) hooks[n] = hooks[n].concat(options.hooks[n]); executeHooks(hooks.processOptions, [options]) } function setData(d) { series = parseData(d); fillInSeriesOptions(); processData() } function parseData(d) { var res = []; for (var i = 0; i < d.length; ++i) { var s = $.extend(true, {}, options.series); if (d[i].data != null) { s.data = d[i].data; delete d[i].data; $.extend(true, s, d[i]); d[i].data = s.data } else s.data = d[i]; res.push(s) } return res } function axisNumber(obj, coord) { var a = obj[coord + "axis"]; if (typeof a == "object") a = a.n; if (typeof a != "number") a = 1; return a } function allAxes() { return $.grep(xaxes.concat(yaxes), function (a) { return a }) } function canvasToAxisCoords(pos) { var res = {}, i, axis; for (i = 0; i < xaxes.length; ++i) { axis = xaxes[i]; if (axis && axis.used) res["x" + axis.n] = axis.c2p(pos.left) } for (i = 0; i < yaxes.length; ++i) { axis = yaxes[i]; if (axis && axis.used) res["y" + axis.n] = axis.c2p(pos.top) } if (res.x1 !== undefined) res.x = res.x1; if (res.y1 !== undefined) res.y = res.y1; return res } function axisToCanvasCoords(pos) { var res = {}, i, axis, key; for (i = 0; i < xaxes.length; ++i) { axis = xaxes[i]; if (axis && axis.used) { key = "x" + axis.n; if (pos[key] == null && axis.n == 1) key = "x"; if (pos[key] != null) { res.left = axis.p2c(pos[key]); break } } } for (i = 0; i < yaxes.length; ++i) { axis = yaxes[i]; if (axis && axis.used) { key = "y" + axis.n; if (pos[key] == null && axis.n == 1) key = "y"; if (pos[key] != null) { res.top = axis.p2c(pos[key]); break } } } return res } function getOrCreateAxis(axes, number) { if (!axes[number - 1]) axes[number - 1] = { n: number, direction: axes == xaxes ? "x" : "y", options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis) }; return axes[number - 1] } function fillInSeriesOptions() { var neededColors = series.length, maxIndex = -1, i; for (i = 0; i < series.length; ++i) { var sc = series[i].color; if (sc != null) { neededColors--; if (typeof sc == "number" && sc > maxIndex) { maxIndex = sc } } } if (neededColors <= maxIndex) { neededColors = maxIndex + 1 } var c, colors = [], colorPool = options.colors, colorPoolSize = colorPool.length, variation = 0; for (i = 0; i < neededColors; i++) { c = $.color.parse(colorPool[i % colorPoolSize] || "#666"); if (i % colorPoolSize == 0 && i) { if (variation >= 0) { if (variation < .5) { variation = -variation - .2 } else variation = 0 } else variation = -variation } colors[i] = c.scale("rgb", 1 + variation) } var colori = 0, s; for (i = 0; i < series.length; ++i) { s = series[i]; if (s.color == null) { s.color = colors[colori].toString(); ++colori } else if (typeof s.color == "number") s.color = colors[s.color].toString(); if (s.lines.show == null) { var v, show = true; for (v in s) if (s[v] && s[v].show) { show = false; break } if (show) s.lines.show = true } if (s.lines.zero == null) { s.lines.zero = !!s.lines.fill } s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, "x")); s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, "y")) } } function processData() { var topSentry = Number.POSITIVE_INFINITY, bottomSentry = Number.NEGATIVE_INFINITY, fakeInfinity = Number.MAX_VALUE, i, j, k, m, length, s, points, ps, x, y, axis, val, f, p, data, format; function updateAxis(axis, min, max) { if (min < axis.datamin && min != -fakeInfinity) axis.datamin = min; if (max > axis.datamax && max != fakeInfinity) axis.datamax = max } $.each(allAxes(), function (_, axis) { axis.datamin = topSentry; axis.datamax = bottomSentry; axis.used = false }); for (i = 0; i < series.length; ++i) { s = series[i]; s.datapoints = { points: [] }; executeHooks(hooks.processRawData, [s, s.data, s.datapoints]) } for (i = 0; i < series.length; ++i) { s = series[i]; data = s.data; format = s.datapoints.format; if (!format) { format = []; format.push({ x: true, number: true, required: true }); format.push({ y: true, number: true, required: true }); if (s.bars.show || s.lines.show && s.lines.fill) { var autoscale = !!(s.bars.show && s.bars.zero || s.lines.show && s.lines.zero); format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale }); if (s.bars.horizontal) { delete format[format.length - 1].y; format[format.length - 1].x = true } } s.datapoints.format = format } if (s.datapoints.pointsize != null) continue; s.datapoints.pointsize = format.length; ps = s.datapoints.pointsize; points = s.datapoints.points; var insertSteps = s.lines.show && s.lines.steps; s.xaxis.used = s.yaxis.used = true; for (j = k = 0; j < data.length; ++j, k += ps) { p = data[j]; var nullify = p == null; if (!nullify) { for (m = 0; m < ps; ++m) { val = p[m]; f = format[m]; if (f) { if (f.number && val != null) { val = +val; if (isNaN(val)) val = null; else if (val == Infinity) val = fakeInfinity; else if (val == -Infinity) val = -fakeInfinity } if (val == null) { if (f.required) nullify = true; if (f.defaultValue != null) val = f.defaultValue } } points[k + m] = val } } if (nullify) { for (m = 0; m < ps; ++m) { val = points[k + m]; if (val != null) { f = format[m]; if (f.autoscale !== false) { if (f.x) { updateAxis(s.xaxis, val, val) } if (f.y) { updateAxis(s.yaxis, val, val) } } } points[k + m] = null } } else { if (insertSteps && k > 0 && points[k - ps] != null && points[k - ps] != points[k] && points[k - ps + 1] != points[k + 1]) { for (m = 0; m < ps; ++m)points[k + ps + m] = points[k + m]; points[k + 1] = points[k - ps + 1]; k += ps } } } } for (i = 0; i < series.length; ++i) { s = series[i]; executeHooks(hooks.processDatapoints, [s, s.datapoints]) } for (i = 0; i < series.length; ++i) { s = series[i]; points = s.datapoints.points; ps = s.datapoints.pointsize; format = s.datapoints.format; var xmin = topSentry, ymin = topSentry, xmax = bottomSentry, ymax = bottomSentry; for (j = 0; j < points.length; j += ps) { if (points[j] == null) continue; for (m = 0; m < ps; ++m) { val = points[j + m]; f = format[m]; if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity) continue; if (f.x) { if (val < xmin) xmin = val; if (val > xmax) xmax = val } if (f.y) { if (val < ymin) ymin = val; if (val > ymax) ymax = val } } } if (s.bars.show) { var delta; switch (s.bars.align) { case "left": delta = 0; break; case "right": delta = -s.bars.barWidth; break; default: delta = -s.bars.barWidth / 2 }if (s.bars.horizontal) { ymin += delta; ymax += delta + s.bars.barWidth } else { xmin += delta; xmax += delta + s.bars.barWidth } } updateAxis(s.xaxis, xmin, xmax); updateAxis(s.yaxis, ymin, ymax) } $.each(allAxes(), function (_, axis) { if (axis.datamin == topSentry) axis.datamin = null; if (axis.datamax == bottomSentry) axis.datamax = null }) } function setupCanvases() { placeholder.css("padding", 0).children().filter(function () { return !$(this).hasClass("flot-overlay") && !$(this).hasClass("flot-base") }).remove(); if (placeholder.css("position") == "static") placeholder.css("position", "relative"); surface = new Canvas("flot-base", placeholder); overlay = new Canvas("flot-overlay", placeholder); ctx = surface.context; octx = overlay.context; eventHolder = $(overlay.element).unbind(); var existing = placeholder.data("plot"); if (existing) { existing.shutdown(); overlay.clear() } placeholder.data("plot", plot) } function bindEvents() { if (options.grid.hoverable) { eventHolder.mousemove(onMouseMove); eventHolder.bind("mouseleave", onMouseLeave) } if (options.grid.clickable) eventHolder.click(onClick); executeHooks(hooks.bindEvents, [eventHolder]) } function shutdown() { if (redrawTimeout) clearTimeout(redrawTimeout); eventHolder.unbind("mousemove", onMouseMove); eventHolder.unbind("mouseleave", onMouseLeave); eventHolder.unbind("click", onClick); executeHooks(hooks.shutdown, [eventHolder]) } function setTransformationHelpers(axis) { function identity(x) { return x } var s, m, t = axis.options.transform || identity, it = axis.options.inverseTransform; if (axis.direction == "x") { s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min)); m = Math.min(t(axis.max), t(axis.min)) } else { s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min)); s = -s; m = Math.max(t(axis.max), t(axis.min)) } if (t == identity) axis.p2c = function (p) { return (p - m) * s }; else axis.p2c = function (p) { return (t(p) - m) * s }; if (!it) axis.c2p = function (c) { return m + c / s }; else axis.c2p = function (c) { return it(m + c / s) } } function measureTickLabels(axis) { var opts = axis.options, ticks = axis.ticks || [], labelWidth = opts.labelWidth || 0, labelHeight = opts.labelHeight || 0, maxWidth = labelWidth || (axis.direction == "x" ? Math.floor(surface.width / (ticks.length || 1)) : null), legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis", layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles, font = opts.font || "flot-tick-label tickLabel"; for (var i = 0; i < ticks.length; ++i) { var t = ticks[i]; if (!t.label) continue; var info = surface.getTextInfo(layer, t.label, font, null, maxWidth); labelWidth = Math.max(labelWidth, info.width); labelHeight = Math.max(labelHeight, info.height) } axis.labelWidth = opts.labelWidth || labelWidth; axis.labelHeight = opts.labelHeight || labelHeight } function allocateAxisBoxFirstPhase(axis) { var lw = axis.labelWidth, lh = axis.labelHeight, pos = axis.options.position, isXAxis = axis.direction === "x", tickLength = axis.options.tickLength, axisMargin = options.grid.axisMargin, padding = options.grid.labelMargin, innermost = true, outermost = true, first = true, found = false; $.each(isXAxis ? xaxes : yaxes, function (i, a) { if (a && (a.show || a.reserveSpace)) { if (a === axis) { found = true } else if (a.options.position === pos) { if (found) { outermost = false } else { innermost = false } } if (!found) { first = false } } }); if (outermost) { axisMargin = 0 } if (tickLength == null) { tickLength = first ? "full" : 5 } if (!isNaN(+tickLength)) padding += +tickLength; if (isXAxis) { lh += padding; if (pos == "bottom") { plotOffset.bottom += lh + axisMargin; axis.box = { top: surface.height - plotOffset.bottom, height: lh } } else { axis.box = { top: plotOffset.top + axisMargin, height: lh }; plotOffset.top += lh + axisMargin } } else { lw += padding; if (pos == "left") { axis.box = { left: plotOffset.left + axisMargin, width: lw }; plotOffset.left += lw + axisMargin } else { plotOffset.right += lw + axisMargin; axis.box = { left: surface.width - plotOffset.right, width: lw } } } axis.position = pos; axis.tickLength = tickLength; axis.box.padding = padding; axis.innermost = innermost } function allocateAxisBoxSecondPhase(axis) { if (axis.direction == "x") { axis.box.left = plotOffset.left - axis.labelWidth / 2; axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth } else { axis.box.top = plotOffset.top - axis.labelHeight / 2; axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight } } function adjustLayoutForThingsStickingOut() { var minMargin = options.grid.minBorderMargin, axis, i; if (minMargin == null) { minMargin = 0; for (i = 0; i < series.length; ++i)minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth / 2)) } var margins = { left: minMargin, right: minMargin, top: minMargin, bottom: minMargin }; $.each(allAxes(), function (_, axis) { if (axis.reserveSpace && axis.ticks && axis.ticks.length) { if (axis.direction === "x") { margins.left = Math.max(margins.left, axis.labelWidth / 2); margins.right = Math.max(margins.right, axis.labelWidth / 2) } else { margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2); margins.top = Math.max(margins.top, axis.labelHeight / 2) } } }); plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left)); plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right)); plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top)); plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom)) } function setupGrid() { var i, axes = allAxes(), showGrid = options.grid.show; for (var a in plotOffset) { var margin = options.grid.margin || 0; plotOffset[a] = typeof margin == "number" ? margin : margin[a] || 0 } executeHooks(hooks.processOffset, [plotOffset]); for (var a in plotOffset) { if (typeof options.grid.borderWidth == "object") { plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0 } else { plotOffset[a] += showGrid ? options.grid.borderWidth : 0 } } $.each(axes, function (_, axis) { var axisOpts = axis.options; axis.show = axisOpts.show == null ? axis.used : axisOpts.show; axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace; setRange(axis) }); if (showGrid) { var allocatedAxes = $.grep(axes, function (axis) { return axis.show || axis.reserveSpace }); $.each(allocatedAxes, function (_, axis) { setupTickGeneration(axis); setTicks(axis); snapRangeToTicks(axis, axis.ticks); measureTickLabels(axis) }); for (i = allocatedAxes.length - 1; i >= 0; --i)allocateAxisBoxFirstPhase(allocatedAxes[i]); adjustLayoutForThingsStickingOut(); $.each(allocatedAxes, function (_, axis) { allocateAxisBoxSecondPhase(axis) }) } plotWidth = surface.width - plotOffset.left - plotOffset.right; plotHeight = surface.height - plotOffset.bottom - plotOffset.top; $.each(axes, function (_, axis) { setTransformationHelpers(axis) }); if (showGrid) { drawAxisLabels() } insertLegend() } function setRange(axis) { var opts = axis.options, min = +(opts.min != null ? opts.min : axis.datamin), max = +(opts.max != null ? opts.max : axis.datamax), delta = max - min; if (delta == 0) { var widen = max == 0 ? 1 : .01; if (opts.min == null) min -= widen; if (opts.max == null || opts.min != null) max += widen } else { var margin = opts.autoscaleMargin; if (margin != null) { if (opts.min == null) { min -= delta * margin; if (min < 0 && axis.datamin != null && axis.datamin >= 0) min = 0 } if (opts.max == null) { max += delta * margin; if (max > 0 && axis.datamax != null && axis.datamax <= 0) max = 0 } } } axis.min = min; axis.max = max } function setupTickGeneration(axis) { var opts = axis.options; var noTicks; if (typeof opts.ticks == "number" && opts.ticks > 0) noTicks = opts.ticks; else noTicks = .3 * Math.sqrt(axis.direction == "x" ? surface.width : surface.height); var delta = (axis.max - axis.min) / noTicks, dec = -Math.floor(Math.log(delta) / Math.LN10), maxDec = opts.tickDecimals; if (maxDec != null && dec > maxDec) { dec = maxDec } var magn = Math.pow(10, -dec), norm = delta / magn, size; if (norm < 1.5) { size = 1 } else if (norm < 3) { size = 2; if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) { size = 2.5; ++dec } } else if (norm < 7.5) { size = 5 } else { size = 10 } size *= magn; if (opts.minTickSize != null && size < opts.minTickSize) { size = opts.minTickSize } axis.delta = delta; axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec); axis.tickSize = opts.tickSize || size; if (opts.mode == "time" && !axis.tickGenerator) { throw new Error("Time mode requires the flot.time plugin.") } if (!axis.tickGenerator) { axis.tickGenerator = function (axis) { var ticks = [], start = floorInBase(axis.min, axis.tickSize), i = 0, v = Number.NaN, prev; do { prev = v; v = start + i * axis.tickSize; ticks.push(v); ++i } while (v < axis.max && v != prev); return ticks }; axis.tickFormatter = function (value, axis) { var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1; var formatted = "" + Math.round(value * factor) / factor; if (axis.tickDecimals != null) { var decimal = formatted.indexOf("."); var precision = decimal == -1 ? 0 : formatted.length - decimal - 1; if (precision < axis.tickDecimals) { return (precision ? formatted : formatted + ".") + ("" + factor).substr(1, axis.tickDecimals - precision) } } return formatted } } if ($.isFunction(opts.tickFormatter)) axis.tickFormatter = function (v, axis) { return "" + opts.tickFormatter(v, axis) }; if (opts.alignTicksWithAxis != null) { var otherAxis = (axis.direction == "x" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1]; if (otherAxis && otherAxis.used && otherAxis != axis) { var niceTicks = axis.tickGenerator(axis); if (niceTicks.length > 0) { if (opts.min == null) axis.min = Math.min(axis.min, niceTicks[0]); if (opts.max == null && niceTicks.length > 1) axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]) } axis.tickGenerator = function (axis) { var ticks = [], v, i; for (i = 0; i < otherAxis.ticks.length; ++i) { v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min); v = axis.min + v * (axis.max - axis.min); ticks.push(v) } return ticks }; if (!axis.mode && opts.tickDecimals == null) { var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1), ts = axis.tickGenerator(axis); if (!(ts.length > 1 && /\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec)))) axis.tickDecimals = extraDec } } } } function setTicks(axis) { var oticks = axis.options.ticks, ticks = []; if (oticks == null || typeof oticks == "number" && oticks > 0) ticks = axis.tickGenerator(axis); else if (oticks) { if ($.isFunction(oticks)) ticks = oticks(axis); else ticks = oticks } var i, v; axis.ticks = []; for (i = 0; i < ticks.length; ++i) { var label = null; var t = ticks[i]; if (typeof t == "object") { v = +t[0]; if (t.length > 1) label = t[1] } else v = +t; if (label == null) label = axis.tickFormatter(v, axis); if (!isNaN(v)) axis.ticks.push({ v: v, label: label }) } } function snapRangeToTicks(axis, ticks) { if (axis.options.autoscaleMargin && ticks.length > 0) { if (axis.options.min == null) axis.min = Math.min(axis.min, ticks[0].v); if (axis.options.max == null && ticks.length > 1) axis.max = Math.max(axis.max, ticks[ticks.length - 1].v) } } function draw() { surface.clear(); executeHooks(hooks.drawBackground, [ctx]); var grid = options.grid; if (grid.show && grid.backgroundColor) drawBackground(); if (grid.show && !grid.aboveData) { drawGrid() } for (var i = 0; i < series.length; ++i) { executeHooks(hooks.drawSeries, [ctx, series[i]]); drawSeries(series[i]) } executeHooks(hooks.draw, [ctx]); if (grid.show && grid.aboveData) { drawGrid() } surface.render(); triggerRedrawOverlay() } function extractRange(ranges, coord) { var axis, from, to, key, axes = allAxes(); for (var i = 0; i < axes.length; ++i) { axis = axes[i]; if (axis.direction == coord) { key = coord + axis.n + "axis"; if (!ranges[key] && axis.n == 1) key = coord + "axis"; if (ranges[key]) { from = ranges[key].from; to = ranges[key].to; break } } } if (!ranges[key]) { axis = coord == "x" ? xaxes[0] : yaxes[0]; from = ranges[coord + "1"]; to = ranges[coord + "2"] } if (from != null && to != null && from > to) { var tmp = from; from = to; to = tmp } return { from: from, to: to, axis: axis } } function drawBackground() { ctx.save(); ctx.translate(plotOffset.left, plotOffset.top); ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, "rgba(255, 255, 255, 0)"); ctx.fillRect(0, 0, plotWidth, plotHeight); ctx.restore() } function drawGrid() { var i, axes, bw, bc; ctx.save(); ctx.translate(plotOffset.left, plotOffset.top); var markings = options.grid.markings; if (markings) { if ($.isFunction(markings)) { axes = plot.getAxes(); axes.xmin = axes.xaxis.min; axes.xmax = axes.xaxis.max; axes.ymin = axes.yaxis.min; axes.ymax = axes.yaxis.max; markings = markings(axes) } for (i = 0; i < markings.length; ++i) { var m = markings[i], xrange = extractRange(m, "x"), yrange = extractRange(m, "y"); if (xrange.from == null) xrange.from = xrange.axis.min; if (xrange.to == null) xrange.to = xrange.axis.max; if (yrange.from == null) yrange.from = yrange.axis.min; if (yrange.to == null) yrange.to = yrange.axis.max; if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max || yrange.to < yrange.axis.min || yrange.from > yrange.axis.max) continue; xrange.from = Math.max(xrange.from, xrange.axis.min); xrange.to = Math.min(xrange.to, xrange.axis.max); yrange.from = Math.max(yrange.from, yrange.axis.min); yrange.to = Math.min(yrange.to, yrange.axis.max); var xequal = xrange.from === xrange.to, yequal = yrange.from === yrange.to; if (xequal && yequal) { continue } xrange.from = Math.floor(xrange.axis.p2c(xrange.from)); xrange.to = Math.floor(xrange.axis.p2c(xrange.to)); yrange.from = Math.floor(yrange.axis.p2c(yrange.from)); yrange.to = Math.floor(yrange.axis.p2c(yrange.to)); if (xequal || yequal) { var lineWidth = m.lineWidth || options.grid.markingsLineWidth, subPixel = lineWidth % 2 ? .5 : 0; ctx.beginPath(); ctx.strokeStyle = m.color || options.grid.markingsColor; ctx.lineWidth = lineWidth; if (xequal) { ctx.moveTo(xrange.to + subPixel, yrange.from); ctx.lineTo(xrange.to + subPixel, yrange.to) } else { ctx.moveTo(xrange.from, yrange.to + subPixel); ctx.lineTo(xrange.to, yrange.to + subPixel) } ctx.stroke() } else { ctx.fillStyle = m.color || options.grid.markingsColor; ctx.fillRect(xrange.from, yrange.to, xrange.to - xrange.from, yrange.from - yrange.to) } } } axes = allAxes(); bw = options.grid.borderWidth; for (var j = 0; j < axes.length; ++j) { var axis = axes[j], box = axis.box, t = axis.tickLength, x, y, xoff, yoff; if (!axis.show || axis.ticks.length == 0) continue; ctx.lineWidth = 1; if (axis.direction == "x") { x = 0; if (t == "full") y = axis.position == "top" ? 0 : plotHeight; else y = box.top - plotOffset.top + (axis.position == "top" ? box.height : 0) } else { y = 0; if (t == "full") x = axis.position == "left" ? 0 : plotWidth; else x = box.left - plotOffset.left + (axis.position == "left" ? box.width : 0) } if (!axis.innermost) { ctx.strokeStyle = axis.options.color; ctx.beginPath(); xoff = yoff = 0; if (axis.direction == "x") xoff = plotWidth + 1; else yoff = plotHeight + 1; if (ctx.lineWidth == 1) { if (axis.direction == "x") { y = Math.floor(y) + .5 } else { x = Math.floor(x) + .5 } } ctx.moveTo(x, y); ctx.lineTo(x + xoff, y + yoff); ctx.stroke() } ctx.strokeStyle = axis.options.tickColor; ctx.beginPath(); for (i = 0; i < axis.ticks.length; ++i) { var v = axis.ticks[i].v; xoff = yoff = 0; if (isNaN(v) || v < axis.min || v > axis.max || t == "full" && (typeof bw == "object" && bw[axis.position] > 0 || bw > 0) && (v == axis.min || v == axis.max)) continue; if (axis.direction == "x") { x = axis.p2c(v); yoff = t == "full" ? -plotHeight : t; if (axis.position == "top") yoff = -yoff } else { y = axis.p2c(v); xoff = t == "full" ? -plotWidth : t; if (axis.position == "left") xoff = -xoff } if (ctx.lineWidth == 1) { if (axis.direction == "x") x = Math.floor(x) + .5; else y = Math.floor(y) + .5 } ctx.moveTo(x, y); ctx.lineTo(x + xoff, y + yoff) } ctx.stroke() } if (bw) { bc = options.grid.borderColor; if (typeof bw == "object" || typeof bc == "object") { if (typeof bw !== "object") { bw = { top: bw, right: bw, bottom: bw, left: bw } } if (typeof bc !== "object") { bc = { top: bc, right: bc, bottom: bc, left: bc } } if (bw.top > 0) { ctx.strokeStyle = bc.top; ctx.lineWidth = bw.top; ctx.beginPath(); ctx.moveTo(0 - bw.left, 0 - bw.top / 2); ctx.lineTo(plotWidth, 0 - bw.top / 2); ctx.stroke() } if (bw.right > 0) { ctx.strokeStyle = bc.right; ctx.lineWidth = bw.right; ctx.beginPath(); ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top); ctx.lineTo(plotWidth + bw.right / 2, plotHeight); ctx.stroke() } if (bw.bottom > 0) { ctx.strokeStyle = bc.bottom; ctx.lineWidth = bw.bottom; ctx.beginPath(); ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2); ctx.lineTo(0, plotHeight + bw.bottom / 2); ctx.stroke() } if (bw.left > 0) { ctx.strokeStyle = bc.left; ctx.lineWidth = bw.left; ctx.beginPath(); ctx.moveTo(0 - bw.left / 2, plotHeight + bw.bottom); ctx.lineTo(0 - bw.left / 2, 0); ctx.stroke() } } else { ctx.lineWidth = bw; ctx.strokeStyle = options.grid.borderColor; ctx.strokeRect(-bw / 2, -bw / 2, plotWidth + bw, plotHeight + bw) } } ctx.restore() } function drawAxisLabels() { $.each(allAxes(), function (_, axis) { var box = axis.box, legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis", layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles, font = axis.options.font || "flot-tick-label tickLabel", tick, x, y, halign, valign; surface.removeText(layer); if (!axis.show || axis.ticks.length == 0) return; for (var i = 0; i < axis.ticks.length; ++i) { tick = axis.ticks[i]; if (!tick.label || tick.v < axis.min || tick.v > axis.max) continue; if (axis.direction == "x") { halign = "center"; x = plotOffset.left + axis.p2c(tick.v); if (axis.position == "bottom") { y = box.top + box.padding } else { y = box.top + box.height - box.padding; valign = "bottom" } } else { valign = "middle"; y = plotOffset.top + axis.p2c(tick.v); if (axis.position == "left") { x = box.left + box.width - box.padding; halign = "right" } else { x = box.left + box.padding } } surface.addText(layer, x, y, tick.label, font, null, null, halign, valign) } }) } function drawSeries(series) { if (series.lines.show) drawSeriesLines(series); if (series.bars.show) drawSeriesBars(series); if (series.points.show) drawSeriesPoints(series) } function drawSeriesLines(series) { function plotLine(datapoints, xoffset, yoffset, axisx, axisy) { var points = datapoints.points, ps = datapoints.pointsize, prevx = null, prevy = null; ctx.beginPath(); for (var i = ps; i < points.length; i += ps) { var x1 = points[i - ps], y1 = points[i - ps + 1], x2 = points[i], y2 = points[i + 1]; if (x1 == null || x2 == null) continue; if (y1 <= y2 && y1 < axisy.min) { if (y2 < axisy.min) continue; x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1; y1 = axisy.min } else if (y2 <= y1 && y2 < axisy.min) { if (y1 < axisy.min) continue; x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1; y2 = axisy.min } if (y1 >= y2 && y1 > axisy.max) { if (y2 > axisy.max) continue; x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1; y1 = axisy.max } else if (y2 >= y1 && y2 > axisy.max) { if (y1 > axisy.max) continue; x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1; y2 = axisy.max } if (x1 <= x2 && x1 < axisx.min) { if (x2 < axisx.min) continue; y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1; x1 = axisx.min } else if (x2 <= x1 && x2 < axisx.min) { if (x1 < axisx.min) continue; y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1; x2 = axisx.min } if (x1 >= x2 && x1 > axisx.max) { if (x2 > axisx.max) continue; y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1; x1 = axisx.max } else if (x2 >= x1 && x2 > axisx.max) { if (x1 > axisx.max) continue; y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1; x2 = axisx.max } if (x1 != prevx || y1 != prevy) ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset); prevx = x2; prevy = y2; ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset) } ctx.stroke() } function plotLineArea(datapoints, axisx, axisy) { var points = datapoints.points, ps = datapoints.pointsize, bottom = Math.min(Math.max(0, axisy.min), axisy.max), i = 0, top, areaOpen = false, ypos = 1, segmentStart = 0, segmentEnd = 0; while (true) { if (ps > 0 && i > points.length + ps) break; i += ps; var x1 = points[i - ps], y1 = points[i - ps + ypos], x2 = points[i], y2 = points[i + ypos]; if (areaOpen) { if (ps > 0 && x1 != null && x2 == null) { segmentEnd = i; ps = -ps; ypos = 2; continue } if (ps < 0 && i == segmentStart + ps) { ctx.fill(); areaOpen = false; ps = -ps; ypos = 1; i = segmentStart = segmentEnd + ps; continue } } if (x1 == null || x2 == null) continue; if (x1 <= x2 && x1 < axisx.min) { if (x2 < axisx.min) continue; y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1; x1 = axisx.min } else if (x2 <= x1 && x2 < axisx.min) { if (x1 < axisx.min) continue; y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1; x2 = axisx.min } if (x1 >= x2 && x1 > axisx.max) { if (x2 > axisx.max) continue; y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1; x1 = axisx.max } else if (x2 >= x1 && x2 > axisx.max) { if (x1 > axisx.max) continue; y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1; x2 = axisx.max } if (!areaOpen) { ctx.beginPath(); ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom)); areaOpen = true } if (y1 >= axisy.max && y2 >= axisy.max) { ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max)); ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max)); continue } else if (y1 <= axisy.min && y2 <= axisy.min) { ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min)); ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min)); continue } var x1old = x1, x2old = x2; if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) { x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1; y1 = axisy.min } else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) { x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1; y2 = axisy.min } if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) { x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1; y1 = axisy.max } else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) { x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1; y2 = axisy.max } if (x1 != x1old) { ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1)) } ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1)); ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2)); if (x2 != x2old) { ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2)); ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2)) } } } ctx.save(); ctx.translate(plotOffset.left, plotOffset.top); ctx.lineJoin = "round"; var lw = series.lines.lineWidth, sw = series.shadowSize; if (lw > 0 && sw > 0) { ctx.lineWidth = sw; ctx.strokeStyle = "rgba(0,0,0,0.1)"; var angle = Math.PI / 18; plotLine(series.datapoints, Math.sin(angle) * (lw / 2 + sw / 2), Math.cos(angle) * (lw / 2 + sw / 2), series.xaxis, series.yaxis); ctx.lineWidth = sw / 2; plotLine(series.datapoints, Math.sin(angle) * (lw / 2 + sw / 4), Math.cos(angle) * (lw / 2 + sw / 4), series.xaxis, series.yaxis) } ctx.lineWidth = lw; ctx.strokeStyle = series.color; var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight); if (fillStyle) { ctx.fillStyle = fillStyle; plotLineArea(series.datapoints, series.xaxis, series.yaxis) } if (lw > 0) plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis); ctx.restore() } function drawSeriesPoints(series) { function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) { var points = datapoints.points, ps = datapoints.pointsize; for (var i = 0; i < points.length; i += ps) { var x = points[i], y = points[i + 1]; if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max) continue; ctx.beginPath(); x = axisx.p2c(x); y = axisy.p2c(y) + offset; if (symbol == "circle") ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false); else symbol(ctx, x, y, radius, shadow); ctx.closePath(); if (fillStyle) { ctx.fillStyle = fillStyle; ctx.fill() } ctx.stroke() } } ctx.save(); ctx.translate(plotOffset.left, plotOffset.top); var lw = series.points.lineWidth, sw = series.shadowSize, radius = series.points.radius, symbol = series.points.symbol; if (lw == 0) lw = 1e-4; if (lw > 0 && sw > 0) { var w = sw / 2; ctx.lineWidth = w; ctx.strokeStyle = "rgba(0,0,0,0.1)"; plotPoints(series.datapoints, radius, null, w + w / 2, true, series.xaxis, series.yaxis, symbol); ctx.strokeStyle = "rgba(0,0,0,0.2)"; plotPoints(series.datapoints, radius, null, w / 2, true, series.xaxis, series.yaxis, symbol) } ctx.lineWidth = lw; ctx.strokeStyle = series.color; plotPoints(series.datapoints, radius, getFillStyle(series.points, series.color), 0, false, series.xaxis, series.yaxis, symbol); ctx.restore() } function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) { var left, right, bottom, top, drawLeft, drawRight, drawTop, drawBottom, tmp; if (horizontal) { drawBottom = drawRight = drawTop = true; drawLeft = false; left = b; right = x; top = y + barLeft; bottom = y + barRight; if (right < left) { tmp = right; right = left; left = tmp; drawLeft = true; drawRight = false } } else { drawLeft = drawRight = drawTop = true; drawBottom = false; left = x + barLeft; right = x + barRight; bottom = b; top = y; if (top < bottom) { tmp = top; top = bottom; bottom = tmp; drawBottom = true; drawTop = false } } if (right < axisx.min || left > axisx.max || top < axisy.min || bottom > axisy.max) return; if (left < axisx.min) { left = axisx.min; drawLeft = false } if (right > axisx.max) { right = axisx.max; drawRight = false } if (bottom < axisy.min) { bottom = axisy.min; drawBottom = false } if (top > axisy.max) { top = axisy.max; drawTop = false } left = axisx.p2c(left); bottom = axisy.p2c(bottom); right = axisx.p2c(right); top = axisy.p2c(top); if (fillStyleCallback) { c.fillStyle = fillStyleCallback(bottom, top); c.fillRect(left, top, right - left, bottom - top) } if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) { c.beginPath(); c.moveTo(left, bottom); if (drawLeft) c.lineTo(left, top); else c.moveTo(left, top); if (drawTop) c.lineTo(right, top); else c.moveTo(right, top); if (drawRight) c.lineTo(right, bottom); else c.moveTo(right, bottom); if (drawBottom) c.lineTo(left, bottom); else c.moveTo(left, bottom); c.stroke() } } function drawSeriesBars(series) { function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) { var points = datapoints.points, ps = datapoints.pointsize; for (var i = 0; i < points.length; i += ps) { if (points[i] == null) continue; drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth) } } ctx.save(); ctx.translate(plotOffset.left, plotOffset.top); ctx.lineWidth = series.bars.lineWidth; ctx.strokeStyle = series.color; var barLeft; switch (series.bars.align) { case "left": barLeft = 0; break; case "right": barLeft = -series.bars.barWidth; break; default: barLeft = -series.bars.barWidth / 2 }var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top) } : null; plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis); ctx.restore() } function getFillStyle(filloptions, seriesColor, bottom, top) { var fill = filloptions.fill; if (!fill) return null; if (filloptions.fillColor) return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor); var c = $.color.parse(seriesColor); c.a = typeof fill == "number" ? fill : .4; c.normalize(); return c.toString() } function insertLegend() { if (options.legend.container != null) { $(options.legend.container).html("") } else { placeholder.find(".legend").remove() } if (!options.legend.show) { return } var fragments = [], entries = [], rowStarted = false, lf = options.legend.labelFormatter, s, label; for (var i = 0; i < series.length; ++i) { s = series[i]; if (s.label) { label = lf ? lf(s.label, s) : s.label; if (label) { entries.push({ label: label, color: s.color }) } } } if (options.legend.sorted) { if ($.isFunction(options.legend.sorted)) { entries.sort(options.legend.sorted) } else if (options.legend.sorted == "reverse") { entries.reverse() } else { var ascending = options.legend.sorted != "descending"; entries.sort(function (a, b) { return a.label == b.label ? 0 : a.label < b.label != ascending ? 1 : -1 }) } } for (var i = 0; i < entries.length; ++i) { var entry = entries[i]; if (i % options.legend.noColumns == 0) { if (rowStarted) fragments.push("</tr>"); fragments.push("<tr>"); rowStarted = true } fragments.push('<td class="legendColorBox"><div style="border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden"></div></div></td>' + '<td class="legendLabel">' + entry.label + "</td>") } if (rowStarted) fragments.push("</tr>"); if (fragments.length == 0) return; var table = '<table style="font-size:smaller;color:' + options.grid.color + '">' + fragments.join("") + "</table>"; if (options.legend.container != null) $(options.legend.container).html(table); else { var pos = "", p = options.legend.position, m = options.legend.margin; if (m[0] == null) m = [m, m]; if (p.charAt(0) == "n") pos += "top:" + (m[1] + plotOffset.top) + "px;"; else if (p.charAt(0) == "s") pos += "bottom:" + (m[1] + plotOffset.bottom) + "px;"; if (p.charAt(1) == "e") pos += "right:" + (m[0] + plotOffset.right) + "px;"; else if (p.charAt(1) == "w") pos += "left:" + (m[0] + plotOffset.left) + "px;"; var legend = $('<div class="legend">' + table.replace('style="', 'style="position:absolute;' + pos + ";") + "</div>").appendTo(placeholder); if (options.legend.backgroundOpacity != 0) { var c = options.legend.backgroundColor; if (c == null) { c = options.grid.backgroundColor; if (c && typeof c == "string") c = $.color.parse(c); else c = $.color.extract(legend, "background-color"); c.a = 1; c = c.toString() } var div = legend.children(); $('<div style="position:absolute;width:' + div.width() + "px;height:" + div.height() + "px;" + pos + "background-color:" + c + ';"> </div>').prependTo(legend).css("opacity", options.legend.backgroundOpacity) } } } var highlights = [], redrawTimeout = null; function findNearbyItem(mouseX, mouseY, seriesFilter) { var maxDistance = options.grid.mouseActiveRadius, smallestDistance = maxDistance * maxDistance + 1, item = null, foundPoint = false, i, j, ps; for (i = series.length - 1; i >= 0; --i) { if (!seriesFilter(series[i])) continue; var s = series[i], axisx = s.xaxis, axisy = s.yaxis, points = s.datapoints.points, mx = axisx.c2p(mouseX), my = axisy.c2p(mouseY), maxx = maxDistance / axisx.scale, maxy = maxDistance / axisy.scale; ps = s.datapoints.pointsize; if (axisx.options.inverseTransform) maxx = Number.MAX_VALUE; if (axisy.options.inverseTransform) maxy = Number.MAX_VALUE; if (s.lines.show || s.points.show) { for (j = 0; j < points.length; j += ps) { var x = points[j], y = points[j + 1]; if (x == null) continue; if (x - mx > maxx || x - mx < -maxx || y - my > maxy || y - my < -maxy) continue; var dx = Math.abs(axisx.p2c(x) - mouseX), dy = Math.abs(axisy.p2c(y) - mouseY), dist = dx * dx + dy * dy; if (dist < smallestDistance) { smallestDistance = dist; item = [i, j / ps] } } } if (s.bars.show && !item) { var barLeft, barRight; switch (s.bars.align) { case "left": barLeft = 0; break; case "right": barLeft = -s.bars.barWidth; break; default: barLeft = -s.bars.barWidth / 2 }barRight = barLeft + s.bars.barWidth; for (j = 0; j < points.length; j += ps) { var x = points[j], y = points[j + 1], b = points[j + 2]; if (x == null) continue; if (series[i].bars.horizontal ? mx <= Math.max(b, x) && mx >= Math.min(b, x) && my >= y + barLeft && my <= y + barRight : mx >= x + barLeft && mx <= x + barRight && my >= Math.min(b, y) && my <= Math.max(b, y)) item = [i, j / ps] } } } if (item) { i = item[0]; j = item[1]; ps = series[i].datapoints.pointsize; return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps), dataIndex: j, series: series[i], seriesIndex: i } } return null } function onMouseMove(e) { if (options.grid.hoverable) triggerClickHoverEvent("plothover", e, function (s) { return s["hoverable"] != false }) } function onMouseLeave(e) { if (options.grid.hoverable) triggerClickHoverEvent("plothover", e, function (s) { return false }) } function onClick(e) { triggerClickHoverEvent("plotclick", e, function (s) { return s["clickable"] != false }) } function triggerClickHoverEvent(eventname, event, seriesFilter) { var offset = eventHolder.offset(), canvasX = event.pageX - offset.left - plotOffset.left, canvasY = event.pageY - offset.top - plotOffset.top, pos = canvasToAxisCoords({ left: canvasX, top: canvasY }); pos.pageX = event.pageX; pos.pageY = event.pageY; var item = findNearbyItem(canvasX, canvasY, seriesFilter); if (item) { item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10); item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10) } if (options.grid.autoHighlight) { for (var i = 0; i < highlights.length; ++i) { var h = highlights[i]; if (h.auto == eventname && !(item && h.series == item.series && h.point[0] == item.datapoint[0] && h.point[1] == item.datapoint[1])) unhighlight(h.series, h.point) } if (item) highlight(item.series, item.datapoint, eventname) } placeholder.trigger(eventname, [pos, item]) } function triggerRedrawOverlay() { var t = options.interaction.redrawOverlayInterval; if (t == -1) { drawOverlay(); return } if (!redrawTimeout) redrawTimeout = setTimeout(drawOverlay, t) } function drawOverlay() { redrawTimeout = null; octx.save(); overlay.clear(); octx.translate(plotOffset.left, plotOffset.top); var i, hi; for (i = 0; i < highlights.length; ++i) { hi = highlights[i]; if (hi.series.bars.show) drawBarHighlight(hi.series, hi.point); else drawPointHighlight(hi.series, hi.point) } octx.restore(); executeHooks(hooks.drawOverlay, [octx]) } function highlight(s, point, auto) { if (typeof s == "number") s = series[s]; if (typeof point == "number") { var ps = s.datapoints.pointsize; point = s.datapoints.points.slice(ps * point, ps * (point + 1)) } var i = indexOfHighlight(s, point); if (i == -1) { highlights.push({ series: s, point: point, auto: auto }); triggerRedrawOverlay() } else if (!auto) highlights[i].auto = false } function unhighlight(s, point) { if (s == null && point == null) { highlights = []; triggerRedrawOverlay(); return } if (typeof s == "number") s = series[s]; if (typeof point == "number") { var ps = s.datapoints.pointsize; point = s.datapoints.points.slice(ps * point, ps * (point + 1)) } var i = indexOfHighlight(s, point); if (i != -1) { highlights.splice(i, 1); triggerRedrawOverlay() } } function indexOfHighlight(s, p) { for (var i = 0; i < highlights.length; ++i) { var h = highlights[i]; if (h.series == s && h.point[0] == p[0] && h.point[1] == p[1]) return i } return -1 } function drawPointHighlight(series, point) { var x = point[0], y = point[1], axisx = series.xaxis, axisy = series.yaxis, highlightColor = typeof series.highlightColor === "string" ? series.highlightColor : $.color.parse(series.color).scale("a", .5).toString(); if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max) return; var pointRadius = series.points.radius + series.points.lineWidth / 2; octx.lineWidth = pointRadius; octx.strokeStyle = highlightColor; var radius = 1.5 * pointRadius; x = axisx.p2c(x); y = axisy.p2c(y); octx.beginPath(); if (series.points.symbol == "circle") octx.arc(x, y, radius, 0, 2 * Math.PI, false); else series.points.symbol(octx, x, y, radius, false); octx.closePath(); octx.stroke() } function drawBarHighlight(series, point) { var highlightColor = typeof series.highlightColor === "string" ? series.highlightColor : $.color.parse(series.color).scale("a", .5).toString(), fillStyle = highlightColor, barLeft; switch (series.bars.align) { case "left": barLeft = 0; break; case "right": barLeft = -series.bars.barWidth; break; default: barLeft = -series.bars.barWidth / 2 }octx.lineWidth = series.bars.lineWidth; octx.strokeStyle = highlightColor; drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth, function () { return fillStyle }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth) } function getColorOrGradient(spec, bottom, top, defaultColor) { if (typeof spec == "string") return spec; else { var gradient = ctx.createLinearGradient(0, top, 0, bottom); for (var i = 0, l = spec.colors.length; i < l; ++i) { var c = spec.colors[i]; if (typeof c != "string") { var co = $.color.parse(defaultColor); if (c.brightness != null) co = co.scale("rgb", c.brightness); if (c.opacity != null) co.a *= c.opacity; c = co.toString() } gradient.addColorStop(i / (l - 1), c) } return gradient } } } $.plot = function (placeholder, data, options) { var plot = new Plot($(placeholder), data, options, $.plot.plugins); return plot }; $.plot.version = "0.8.3"; $.plot.plugins = []; $.fn.plot = function (data, options) { return this.each(function () { $.plot(this, data, options) }) }; function floorInBase(n, base) { return base * Math.floor(n / base) } })(jQuery);; (function ($, e, t) { "$:nomunge"; var i = [], n = $.resize = $.extend($.resize, {}), a, r = false, s = "setTimeout", u = "resize", m = u + "-special-event", o = "pendingDelay", l = "activeDelay", f = "throttleWindow"; n[o] = 200; n[l] = 20; n[f] = true; $.event.special[u] = { setup: function () { if (!n[f] && this[s]) { return false } var e = $(this); i.push(this); e.data(m, { w: e.width(), h: e.height() }); if (i.length === 1) { a = t; h() } }, teardown: function () { if (!n[f] && this[s]) { return false } var e = $(this); for (var t = i.length - 1; t >= 0; t--) { if (i[t] == this) { i.splice(t, 1); break } } e.removeData(m); if (!i.length) { if (r) { cancelAnimationFrame(a) } else { clearTimeout(a) } a = null } }, add: function (e) { if (!n[f] && this[s]) { return false } var i; function a(e, n, a) { var r = $(this), s = r.data(m) || {}; s.w = n !== t ? n : r.width(); s.h = a !== t ? a : r.height(); i.apply(this, arguments) } if ($.isFunction(e)) { i = e; return a } else { i = e.handler; e.handler = a } } }; function h(t) { if (r === true) { r = t || 1 } for (var s = i.length - 1; s >= 0; s--) { var l = $(i[s]); if (l[0] == e || l.is(":visible")) { var f = l.width(), c = l.height(), d = l.data(m); if (d && (f !== d.w || c !== d.h)) { l.trigger(u, [d.w = f, d.h = c]); r = t || true } } else { d = l.data(m); d.w = 0; d.h = 0 } } if (a !== null) { if (r && (t == null || t - r < 1e3)) { a = e.requestAnimationFrame(h) } else { a = setTimeout(h, n[o]); r = false } } } if (!e.requestAnimationFrame) { e.requestAnimationFrame = function () { return e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (t, i) { return e.setTimeout(function () { t((new Date).getTime()) }, n[l]) } }() } if (!e.cancelAnimationFrame) { e.cancelAnimationFrame = function () { return e.webkitCancelRequestAnimationFrame || e.mozCancelRequestAnimationFrame || e.oCancelRequestAnimationFrame || e.msCancelRequestAnimationFrame || clearTimeout }() } })(jQuery, this); (function ($) { var options = {}; function init(plot) { function onResize() { var placeholder = plot.getPlaceholder(); if (placeholder.width() == 0 || placeholder.height() == 0) return; plot.resize(); plot.setupGrid(); plot.draw() } function bindEvents(plot, eventHolder) { plot.getPlaceholder().resize(onResize) } function shutdown(plot, eventHolder) { plot.getPlaceholder().unbind("resize", onResize) } plot.hooks.bindEvents.push(bindEvents); plot.hooks.shutdown.push(shutdown) } $.plot.plugins.push({ init: init, options: options, name: "resize", version: "1.0" }) })(jQuery);; (function ($) { var options = { xaxis: { categories: null }, yaxis: { categories: null } }; function processRawData(plot, series, data, datapoints) { var xCategories = series.xaxis.options.mode == "categories", yCategories = series.yaxis.options.mode == "categories"; if (!(xCategories || yCategories)) return; var format = datapoints.format; if (!format) { var s = series; format = []; format.push({ x: true, number: true, required: true }); format.push({ y: true, number: true, required: true }); if (s.bars.show || s.lines.show && s.lines.fill) { var autoscale = !!(s.bars.show && s.bars.zero || s.lines.show && s.lines.zero); format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale }); if (s.bars.horizontal) { delete format[format.length - 1].y; format[format.length - 1].x = true } } datapoints.format = format } for (var m = 0; m < format.length; ++m) { if (format[m].x && xCategories) format[m].number = false; if (format[m].y && yCategories) format[m].number = false } } function getNextIndex(categories) { var index = -1; for (var v in categories) if (categories[v] > index) index = categories[v]; return index + 1 } function categoriesTickGenerator(axis) { var res = []; for (var label in axis.categories) { var v = axis.categories[label]; if (v >= axis.min && v <= axis.max) res.push([v, label]) } res.sort(function (a, b) { return a[0] - b[0] }); return res } function setupCategoriesForAxis(series, axis, datapoints) { if (series[axis].options.mode != "categories") return; if (!series[axis].categories) { var c = {}, o = series[axis].options.categories || {}; if ($.isArray(o)) { for (var i = 0; i < o.length; ++i)c[o[i]] = i } else { for (var v in o) c[v] = o[v] } series[axis].categories = c } if (!series[axis].options.ticks) series[axis].options.ticks = categoriesTickGenerator; transformPointsOnAxis(datapoints, axis, series[axis].categories) } function transformPointsOnAxis(datapoints, axis, categories) { var points = datapoints.points, ps = datapoints.pointsize, format = datapoints.format, formatColumn = axis.charAt(0), index = getNextIndex(categories); for (var i = 0; i < points.length; i += ps) { if (points[i] == null) continue; for (var m = 0; m < ps; ++m) { var val = points[i + m]; if (val == null || !format[m][formatColumn]) continue; if (!(val in categories)) { categories[val] = index; ++index } points[i + m] = categories[val] } } } function processDatapoints(plot, series, datapoints) { setupCategoriesForAxis(series, "xaxis", datapoints); setupCategoriesForAxis(series, "yaxis", datapoints) } function init(plot) { plot.hooks.processRawData.push(processRawData); plot.hooks.processDatapoints.push(processDatapoints) } $.plot.plugins.push({ init: init, options: options, name: "categories", version: "1.0" }) })(jQuery);; (function ($) { var REDRAW_ATTEMPTS = 10; var REDRAW_SHRINK = .95; function init(plot) { var canvas = null, target = null, options = null, maxRadius = null, centerLeft = null, centerTop = null, processed = false, ctx = null; var highlights = []; plot.hooks.processOptions.push(function (plot, options) { if (options.series.pie.show) { options.grid.show = false; if (options.series.pie.label.show == "auto") { if (options.legend.show) { options.series.pie.label.show = false } else { options.series.pie.label.show = true } } if (options.series.pie.radius == "auto") { if (options.series.pie.label.show) { options.series.pie.radius = 3 / 4 } else { options.series.pie.radius = 1 } } if (options.series.pie.tilt > 1) { options.series.pie.tilt = 1 } else if (options.series.pie.tilt < 0) { options.series.pie.tilt = 0 } } }); plot.hooks.bindEvents.push(function (plot, eventHolder) { var options = plot.getOptions(); if (options.series.pie.show) { if (options.grid.hoverable) { eventHolder.unbind("mousemove").mousemove(onMouseMove) } if (options.grid.clickable) { eventHolder.unbind("click").click(onClick) } } }); plot.hooks.processDatapoints.push(function (plot, series, data, datapoints) { var options = plot.getOptions(); if (options.series.pie.show) { processDatapoints(plot, series, data, datapoints) } }); plot.hooks.drawOverlay.push(function (plot, octx) { var options = plot.getOptions(); if (options.series.pie.show) { drawOverlay(plot, octx) } }); plot.hooks.draw.push(function (plot, newCtx) { var options = plot.getOptions(); if (options.series.pie.show) { draw(plot, newCtx) } }); function processDatapoints(plot, series, datapoints) { if (!processed) { processed = true; canvas = plot.getCanvas(); target = $(canvas).parent(); options = plot.getOptions(); plot.setData(combine(plot.getData())) } } function combine(data) { var total = 0, combined = 0, numCombined = 0, color = options.series.pie.combine.color, newdata = []; for (var i = 0; i < data.length; ++i) { var value = data[i].data; if ($.isArray(value) && value.length == 1) { value = value[0] } if ($.isArray(value)) { if (!isNaN(parseFloat(value[1])) && isFinite(value[1])) { value[1] = +value[1] } else { value[1] = 0 } } else if (!isNaN(parseFloat(value)) && isFinite(value)) { value = [1, +value] } else { value = [1, 0] } data[i].data = [value] } for (var i = 0; i < data.length; ++i) { total += data[i].data[0][1] } for (var i = 0; i < data.length; ++i) { var value = data[i].data[0][1]; if (value / total <= options.series.pie.combine.threshold) { combined += value; numCombined++; if (!color) { color = data[i].color } } } for (var i = 0; i < data.length; ++i) { var value = data[i].data[0][1]; if (numCombined < 2 || value / total > options.series.pie.combine.threshold) { newdata.push($.extend(data[i], { data: [[1, value]], color: data[i].color, label: data[i].label, angle: value * Math.PI * 2 / total, percent: value / (total / 100) })) } } if (numCombined > 1) { newdata.push({ data: [[1, combined]], color: color, label: options.series.pie.combine.label, angle: combined * Math.PI * 2 / total, percent: combined / (total / 100) }) } return newdata } function draw(plot, newCtx) { if (!target) { return } var canvasWidth = plot.getPlaceholder().width(), canvasHeight = plot.getPlaceholder().height(), legendWidth = target.children().filter(".legend").children().width() || 0; ctx = newCtx; processed = false; maxRadius = Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2; centerTop = canvasHeight / 2 + options.series.pie.offset.top; centerLeft = canvasWidth / 2; if (options.series.pie.offset.left == "auto") { if (options.legend.position.match("w")) { centerLeft += legendWidth / 2 } else { centerLeft -= legendWidth / 2 } if (centerLeft < maxRadius) { centerLeft = maxRadius } else if (centerLeft > canvasWidth - maxRadius) { centerLeft = canvasWidth - maxRadius } } else { centerLeft += options.series.pie.offset.left } var slices = plot.getData(), attempts = 0; do { if (attempts > 0) { maxRadius *= REDRAW_SHRINK } attempts += 1; clear(); if (options.series.pie.tilt <= .8) { drawShadow() } } while (!drawPie() && attempts < REDRAW_ATTEMPTS); if (attempts >= REDRAW_ATTEMPTS) { clear(); target.prepend("<div class='error'>Could not draw pie with labels contained inside canvas</div>") } if (plot.setSeries && plot.insertLegend) { plot.setSeries(slices); plot.insertLegend() } function clear() { ctx.clearRect(0, 0, canvasWidth, canvasHeight); target.children().filter(".pieLabel, .pieLabelBackground").remove() } function drawShadow() { var shadowLeft = options.series.pie.shadow.left; var shadowTop = options.series.pie.shadow.top; var edge = 10; var alpha = options.series.pie.shadow.alpha; var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius; if (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) { return } ctx.save(); ctx.translate(shadowLeft, shadowTop); ctx.globalAlpha = alpha; ctx.fillStyle = "#000"; ctx.translate(centerLeft, centerTop); ctx.scale(1, options.series.pie.tilt); for (var i = 1; i <= edge; i++) { ctx.beginPath(); ctx.arc(0, 0, radius, 0, Math.PI * 2, false); ctx.fill(); radius -= i } ctx.restore() } function drawPie() { var startAngle = Math.PI * options.series.pie.startAngle; var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius; ctx.save(); ctx.translate(centerLeft, centerTop); ctx.scale(1, options.series.pie.tilt); ctx.save(); var currentAngle = startAngle; for (var i = 0; i < slices.length; ++i) { slices[i].startAngle = currentAngle; drawSlice(slices[i].angle, slices[i].color, true) } ctx.restore(); if (options.series.pie.stroke.width > 0) { ctx.save(); ctx.lineWidth = options.series.pie.stroke.width; currentAngle = startAngle; for (var i = 0; i < slices.length; ++i) { drawSlice(slices[i].angle, options.series.pie.stroke.color, false) } ctx.restore() } drawDonutHole(ctx); ctx.restore(); if (options.series.pie.label.show) { return drawLabels() } else return true; function drawSlice(angle, color, fill) { if (angle <= 0 || isNaN(angle)) { return } if (fill) { ctx.fillStyle = color } else { ctx.strokeStyle = color; ctx.lineJoin = "round" } ctx.beginPath(); if (Math.abs(angle - Math.PI * 2) > 1e-9) { ctx.moveTo(0, 0) } ctx.arc(0, 0, radius, currentAngle, currentAngle + angle / 2, false); ctx.arc(0, 0, radius, currentAngle + angle / 2, currentAngle + angle, false); ctx.closePath(); currentAngle += angle; if (fill) { ctx.fill() } else { ctx.stroke() } } function drawLabels() { var currentAngle = startAngle; var radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius; for (var i = 0; i < slices.length; ++i) { if (slices[i].percent >= options.series.pie.label.threshold * 100) { if (!drawLabel(slices[i], currentAngle, i)) { return false } } currentAngle += slices[i].angle } return true; function drawLabel(slice, startAngle, index) { if (slice.data[0][1] == 0) { return true } var lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter; if (lf) { text = lf(slice.label, slice) } else { text = slice.label } if (plf) { text = plf(text, slice) } var halfAngle = (startAngle + slice.angle + startAngle) / 2; var x = centerLeft + Math.round(Math.cos(halfAngle) * radius); var y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt; var html = "<span class='pieLabel' id='pieLabel" + index + "' style='position:absolute;top:" + y + "px;left:" + x + "px;'>" + text + "</span>"; target.append(html); var label = target.children("#pieLabel" + index); var labelTop = y - label.height() / 2; var labelLeft = x - label.width() / 2; label.css("top", labelTop); label.css("left", labelLeft); if (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) { return false } if (options.series.pie.label.background.opacity != 0) { var c = options.series.pie.label.background.color; if (c == null) { c = slice.color } var pos = "top:" + labelTop + "px;left:" + labelLeft + "px;"; $("<div class='pieLabelBackground' style='position:absolute;width:" + label.width() + "px;height:" + label.height() + "px;" + pos + "background-color:" + c + ";'></div>").css("opacity", options.series.pie.label.background.opacity).insertBefore(label) } return true } } } } function drawDonutHole(layer) { if (options.series.pie.innerRadius > 0) { layer.save(); var innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius; layer.globalCompositeOperation = "destination-out"; layer.beginPath(); layer.fillStyle = options.series.pie.stroke.color; layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false); layer.fill(); layer.closePath(); layer.restore(); layer.save(); layer.beginPath(); layer.strokeStyle = options.series.pie.stroke.color; layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false); layer.stroke(); layer.closePath(); layer.restore() } } function isPointInPoly(poly, pt) { for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)(poly[i][1] <= pt[1] && pt[1] < poly[j][1] || poly[j][1] <= pt[1] && pt[1] < poly[i][1]) && pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0] && (c = !c); return c } function findNearbySlice(mouseX, mouseY) { var slices = plot.getData(), options = plot.getOptions(), radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius, x, y; for (var i = 0; i < slices.length; ++i) { var s = slices[i]; if (s.pie.show) { ctx.save(); ctx.beginPath(); ctx.moveTo(0, 0); ctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false); ctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false); ctx.closePath(); x = mouseX - centerLeft; y = mouseY - centerTop; if (ctx.isPointInPath) { if (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) { ctx.restore(); return { datapoint: [s.percent, s.data], dataIndex: 0, series: s, seriesIndex: i } } } else { var p1X = radius * Math.cos(s.startAngle), p1Y = radius * Math.sin(s.startAngle), p2X = radius * Math.cos(s.startAngle + s.angle / 4), p2Y = radius * Math.sin(s.startAngle + s.angle / 4), p3X = radius * Math.cos(s.startAngle + s.angle / 2), p3Y = radius * Math.sin(s.startAngle + s.angle / 2), p4X = radius * Math.cos(s.startAngle + s.angle / 1.5), p4Y = radius * Math.sin(s.startAngle + s.angle / 1.5), p5X = radius * Math.cos(s.startAngle + s.angle), p5Y = radius * Math.sin(s.startAngle + s.angle), arrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]], arrPoint = [x, y]; if (isPointInPoly(arrPoly, arrPoint)) { ctx.restore(); return { datapoint: [s.percent, s.data], dataIndex: 0, series: s, seriesIndex: i } } } ctx.restore() } } return null } function onMouseMove(e) { triggerClickHoverEvent("plothover", e) } function onClick(e) { triggerClickHoverEvent("plotclick", e) } function triggerClickHoverEvent(eventname, e) { var offset = plot.offset(); var canvasX = parseInt(e.pageX - offset.left); var canvasY = parseInt(e.pageY - offset.top); var item = findNearbySlice(canvasX, canvasY); if (options.grid.autoHighlight) { for (var i = 0; i < highlights.length; ++i) { var h = highlights[i]; if (h.auto == eventname && !(item && h.series == item.series)) { unhighlight(h.series) } } } if (item) { highlight(item.series, eventname) } var pos = { pageX: e.pageX, pageY: e.pageY }; target.trigger(eventname, [pos, item]) } function highlight(s, auto) { var i = indexOfHighlight(s); if (i == -1) { highlights.push({ series: s, auto: auto }); plot.triggerRedrawOverlay() } else if (!auto) { highlights[i].auto = false } } function unhighlight(s) { if (s == null) { highlights = []; plot.triggerRedrawOverlay() } var i = indexOfHighlight(s); if (i != -1) { highlights.splice(i, 1); plot.triggerRedrawOverlay() } } function indexOfHighlight(s) { for (var i = 0; i < highlights.length; ++i) { var h = highlights[i]; if (h.series == s) return i } return -1 } function drawOverlay(plot, octx) { var options = plot.getOptions(); var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius; octx.save(); octx.translate(centerLeft, centerTop); octx.scale(1, options.series.pie.tilt); for (var i = 0; i < highlights.length; ++i) { drawHighlight(highlights[i].series) } drawDonutHole(octx); octx.restore(); function drawHighlight(series) { if (series.angle <= 0 || isNaN(series.angle)) { return } octx.fillStyle = "rgba(255, 255, 255, " + options.series.pie.highlight.opacity + ")"; octx.beginPath(); if (Math.abs(series.angle - Math.PI * 2) > 1e-9) { octx.moveTo(0, 0) } octx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false); octx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false); octx.closePath(); octx.fill() } } } var options = { series: { pie: { show: false, radius: "auto", innerRadius: 0, startAngle: 3 / 2, tilt: 1, shadow: { left: 5, top: 15, alpha: .02 }, offset: { top: 0, left: "auto" }, stroke: { color: "#fff", width: 1 }, label: { show: "auto", formatter: function (label, slice) { return "<div style='font-size:x-small;text-align:center;padding:2px;color:" + slice.color + ";'>" + label + "<br/>" + Math.round(slice.percent) + "%</div>" }, radius: 1, background: { color: null, opacity: 0 }, threshold: 0 }, combine: { threshold: -1, color: null, label: "Other" }, highlight: { opacity: .5 } } } }; $.plot.plugins.push({ init: init, options: options, name: "pie", version: "1.1" }) })(jQuery);; $(document).ready(function () {
    $('.data-table').dataTable({ "bJQueryUI": true, "sPaginationType": "full_numbers", "sDom": '<""l>t<"F"fp>', "aaSorting": [] }); $("span.icon input:checkbox, th input:checkbox").click(function () {
        var checkedStatus = this.checked; var checkbox = $(this).parents('.widget-box').find('tr td:first-child input:checkbox'); checkbox.each(function () {
            this.checked = checkedStatus; if (checkedStatus == this.checked) { $(this).closest('.checker > span').removeClass('checked'); }
            if (this.checked) { $(this).closest('.checker > span').addClass('checked'); }
        });
    });
});; function getCookie(name) {
    var cookieValue = null; if (document.cookie && document.cookie !== '') { var cookies = document.cookie.split(';'); for (var i = 0; i < cookies.length; i++) { var cookie = jQuery.trim(cookies[i]); if (cookie.substring(0, name.length + 1) === (name + '=')) { cookieValue = decodeURIComponent(cookie.substring(name.length + 1)); break; } } }
    return cookieValue;
}
var csrftoken = getCookie('csrftoken'); function csrfSafeMethod(method) { return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method)); }
$(document).ready(function () {
    $('.submenu > a').click(function (e) {
        e.preventDefault(); var submenu = $(this).siblings('ul'); var li = $(this).parents('li'); var submenus = $('#sidebar li.submenu ul'); var submenus_parents = $('#sidebar li.submenu'); if (li.hasClass('open')) {
            if (($(window).width() > 768) || ($(window).width() < 479)) { submenu.slideUp(); } else { submenu.fadeOut(250); }
            li.removeClass('open');
        } else {
            if (($(window).width() > 768) || ($(window).width() < 479)) { submenus.slideUp(); submenu.slideDown(); } else { submenus.fadeOut(250); submenu.fadeIn(250); }
            submenus_parents.removeClass('open'); li.addClass('open');
        }
    }); var ul = $('#sidebar > ul'); $('#sidebar > a').click(function (e) {
        e.preventDefault(); var sidebar = $('#sidebar'); if (sidebar.hasClass('open')) { sidebar.removeClass('open'); ul.slideUp(250); } else { sidebar.addClass('open'); ul.slideDown(250); }
    }); $(window).resize(function () {
        if ($(window).width() > 479) { ul.css({ 'display': 'block' }); $('#content-header .btn-group').css({ width: 'auto' }); }
        if ($(window).width() < 479) { ul.css({ 'display': 'none' }); fix_position(); }
        if ($(window).width() > 768) { $('#user-nav > ul').css({ width: 'auto', margin: '0' }); $('#content-header .btn-group').css({ width: 'auto' }); }
    }); if ($(window).width() < 468) { ul.css({ 'display': 'none' }); fix_position(); }
    if ($(window).width() > 479) { $('#content-header .btn-group').css({ width: 'auto' }); ul.css({ 'display': 'block' }); }
    $('.tip').tooltip(); $('.tip-left').tooltip({ placement: 'left' }); $('.tip-right').tooltip({ placement: 'right' }); $('.tip-top').tooltip({ placement: 'top' }); $('.tip-bottom').tooltip({ placement: 'bottom' }); function fix_position() { var uwidth = $('#user-nav > ul').width(); $('#user-nav > ul').css({ width: uwidth, 'margin-left': '-' + uwidth / 2 + 'px' }); var cwidth = $('#content-header .btn-group').width(); $('#content-header .btn-group').css({ width: cwidth, 'margin-left': '-' + uwidth / 2 + 'px' }); }
    $.ajaxSetup({ beforeSend: function (xhr, settings) { if (!csrfSafeMethod(settings.type) && !this.crossDomain) { xhr.setRequestHeader("X-CSRFToken", csrftoken); } } });
});; (function ($) {
    var Notification = function (element, options) {
        this.$element = $(element); this.$note = $('<div class="alert"></div>'); this.options = $.extend(true, {}, $.fn.notify.defaults, options); this._link = null; if (this.options.transition)
            if (this.options.transition === 'fade')
                this.$note.addClass('in').addClass(this.options.transition); else this.$note.addClass(this.options.transition); else this.$note.addClass('fade').addClass('in'); if (this.options.type)
            this.$note.addClass('alert-' + this.options.type); else this.$note.addClass('alert-success'); if (this.options.message)
            if (typeof this.options.message === 'string')
                this.$note.html(this.options.message); else if (typeof this.options.message === 'object')
                if (this.options.message.html)
                    this.$note.html(this.options.message.html); else if (this.options.message.text)
                    this.$note.text(this.options.message.text); if (this.options.closable)
            this._link = $('<a class="close pull-right">&times;</a>'), $(this._link).on('click', $.proxy(Notification.onClose, this)), this.$note.prepend(this._link); return this;
    }; Notification.onClose = function () { this.options.onClose(); $(this.$note).remove(); this.options.onClosed(); }; Notification.prototype.show = function () {
        if (this.options.fadeOut.enabled)
            this.$note.delay(this.options.fadeOut.delay || 3000).fadeOut('slow', $.proxy(Notification.onClose, this)); this.$element.append(this.$note); this.$note.alert();
    }; Notification.prototype.hide = function () {
        if (this.options.fadeOut.enabled)
            this.$note.delay(this.options.fadeOut.delay || 3000).fadeOut('slow', $.proxy(Notification.onClose, this)); else Notification.onClose.call(this);
    }; $.fn.notify = function (options) { return new Notification(this, options); }; $.fn.notify.defaults = { type: 'success', closable: true, transition: 'fade', fadeOut: { enabled: true, delay: 3000 }, message: null, onClose: function () { }, onClosed: function () { } }
})(window.jQuery);;/*!
 * Datepicker for Bootstrap v1.7.1 (https://github.com/uxsolutions/bootstrap-datepicker)
 *
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */(function (factory) { if (typeof define === "function" && define.amd) { define(["jquery"], factory); } else if (typeof exports === 'object') { factory(require('jquery')); } else { factory(jQuery); } }(function ($, undefined) {
    function UTCDate() { return new Date(Date.UTC.apply(Date, arguments)); }
    function UTCToday() { var today = new Date(); return UTCDate(today.getFullYear(), today.getMonth(), today.getDate()); }
    function isUTCEquals(date1, date2) { return (date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate()); }
    function alias(method, deprecationMsg) {
        return function () {
            if (deprecationMsg !== undefined) { $.fn.datepicker.deprecated(deprecationMsg); }
            return this[method].apply(this, arguments);
        };
    }
    function isValidDate(d) { return d && !isNaN(d.getTime()); }
    var DateArray = (function () {
        var extras = {
            get: function (i) { return this.slice(i)[0]; }, contains: function (d) {
                var val = d && d.valueOf(); for (var i = 0, l = this.length; i < l; i++)
                    if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1000 * 60 * 60 * 24)
                        return i; return -1;
            }, remove: function (i) { this.splice(i, 1); }, replace: function (new_array) {
                if (!new_array)
                    return; if (!$.isArray(new_array))
                    new_array = [new_array]; this.clear(); this.push.apply(this, new_array);
            }, clear: function () { this.length = 0; }, copy: function () { var a = new DateArray(); a.replace(this); return a; }
        }; return function () { var a = []; a.push.apply(a, arguments); $.extend(a, extras); return a; };
    })(); var Datepicker = function (element, options) {
        $.data(element, 'datepicker', this); this._process_options(options); this.dates = new DateArray(); this.viewDate = this.o.defaultViewDate; this.focusDate = null; this.element = $(element); this.isInput = this.element.is('input'); this.inputField = this.isInput ? this.element : this.element.find('input'); this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .btn') : false; if (this.component && this.component.length === 0)
            this.component = false; this.isInline = !this.component && this.element.is('div'); this.picker = $(DPGlobal.template); if (this._check_template(this.o.templates.leftArrow)) { this.picker.find('.prev').html(this.o.templates.leftArrow); }
        if (this._check_template(this.o.templates.rightArrow)) { this.picker.find('.next').html(this.o.templates.rightArrow); }
        this._buildEvents(); this._attachEvents(); if (this.isInline) { this.picker.addClass('datepicker-inline').appendTo(this.element); }
        else { this.picker.addClass('datepicker-dropdown dropdown-menu'); }
        if (this.o.rtl) { this.picker.addClass('datepicker-rtl'); }
        if (this.o.calendarWeeks) { this.picker.find('.datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear').attr('colspan', function (i, val) { return Number(val) + 1; }); }
        this._process_options({ startDate: this._o.startDate, endDate: this._o.endDate, daysOfWeekDisabled: this.o.daysOfWeekDisabled, daysOfWeekHighlighted: this.o.daysOfWeekHighlighted, datesDisabled: this.o.datesDisabled }); this._allow_update = false; this.setViewMode(this.o.startView); this._allow_update = true; this.fillDow(); this.fillMonths(); this.update(); if (this.isInline) { this.show(); }
    }; Datepicker.prototype = {
        constructor: Datepicker, _resolveViewName: function (view) { $.each(DPGlobal.viewModes, function (i, viewMode) { if (view === i || $.inArray(view, viewMode.names) !== -1) { view = i; return false; } }); return view; }, _resolveDaysOfWeek: function (daysOfWeek) {
            if (!$.isArray(daysOfWeek))
                daysOfWeek = daysOfWeek.split(/[,\s]*/); return $.map(daysOfWeek, Number);
        }, _check_template: function (tmp) {
            try {
                if (tmp === undefined || tmp === "") { return false; }
                if ((tmp.match(/[<>]/g) || []).length <= 0) { return true; }
                var jDom = $(tmp); return jDom.length > 0;
            }
            catch (ex) { return false; }
        }, _process_options: function (opts) {
            this._o = $.extend({}, this._o, opts); var o = this.o = $.extend({}, this._o); var lang = o.language; if (!dates[lang]) {
                lang = lang.split('-')[0]; if (!dates[lang])
                    lang = defaults.language;
            }
            o.language = lang; o.startView = this._resolveViewName(o.startView); o.minViewMode = this._resolveViewName(o.minViewMode); o.maxViewMode = this._resolveViewName(o.maxViewMode); o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView)); if (o.multidate !== true) {
                o.multidate = Number(o.multidate) || false; if (o.multidate !== false)
                    o.multidate = Math.max(0, o.multidate);
            }
            o.multidateSeparator = String(o.multidateSeparator); o.weekStart %= 7; o.weekEnd = (o.weekStart + 6) % 7; var format = DPGlobal.parseFormat(o.format); if (o.startDate !== -Infinity) {
                if (!!o.startDate) {
                    if (o.startDate instanceof Date)
                        o.startDate = this._local_to_utc(this._zero_time(o.startDate)); else
                        o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
                }
                else { o.startDate = -Infinity; }
            }
            if (o.endDate !== Infinity) {
                if (!!o.endDate) {
                    if (o.endDate instanceof Date)
                        o.endDate = this._local_to_utc(this._zero_time(o.endDate)); else
                        o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
                }
                else { o.endDate = Infinity; }
            }
            o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled || []); o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted || []); o.datesDisabled = o.datesDisabled || []; if (!$.isArray(o.datesDisabled)) { o.datesDisabled = o.datesDisabled.split(','); }
            o.datesDisabled = $.map(o.datesDisabled, function (d) { return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear); }); var plc = String(o.orientation).toLowerCase().split(/\s+/g), _plc = o.orientation.toLowerCase(); plc = $.grep(plc, function (word) { return /^auto|left|right|top|bottom$/.test(word); }); o.orientation = { x: 'auto', y: 'auto' }; if (!_plc || _plc === 'auto'); else if (plc.length === 1) { switch (plc[0]) { case 'top': case 'bottom': o.orientation.y = plc[0]; break; case 'left': case 'right': o.orientation.x = plc[0]; break; } }
            else { _plc = $.grep(plc, function (word) { return /^left|right$/.test(word); }); o.orientation.x = _plc[0] || 'auto'; _plc = $.grep(plc, function (word) { return /^top|bottom$/.test(word); }); o.orientation.y = _plc[0] || 'auto'; }
            if (o.defaultViewDate instanceof Date || typeof o.defaultViewDate === 'string') { o.defaultViewDate = DPGlobal.parseDate(o.defaultViewDate, format, o.language, o.assumeNearbyYear); } else if (o.defaultViewDate) { var year = o.defaultViewDate.year || new Date().getFullYear(); var month = o.defaultViewDate.month || 0; var day = o.defaultViewDate.day || 1; o.defaultViewDate = UTCDate(year, month, day); } else { o.defaultViewDate = UTCToday(); }
        }, _events: [], _secondaryEvents: [], _applyEvents: function (evs) {
            for (var i = 0, el, ch, ev; i < evs.length; i++) {
                el = evs[i][0]; if (evs[i].length === 2) { ch = undefined; ev = evs[i][1]; } else if (evs[i].length === 3) { ch = evs[i][1]; ev = evs[i][2]; }
                el.on(ev, ch);
            }
        }, _unapplyEvents: function (evs) {
            for (var i = 0, el, ev, ch; i < evs.length; i++) {
                el = evs[i][0]; if (evs[i].length === 2) { ch = undefined; ev = evs[i][1]; } else if (evs[i].length === 3) { ch = evs[i][1]; ev = evs[i][2]; }
                el.off(ev, ch);
            }
        }, _buildEvents: function () {
            var events = {
                keyup: $.proxy(function (e) {
                    if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1)
                        this.update();
                }, this), keydown: $.proxy(this.keydown, this), paste: $.proxy(this.paste, this)
            }; if (this.o.showOnFocus === true) { events.focus = $.proxy(this.show, this); }
            if (this.isInput) { this._events = [[this.element, events]]; }
            else if (this.component && this.inputField.length) { this._events = [[this.inputField, events], [this.component, { click: $.proxy(this.show, this) }]]; }
            else { this._events = [[this.element, { click: $.proxy(this.show, this), keydown: $.proxy(this.keydown, this) }]]; }
            this._events.push([this.element, '*', { blur: $.proxy(function (e) { this._focused_from = e.target; }, this) }], [this.element, { blur: $.proxy(function (e) { this._focused_from = e.target; }, this) }]); if (this.o.immediateUpdates) { this._events.push([this.element, { 'changeYear changeMonth': $.proxy(function (e) { this.update(e.date); }, this) }]); }
            this._secondaryEvents = [[this.picker, { click: $.proxy(this.click, this) }], [this.picker, '.prev, .next', { click: $.proxy(this.navArrowsClick, this) }], [this.picker, '.day:not(.disabled)', { click: $.proxy(this.dayCellClick, this) }], [$(window), { resize: $.proxy(this.place, this) }], [$(document), { 'mousedown touchstart': $.proxy(function (e) { if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline)) { this.hide(); } }, this) }]];
        }, _attachEvents: function () { this._detachEvents(); this._applyEvents(this._events); }, _detachEvents: function () { this._unapplyEvents(this._events); }, _attachSecondaryEvents: function () { this._detachSecondaryEvents(); this._applyEvents(this._secondaryEvents); }, _detachSecondaryEvents: function () { this._unapplyEvents(this._secondaryEvents); }, _trigger: function (event, altdate) {
            var date = altdate || this.dates.get(-1), local_date = this._utc_to_local(date); this.element.trigger({
                type: event, date: local_date, viewMode: this.viewMode, dates: $.map(this.dates, this._utc_to_local), format: $.proxy(function (ix, format) {
                    if (arguments.length === 0) { ix = this.dates.length - 1; format = this.o.format; } else if (typeof ix === 'string') { format = ix; ix = this.dates.length - 1; }
                    format = format || this.o.format; var date = this.dates.get(ix); return DPGlobal.formatDate(date, format, this.o.language);
                }, this)
            });
        }, show: function () {
            if (this.inputField.prop('disabled') || (this.inputField.prop('readonly') && this.o.enableOnReadonly === false))
                return; if (!this.isInline)
                this.picker.appendTo(this.o.container); this.place(); this.picker.show(); this._attachSecondaryEvents(); this._trigger('show'); if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) { $(this.element).blur(); }
            return this;
        }, hide: function () {
            if (this.isInline || !this.picker.is(':visible'))
                return this; this.focusDate = null; this.picker.hide().detach(); this._detachSecondaryEvents(); this.setViewMode(this.o.startView); if (this.o.forceParse && this.inputField.val())
                this.setValue(); this._trigger('hide'); return this;
        }, destroy: function () {
            this.hide(); this._detachEvents(); this._detachSecondaryEvents(); this.picker.remove(); delete this.element.data().datepicker; if (!this.isInput) { delete this.element.data().date; }
            return this;
        }, paste: function (e) {
            var dateString; if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types && $.inArray('text/plain', e.originalEvent.clipboardData.types) !== -1) { dateString = e.originalEvent.clipboardData.getData('text/plain'); } else if (window.clipboardData) { dateString = window.clipboardData.getData('Text'); } else { return; }
            this.setDate(dateString); this.update(); e.preventDefault();
        }, _utc_to_local: function (utc) {
            if (!utc) { return utc; }
            var local = new Date(utc.getTime() + (utc.getTimezoneOffset() * 60000)); if (local.getTimezoneOffset() !== utc.getTimezoneOffset()) { local = new Date(utc.getTime() + (local.getTimezoneOffset() * 60000)); }
            return local;
        }, _local_to_utc: function (local) { return local && new Date(local.getTime() - (local.getTimezoneOffset() * 60000)); }, _zero_time: function (local) { return local && new Date(local.getFullYear(), local.getMonth(), local.getDate()); }, _zero_utc_time: function (utc) { return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate()); }, getDates: function () { return $.map(this.dates, this._utc_to_local); }, getUTCDates: function () { return $.map(this.dates, function (d) { return new Date(d); }); }, getDate: function () { return this._utc_to_local(this.getUTCDate()); }, getUTCDate: function () { var selected_date = this.dates.get(-1); if (selected_date !== undefined) { return new Date(selected_date); } else { return null; } }, clearDates: function () { this.inputField.val(''); this.update(); this._trigger('changeDate'); if (this.o.autoclose) { this.hide(); } }, setDates: function () { var args = $.isArray(arguments[0]) ? arguments[0] : arguments; this.update.apply(this, args); this._trigger('changeDate'); this.setValue(); return this; }, setUTCDates: function () { var args = $.isArray(arguments[0]) ? arguments[0] : arguments; this.setDates.apply(this, $.map(args, this._utc_to_local)); return this; }, setDate: alias('setDates'), setUTCDate: alias('setUTCDates'), remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead'), setValue: function () { var formatted = this.getFormattedDate(); this.inputField.val(formatted); return this; }, getFormattedDate: function (format) {
            if (format === undefined)
                format = this.o.format; var lang = this.o.language; return $.map(this.dates, function (d) { return DPGlobal.formatDate(d, format, lang); }).join(this.o.multidateSeparator);
        }, getStartDate: function () { return this.o.startDate; }, setStartDate: function (startDate) { this._process_options({ startDate: startDate }); this.update(); this.updateNavArrows(); return this; }, getEndDate: function () { return this.o.endDate; }, setEndDate: function (endDate) { this._process_options({ endDate: endDate }); this.update(); this.updateNavArrows(); return this; }, setDaysOfWeekDisabled: function (daysOfWeekDisabled) { this._process_options({ daysOfWeekDisabled: daysOfWeekDisabled }); this.update(); return this; }, setDaysOfWeekHighlighted: function (daysOfWeekHighlighted) { this._process_options({ daysOfWeekHighlighted: daysOfWeekHighlighted }); this.update(); return this; }, setDatesDisabled: function (datesDisabled) { this._process_options({ datesDisabled: datesDisabled }); this.update(); return this; }, place: function () {
            if (this.isInline)
                return this; var calendarWidth = this.picker.outerWidth(), calendarHeight = this.picker.outerHeight(), visualPadding = 10, container = $(this.o.container), windowWidth = container.width(), scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(), appendOffset = container.offset(); var parentsZindex = [0]; this.element.parents().each(function () { var itemZIndex = $(this).css('z-index'); if (itemZIndex !== 'auto' && Number(itemZIndex) !== 0) parentsZindex.push(Number(itemZIndex)); }); var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset; var offset = this.component ? this.component.parent().offset() : this.element.offset(); var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false); var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false); var left = offset.left - appendOffset.left; var top = offset.top - appendOffset.top; if (this.o.container !== 'body') { top += scrollTop; }
            this.picker.removeClass('datepicker-orient-top datepicker-orient-bottom ' + 'datepicker-orient-right datepicker-orient-left'); if (this.o.orientation.x !== 'auto') {
                this.picker.addClass('datepicker-orient-' + this.o.orientation.x); if (this.o.orientation.x === 'right')
                    left -= calendarWidth - width;
            }
            else { if (offset.left < 0) { this.picker.addClass('datepicker-orient-left'); left -= offset.left - visualPadding; } else if (left + calendarWidth > windowWidth) { this.picker.addClass('datepicker-orient-right'); left += width - calendarWidth; } else { if (this.o.rtl) { this.picker.addClass('datepicker-orient-right'); } else { this.picker.addClass('datepicker-orient-left'); } } }
            var yorient = this.o.orientation.y, top_overflow; if (yorient === 'auto') { top_overflow = -scrollTop + top - calendarHeight; yorient = top_overflow < 0 ? 'bottom' : 'top'; }
            this.picker.addClass('datepicker-orient-' + yorient); if (yorient === 'top')
                top -= calendarHeight + parseInt(this.picker.css('padding-top')); else
                top += height; if (this.o.rtl) { var right = windowWidth - (left + width); this.picker.css({ top: top, right: right, zIndex: zIndex }); } else { this.picker.css({ top: top, left: left, zIndex: zIndex }); }
            return this;
        }, _allow_update: true, update: function () {
            if (!this._allow_update)
                return this; var oldDates = this.dates.copy(), dates = [], fromArgs = false; if (arguments.length) {
                    $.each(arguments, $.proxy(function (i, date) {
                        if (date instanceof Date)
                            date = this._local_to_utc(date); dates.push(date);
                    }, this)); fromArgs = true;
                } else {
                    dates = this.isInput ? this.element.val() : this.element.data('date') || this.inputField.val(); if (dates && this.o.multidate)
                        dates = dates.split(this.o.multidateSeparator); else
                        dates = [dates]; delete this.element.data().date;
            }
            dates = $.map(dates, $.proxy(function (date) { return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear); }, this)); dates = $.grep(dates, $.proxy(function (date) { return (!this.dateWithinRange(date) || !date); }, this), true); this.dates.replace(dates); if (this.o.updateViewDate) {
                if (this.dates.length)
                    this.viewDate = new Date(this.dates.get(-1)); else if (this.viewDate < this.o.startDate)
                    this.viewDate = new Date(this.o.startDate); else if (this.viewDate > this.o.endDate)
                    this.viewDate = new Date(this.o.endDate); else
                    this.viewDate = this.o.defaultViewDate;
            }
            if (fromArgs) { this.setValue(); this.element.change(); }
            else if (this.dates.length) { if (String(oldDates) !== String(this.dates) && fromArgs) { this._trigger('changeDate'); this.element.change(); } }
            if (!this.dates.length && oldDates.length) { this._trigger('clearDate'); this.element.change(); }
            this.fill(); return this;
        }, fillDow: function () {
            if (this.o.showWeekDays) {
                var dowCnt = this.o.weekStart, html = '<tr>'; if (this.o.calendarWeeks) { html += '<th class="cw">&#160;</th>'; }
                while (dowCnt < this.o.weekStart + 7) {
                    html += '<th class="dow'; if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1)
                        html += ' disabled'; html += '">' + dates[this.o.language].daysMin[(dowCnt++) % 7] + '</th>';
                }
                html += '</tr>'; this.picker.find('.datepicker-days thead').append(html);
            }
        }, fillMonths: function () {
            var localDate = this._utc_to_local(this.viewDate); var html = ''; var focused; for (var i = 0; i < 12; i++) { focused = localDate && localDate.getMonth() === i ? ' focused' : ''; html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i] + '</span>'; }
            this.picker.find('.datepicker-months td').html(html);
        }, setRange: function (range) {
            if (!range || !range.length)
                delete this.range; else
                this.range = $.map(range, function (d) { return d.valueOf(); }); this.fill();
        }, getClassNames: function (date) {
            var cls = [], year = this.viewDate.getUTCFullYear(), month = this.viewDate.getUTCMonth(), today = UTCToday(); if (date.getUTCFullYear() < year || (date.getUTCFullYear() === year && date.getUTCMonth() < month)) { cls.push('old'); } else if (date.getUTCFullYear() > year || (date.getUTCFullYear() === year && date.getUTCMonth() > month)) { cls.push('new'); }
            if (this.focusDate && date.valueOf() === this.focusDate.valueOf())
                cls.push('focused'); if (this.o.todayHighlight && isUTCEquals(date, today)) { cls.push('today'); }
            if (this.dates.contains(date) !== -1)
                cls.push('active'); if (!this.dateWithinRange(date)) { cls.push('disabled'); }
            if (this.dateIsDisabled(date)) { cls.push('disabled', 'disabled-date'); }
            if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1) { cls.push('highlighted'); }
            if (this.range) {
                if (date > this.range[0] && date < this.range[this.range.length - 1]) { cls.push('range'); }
                if ($.inArray(date.valueOf(), this.range) !== -1) { cls.push('selected'); }
                if (date.valueOf() === this.range[0]) { cls.push('range-start'); }
                if (date.valueOf() === this.range[this.range.length - 1]) { cls.push('range-end'); }
            }
            return cls;
        }, _fill_yearsView: function (selector, cssClass, factor, year, startYear, endYear, beforeFn) {
            var html = ''; var step = factor / 10; var view = this.picker.find(selector); var startVal = Math.floor(year / factor) * factor; var endVal = startVal + step * 9; var focusedVal = Math.floor(this.viewDate.getFullYear() / step) * step; var selected = $.map(this.dates, function (d) { return Math.floor(d.getUTCFullYear() / step) * step; }); var classes, tooltip, before; for (var currVal = startVal - step; currVal <= endVal + step; currVal += step) {
                classes = [cssClass]; tooltip = null; if (currVal === startVal - step) { classes.push('old'); } else if (currVal === endVal + step) { classes.push('new'); }
                if ($.inArray(currVal, selected) !== -1) { classes.push('active'); }
                if (currVal < startYear || currVal > endYear) { classes.push('disabled'); }
                if (currVal === focusedVal) { classes.push('focused'); }
                if (beforeFn !== $.noop) {
                    before = beforeFn(new Date(currVal, 0, 1)); if (before === undefined) { before = {}; } else if (typeof before === 'boolean') { before = { enabled: before }; } else if (typeof before === 'string') { before = { classes: before }; }
                    if (before.enabled === false) { classes.push('disabled'); }
                    if (before.classes) { classes = classes.concat(before.classes.split(/\s+/)); }
                    if (before.tooltip) { tooltip = before.tooltip; }
                }
                html += '<span class="' + classes.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + currVal + '</span>';
            }
            view.find('.datepicker-switch').text(startVal + '-' + endVal); view.find('td').html(html);
        }, fill: function () {
            var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, todaytxt = dates[this.o.language].today || dates['en'].today || '', cleartxt = dates[this.o.language].clear || dates['en'].clear || '', titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat, tooltip, before; if (isNaN(year) || isNaN(month))
                return; this.picker.find('.datepicker-days .datepicker-switch').text(DPGlobal.formatDate(d, titleFormat, this.o.language)); this.picker.find('tfoot .today').text(todaytxt).css('display', this.o.todayBtn === true || this.o.todayBtn === 'linked' ? 'table-cell' : 'none'); this.picker.find('tfoot .clear').text(cleartxt).css('display', this.o.clearBtn === true ? 'table-cell' : 'none'); this.picker.find('thead .datepicker-title').text(this.o.title).css('display', typeof this.o.title === 'string' && this.o.title !== '' ? 'table-cell' : 'none'); this.updateNavArrows(); this.fillMonths(); var prevMonth = UTCDate(year, month, 0), day = prevMonth.getUTCDate(); prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7); var nextMonth = new Date(prevMonth); if (prevMonth.getUTCFullYear() < 100) { nextMonth.setUTCFullYear(prevMonth.getUTCFullYear()); }
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42); nextMonth = nextMonth.valueOf(); var html = []; var weekDay, clsName; while (prevMonth.valueOf() < nextMonth) {
                weekDay = prevMonth.getUTCDay(); if (weekDay === this.o.weekStart) {
                    html.push('<tr>'); if (this.o.calendarWeeks) {
                        var
                        ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5), th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5), yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5), calWeek = (th - yth) / 864e5 / 7 + 1; html.push('<td class="cw">' + calWeek + '</td>');
                    }
                }
                clsName = this.getClassNames(prevMonth); clsName.push('day'); var content = prevMonth.getUTCDate(); if (this.o.beforeShowDay !== $.noop) {
                    before = this.o.beforeShowDay(this._utc_to_local(prevMonth)); if (before === undefined)
                        before = {}; else if (typeof before === 'boolean')
                        before = { enabled: before }; else if (typeof before === 'string')
                        before = { classes: before }; if (before.enabled === false)
                        clsName.push('disabled'); if (before.classes)
                        clsName = clsName.concat(before.classes.split(/\s+/)); if (before.tooltip)
                        tooltip = before.tooltip; if (before.content)
                        content = before.content;
                }
                if ($.isFunction($.uniqueSort)) { clsName = $.uniqueSort(clsName); } else { clsName = $.unique(clsName); }
                html.push('<td class="' + clsName.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + ' data-date="' + prevMonth.getTime().toString() + '">' + content + '</td>'); tooltip = null; if (weekDay === this.o.weekEnd) { html.push('</tr>'); }
                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            this.picker.find('.datepicker-days tbody').html(html.join('')); var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months'; var months = this.picker.find('.datepicker-months').find('.datepicker-switch').text(this.o.maxViewMode < 2 ? monthsTitle : year).end().find('tbody span').removeClass('active'); $.each(this.dates, function (i, d) {
                if (d.getUTCFullYear() === year)
                    months.eq(d.getUTCMonth()).addClass('active');
            }); if (year < startYear || year > endYear) { months.addClass('disabled'); }
            if (year === startYear) { months.slice(0, startMonth).addClass('disabled'); }
            if (year === endYear) { months.slice(endMonth + 1).addClass('disabled'); }
            if (this.o.beforeShowMonth !== $.noop) {
                var that = this; $.each(months, function (i, month) {
                    var moDate = new Date(year, i, 1); var before = that.o.beforeShowMonth(moDate); if (before === undefined)
                        before = {}; else if (typeof before === 'boolean')
                        before = { enabled: before }; else if (typeof before === 'string')
                        before = { classes: before }; if (before.enabled === false && !$(month).hasClass('disabled'))
                        $(month).addClass('disabled'); if (before.classes)
                        $(month).addClass(before.classes); if (before.tooltip)
                        $(month).prop('title', before.tooltip);
                });
            }
            this._fill_yearsView('.datepicker-years', 'year', 10, year, startYear, endYear, this.o.beforeShowYear); this._fill_yearsView('.datepicker-decades', 'decade', 100, year, startYear, endYear, this.o.beforeShowDecade); this._fill_yearsView('.datepicker-centuries', 'century', 1000, year, startYear, endYear, this.o.beforeShowCentury);
        }, updateNavArrows: function () {
            if (!this._allow_update)
                return; var d = new Date(this.viewDate), year = d.getUTCFullYear(), month = d.getUTCMonth(), startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity, startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity, endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity, endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity, prevIsDisabled, nextIsDisabled, factor = 1; switch (this.viewMode) { case 0: prevIsDisabled = year <= startYear && month <= startMonth; nextIsDisabled = year >= endYear && month >= endMonth; break; case 4: factor *= 10; case 3: factor *= 10; case 2: factor *= 10; case 1: prevIsDisabled = Math.floor(year / factor) * factor <= startYear; nextIsDisabled = Math.floor(year / factor) * factor + factor >= endYear; break; }
            this.picker.find('.prev').toggleClass('disabled', prevIsDisabled); this.picker.find('.next').toggleClass('disabled', nextIsDisabled);
        }, click: function (e) {
            e.preventDefault(); e.stopPropagation(); var target, dir, day, year, month; target = $(e.target); if (target.hasClass('datepicker-switch') && this.viewMode !== this.o.maxViewMode) { this.setViewMode(this.viewMode + 1); }
            if (target.hasClass('today') && !target.hasClass('day')) { this.setViewMode(0); this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view'); }
            if (target.hasClass('clear')) { this.clearDates(); }
            if (!target.hasClass('disabled')) {
                if (target.hasClass('month') || target.hasClass('year') || target.hasClass('decade') || target.hasClass('century')) {
                    this.viewDate.setUTCDate(1); day = 1; if (this.viewMode === 1) { month = target.parent().find('span').index(target); year = this.viewDate.getUTCFullYear(); this.viewDate.setUTCMonth(month); } else { month = 0; year = Number(target.text()); this.viewDate.setUTCFullYear(year); }
                    this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate); if (this.viewMode === this.o.minViewMode) { this._setDate(UTCDate(year, month, day)); } else { this.setViewMode(this.viewMode - 1); this.fill(); }
                }
            }
            if (this.picker.is(':visible') && this._focused_from) { this._focused_from.focus(); }
            delete this._focused_from;
        }, dayCellClick: function (e) {
            var $target = $(e.currentTarget); var timestamp = $target.data('date'); var date = new Date(timestamp); if (this.o.updateViewDate) {
                if (date.getUTCFullYear() !== this.viewDate.getUTCFullYear()) { this._trigger('changeYear', this.viewDate); }
                if (date.getUTCMonth() !== this.viewDate.getUTCMonth()) { this._trigger('changeMonth', this.viewDate); }
            }
            this._setDate(date);
        }, navArrowsClick: function (e) {
            var $target = $(e.currentTarget); var dir = $target.hasClass('prev') ? -1 : 1; if (this.viewMode !== 0) { dir *= DPGlobal.viewModes[this.viewMode].navStep * 12; }
            this.viewDate = this.moveMonth(this.viewDate, dir); this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate); this.fill();
        }, _toggle_multidate: function (date) {
            var ix = this.dates.contains(date); if (!date) { this.dates.clear(); }
            if (ix !== -1) { if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) { this.dates.remove(ix); } } else if (this.o.multidate === false) { this.dates.clear(); this.dates.push(date); }
            else { this.dates.push(date); }
            if (typeof this.o.multidate === 'number')
                while (this.dates.length > this.o.multidate)
                    this.dates.remove(0);
        }, _setDate: function (date, which) {
            if (!which || which === 'date')
                this._toggle_multidate(date && new Date(date)); if ((!which && this.o.updateViewDate) || which === 'view')
                this.viewDate = date && new Date(date); this.fill(); this.setValue(); if (!which || which !== 'view') { this._trigger('changeDate'); }
            this.inputField.trigger('change'); if (this.o.autoclose && (!which || which === 'date')) { this.hide(); }
        }, moveDay: function (date, dir) { var newDate = new Date(date); newDate.setUTCDate(date.getUTCDate() + dir); return newDate; }, moveWeek: function (date, dir) { return this.moveDay(date, dir * 7); }, moveMonth: function (date, dir) {
            if (!isValidDate(date))
                return this.o.defaultViewDate; if (!dir)
                return date; var new_date = new Date(date.valueOf()), day = new_date.getUTCDate(), month = new_date.getUTCMonth(), mag = Math.abs(dir), new_month, test; dir = dir > 0 ? 1 : -1; if (mag === 1) { test = dir === -1 ? function () { return new_date.getUTCMonth() === month; } : function () { return new_date.getUTCMonth() !== new_month; }; new_month = month + dir; new_date.setUTCMonth(new_month); new_month = (new_month + 12) % 12; }
            else {
                for (var i = 0; i < mag; i++)
                    new_date = this.moveMonth(new_date, dir); new_month = new_date.getUTCMonth(); new_date.setUTCDate(day); test = function () { return new_month !== new_date.getUTCMonth(); };
            }
            while (test()) { new_date.setUTCDate(--day); new_date.setUTCMonth(new_month); }
            return new_date;
        }, moveYear: function (date, dir) { return this.moveMonth(date, dir * 12); }, moveAvailableDate: function (date, dir, fn) {
            do {
                date = this[fn](date, dir); if (!this.dateWithinRange(date))
                    return false; fn = 'moveDay';
            }
            while (this.dateIsDisabled(date)); return date;
        }, weekOfDateIsDisabled: function (date) { return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1; }, dateIsDisabled: function (date) { return (this.weekOfDateIsDisabled(date) || $.grep(this.o.datesDisabled, function (d) { return isUTCEquals(date, d); }).length > 0); }, dateWithinRange: function (date) { return date >= this.o.startDate && date <= this.o.endDate; }, keydown: function (e) {
            if (!this.picker.is(':visible')) {
                if (e.keyCode === 40 || e.keyCode === 27) { this.show(); e.stopPropagation(); }
                return;
            }
            var dateChanged = false, dir, newViewDate, focusDate = this.focusDate || this.viewDate; switch (e.keyCode) {
                case 27: if (this.focusDate) { this.focusDate = null; this.viewDate = this.dates.get(-1) || this.viewDate; this.fill(); }
                else
                    this.hide(); e.preventDefault(); e.stopPropagation(); break; case 37: case 38: case 39: case 40: if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7)
                        break; dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1; if (this.viewMode === 0) {
                            if (e.ctrlKey) {
                                newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear'); if (newViewDate)
                                    this._trigger('changeYear', this.viewDate);
                            } else if (e.shiftKey) {
                                newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth'); if (newViewDate)
                                    this._trigger('changeMonth', this.viewDate);
                            } else if (e.keyCode === 37 || e.keyCode === 39) { newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay'); } else if (!this.weekOfDateIsDisabled(focusDate)) { newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek'); }
                        } else if (this.viewMode === 1) {
                            if (e.keyCode === 38 || e.keyCode === 40) { dir = dir * 4; }
                            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');
                        } else if (this.viewMode === 2) {
                            if (e.keyCode === 38 || e.keyCode === 40) { dir = dir * 4; }
                            newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');
                        }
                    if (newViewDate) { this.focusDate = this.viewDate = newViewDate; this.setValue(); this.fill(); e.preventDefault(); }
                    break; case 13: if (!this.o.forceParse)
                        break; focusDate = this.focusDate || this.dates.get(-1) || this.viewDate; if (this.o.keyboardNavigation) { this._toggle_multidate(focusDate); dateChanged = true; }
                    this.focusDate = null; this.viewDate = this.dates.get(-1) || this.viewDate; this.setValue(); this.fill(); if (this.picker.is(':visible')) {
                        e.preventDefault(); e.stopPropagation(); if (this.o.autoclose)
                            this.hide();
                    }
                    break; case 9: this.focusDate = null; this.viewDate = this.dates.get(-1) || this.viewDate; this.fill(); this.hide(); break;
            }
            if (dateChanged) {
                if (this.dates.length)
                    this._trigger('changeDate'); else
                    this._trigger('clearDate'); this.inputField.trigger('change');
            }
        }, setViewMode: function (viewMode) { this.viewMode = viewMode; this.picker.children('div').hide().filter('.datepicker-' + DPGlobal.viewModes[this.viewMode].clsName).show(); this.updateNavArrows(); this._trigger('changeViewMode', new Date(this.viewDate)); }
    }; var DateRangePicker = function (element, options) { $.data(element, 'datepicker', this); this.element = $(element); this.inputs = $.map(options.inputs, function (i) { return i.jquery ? i[0] : i; }); delete options.inputs; this.keepEmptyValues = options.keepEmptyValues; delete options.keepEmptyValues; datepickerPlugin.call($(this.inputs), options).on('changeDate', $.proxy(this.dateUpdated, this)); this.pickers = $.map(this.inputs, function (i) { return $.data(i, 'datepicker'); }); this.updateDates(); }; DateRangePicker.prototype = {
        updateDates: function () { this.dates = $.map(this.pickers, function (i) { return i.getUTCDate(); }); this.updateRanges(); }, updateRanges: function () { var range = $.map(this.dates, function (d) { return d.valueOf(); }); $.each(this.pickers, function (i, p) { p.setRange(range); }); }, dateUpdated: function (e) {
            if (this.updating)
                return; this.updating = true; var dp = $.data(e.target, 'datepicker'); if (dp === undefined) { return; }
            var new_date = dp.getUTCDate(), keep_empty_values = this.keepEmptyValues, i = $.inArray(e.target, this.inputs), j = i - 1, k = i + 1, l = this.inputs.length; if (i === -1)
                return; $.each(this.pickers, function (i, p) {
                    if (!p.getUTCDate() && (p === dp || !keep_empty_values))
                        p.setUTCDate(new_date);
                }); if (new_date < this.dates[j]) { while (j >= 0 && new_date < this.dates[j]) { this.pickers[j--].setUTCDate(new_date); } } else if (new_date > this.dates[k]) { while (k < l && new_date > this.dates[k]) { this.pickers[k++].setUTCDate(new_date); } }
            this.updateDates(); delete this.updating;
        }, destroy: function () { $.map(this.pickers, function (p) { p.destroy(); }); $(this.inputs).off('changeDate', this.dateUpdated); delete this.element.data().datepicker; }, remove: alias('destroy', 'Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead')
    }; function opts_from_el(el, prefix) {
        var data = $(el).data(), out = {}, inkey, replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'); prefix = new RegExp('^' + prefix.toLowerCase()); function re_lower(_, a) { return a.toLowerCase(); }
        for (var key in data)
            if (prefix.test(key)) { inkey = key.replace(replace, re_lower); out[inkey] = data[key]; }
        return out;
    }
    function opts_from_locale(lang) {
        var out = {}; if (!dates[lang]) {
            lang = lang.split('-')[0]; if (!dates[lang])
                return;
        }
        var d = dates[lang]; $.each(locale_opts, function (i, k) {
            if (k in d)
                out[k] = d[k];
        }); return out;
    }
    var old = $.fn.datepicker; var datepickerPlugin = function (option) {
        var args = Array.apply(null, arguments); args.shift(); var internal_return; this.each(function () {
            var $this = $(this), data = $this.data('datepicker'), options = typeof option === 'object' && option; if (!data) {
                var elopts = opts_from_el(this, 'date'), xopts = $.extend({}, defaults, elopts, options), locopts = opts_from_locale(xopts.language), opts = $.extend({}, defaults, locopts, elopts, options); if ($this.hasClass('input-daterange') || opts.inputs) { $.extend(opts, { inputs: opts.inputs || $this.find('input').toArray() }); data = new DateRangePicker(this, opts); }
                else { data = new Datepicker(this, opts); }
                $this.data('datepicker', data);
            }
            if (typeof option === 'string' && typeof data[option] === 'function') { internal_return = data[option].apply(data, args); }
        }); if (internal_return === undefined || internal_return instanceof Datepicker || internal_return instanceof DateRangePicker)
            return this; if (this.length > 1)
            throw new Error('Using only allowed for the collection of a single element (' + option + ' function)'); else
            return internal_return;
    }; $.fn.datepicker = datepickerPlugin; var defaults = $.fn.datepicker.defaults = { assumeNearbyYear: false, autoclose: false, beforeShowDay: $.noop, beforeShowMonth: $.noop, beforeShowYear: $.noop, beforeShowDecade: $.noop, beforeShowCentury: $.noop, calendarWeeks: false, clearBtn: false, toggleActive: false, daysOfWeekDisabled: [], daysOfWeekHighlighted: [], datesDisabled: [], endDate: Infinity, forceParse: true, format: 'mm/dd/yyyy', keepEmptyValues: false, keyboardNavigation: true, language: 'en', minViewMode: 0, maxViewMode: 4, multidate: false, multidateSeparator: ',', orientation: "auto", rtl: false, startDate: -Infinity, startView: 0, todayBtn: false, todayHighlight: false, updateViewDate: true, weekStart: 0, disableTouchKeyboard: false, enableOnReadonly: true, showOnFocus: true, zIndexOffset: 10, container: 'body', immediateUpdates: false, title: '', templates: { leftArrow: '&#x00AB;', rightArrow: '&#x00BB;' }, showWeekDays: true }; var locale_opts = $.fn.datepicker.locale_opts = ['format', 'rtl', 'weekStart']; $.fn.datepicker.Constructor = Datepicker; var dates = $.fn.datepicker.dates = { en: { days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], today: "Today", clear: "Clear", titleFormat: "MM yyyy" } }; var DPGlobal = {
        viewModes: [{ names: ['days', 'month'], clsName: 'days', e: 'changeMonth' }, { names: ['months', 'year'], clsName: 'months', e: 'changeYear', navStep: 1 }, { names: ['years', 'decade'], clsName: 'years', e: 'changeDecade', navStep: 10 }, { names: ['decades', 'century'], clsName: 'decades', e: 'changeCentury', navStep: 100 }, { names: ['centuries', 'millennium'], clsName: 'centuries', e: 'changeMillennium', navStep: 1000 }], validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g, nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g, parseFormat: function (format) {
            if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function')
                return format; var separators = format.replace(this.validParts, '\0').split('\0'), parts = format.match(this.validParts); if (!separators || !separators.length || !parts || parts.length === 0) { throw new Error("Invalid date format."); }
            return { separators: separators, parts: parts };
        }, parseDate: function (date, format, language, assumeNearby) {
            if (!date)
                return undefined; if (date instanceof Date)
                return date; if (typeof format === 'string')
                format = DPGlobal.parseFormat(format); if (format.toValue)
                return format.toValue(date, format, language); var fn_map = { d: 'moveDay', m: 'moveMonth', w: 'moveWeek', y: 'moveYear' }, dateAliases = { yesterday: '-1d', today: '+0d', tomorrow: '+1d' }, parts, part, dir, i, fn; if (date in dateAliases) { date = dateAliases[date]; }
            if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(date)) {
                parts = date.match(/([\-+]\d+)([dmwy])/gi); date = new Date(); for (i = 0; i < parts.length; i++) { part = parts[i].match(/([\-+]\d+)([dmwy])/i); dir = Number(part[1]); fn = fn_map[part[2].toLowerCase()]; date = Datepicker.prototype[fn](date, dir); }
                return Datepicker.prototype._zero_utc_time(date);
            }
            parts = date && date.match(this.nonpunctuation) || []; function applyNearbyYear(year, threshold) {
                if (threshold === true)
                    threshold = 10; if (year < 100) { year += 2000; if (year > ((new Date()).getFullYear() + threshold)) { year -= 100; } }
                return year;
            }
            var parsed = {}, setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'], setters_map = {
                yyyy: function (d, v) { return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v); }, m: function (d, v) {
                    if (isNaN(d))
                        return d; v -= 1; while (v < 0) v += 12; v %= 12; d.setUTCMonth(v); while (d.getUTCMonth() !== v)
                        d.setUTCDate(d.getUTCDate() - 1); return d;
                }, d: function (d, v) { return d.setUTCDate(v); }
            }, val, filtered; setters_map['yy'] = setters_map['yyyy']; setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m']; setters_map['dd'] = setters_map['d']; date = UTCToday(); var fparts = format.parts.slice(); if (parts.length !== fparts.length) { fparts = $(fparts).filter(function (i, p) { return $.inArray(p, setters_order) !== -1; }).toArray(); }
            function match_part() { var m = this.slice(0, parts[i].length), p = parts[i].slice(0, m.length); return m.toLowerCase() === p.toLowerCase(); }
            if (parts.length === fparts.length) {
                var cnt; for (i = 0, cnt = fparts.length; i < cnt; i++) {
                    val = parseInt(parts[i], 10); part = fparts[i]; if (isNaN(val)) { switch (part) { case 'MM': filtered = $(dates[language].months).filter(match_part); val = $.inArray(filtered[0], dates[language].months) + 1; break; case 'M': filtered = $(dates[language].monthsShort).filter(match_part); val = $.inArray(filtered[0], dates[language].monthsShort) + 1; break; } }
                    parsed[part] = val;
                }
                var _date, s; for (i = 0; i < setters_order.length; i++) {
                    s = setters_order[i]; if (s in parsed && !isNaN(parsed[s])) {
                        _date = new Date(date); setters_map[s](_date, parsed[s]); if (!isNaN(_date))
                            date = _date;
                    }
                }
            }
            return date;
        }, formatDate: function (date, format, language) {
            if (!date)
                return ''; if (typeof format === 'string')
                format = DPGlobal.parseFormat(format); if (format.toDisplay)
                return format.toDisplay(date, format, language); var val = { d: date.getUTCDate(), D: dates[language].daysShort[date.getUTCDay()], DD: dates[language].days[date.getUTCDay()], m: date.getUTCMonth() + 1, M: dates[language].monthsShort[date.getUTCMonth()], MM: dates[language].months[date.getUTCMonth()], yy: date.getUTCFullYear().toString().substring(2), yyyy: date.getUTCFullYear() }; val.dd = (val.d < 10 ? '0' : '') + val.d; val.mm = (val.m < 10 ? '0' : '') + val.m; date = []; var seps = $.extend([], format.separators); for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {
                    if (seps.length)
                        date.push(seps.shift()); date.push(val[format.parts[i]]);
                }
            return date.join('');
        }, headTemplate: '<thead>' + '<tr>' + '<th colspan="7" class="datepicker-title"></th>' + '</tr>' + '<tr>' + '<th class="prev">' + defaults.templates.leftArrow + '</th>' + '<th colspan="5" class="datepicker-switch"></th>' + '<th class="next">' + defaults.templates.rightArrow + '</th>' + '</tr>' + '</thead>', contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>', footTemplate: '<tfoot>' + '<tr>' + '<th colspan="7" class="today"></th>' + '</tr>' + '<tr>' + '<th colspan="7" class="clear"></th>' + '</tr>' + '</tfoot>'
    }; DPGlobal.template = '<div class="datepicker">' + '<div class="datepicker-days">' + '<table class="table-condensed">' +
        DPGlobal.headTemplate + '<tbody></tbody>' +
        DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-decades">' + '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-centuries">' + '<table class="table-condensed">' +
        DPGlobal.headTemplate +
        DPGlobal.contTemplate +
        DPGlobal.footTemplate + '</table>' + '</div>' + '</div>'; $.fn.datepicker.DPGlobal = DPGlobal; $.fn.datepicker.noConflict = function () { $.fn.datepicker = old; return this; }; $.fn.datepicker.version = '1.7.1'; $.fn.datepicker.deprecated = function (msg) { var console = window.console; if (console && console.warn) { console.warn('DEPRECATED: ' + msg); } }; $(document).on('focus.datepicker.data-api click.datepicker.data-api', '[data-provide="datepicker"]', function (e) {
            var $this = $(this); if ($this.data('datepicker'))
                return; e.preventDefault(); datepickerPlugin.call($this, 'show');
        }); $(function () { datepickerPlugin.call($('[data-provide="datepicker-inline"]')); });
}));;